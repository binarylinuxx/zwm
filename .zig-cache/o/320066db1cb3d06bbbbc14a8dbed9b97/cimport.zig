pub const __builtin_bswap16 = @import("std").zig.c_builtins.__builtin_bswap16;
pub const __builtin_bswap32 = @import("std").zig.c_builtins.__builtin_bswap32;
pub const __builtin_bswap64 = @import("std").zig.c_builtins.__builtin_bswap64;
pub const __builtin_signbit = @import("std").zig.c_builtins.__builtin_signbit;
pub const __builtin_signbitf = @import("std").zig.c_builtins.__builtin_signbitf;
pub const __builtin_popcount = @import("std").zig.c_builtins.__builtin_popcount;
pub const __builtin_ctz = @import("std").zig.c_builtins.__builtin_ctz;
pub const __builtin_clz = @import("std").zig.c_builtins.__builtin_clz;
pub const __builtin_sqrt = @import("std").zig.c_builtins.__builtin_sqrt;
pub const __builtin_sqrtf = @import("std").zig.c_builtins.__builtin_sqrtf;
pub const __builtin_sin = @import("std").zig.c_builtins.__builtin_sin;
pub const __builtin_sinf = @import("std").zig.c_builtins.__builtin_sinf;
pub const __builtin_cos = @import("std").zig.c_builtins.__builtin_cos;
pub const __builtin_cosf = @import("std").zig.c_builtins.__builtin_cosf;
pub const __builtin_exp = @import("std").zig.c_builtins.__builtin_exp;
pub const __builtin_expf = @import("std").zig.c_builtins.__builtin_expf;
pub const __builtin_exp2 = @import("std").zig.c_builtins.__builtin_exp2;
pub const __builtin_exp2f = @import("std").zig.c_builtins.__builtin_exp2f;
pub const __builtin_log = @import("std").zig.c_builtins.__builtin_log;
pub const __builtin_logf = @import("std").zig.c_builtins.__builtin_logf;
pub const __builtin_log2 = @import("std").zig.c_builtins.__builtin_log2;
pub const __builtin_log2f = @import("std").zig.c_builtins.__builtin_log2f;
pub const __builtin_log10 = @import("std").zig.c_builtins.__builtin_log10;
pub const __builtin_log10f = @import("std").zig.c_builtins.__builtin_log10f;
pub const __builtin_abs = @import("std").zig.c_builtins.__builtin_abs;
pub const __builtin_labs = @import("std").zig.c_builtins.__builtin_labs;
pub const __builtin_llabs = @import("std").zig.c_builtins.__builtin_llabs;
pub const __builtin_fabs = @import("std").zig.c_builtins.__builtin_fabs;
pub const __builtin_fabsf = @import("std").zig.c_builtins.__builtin_fabsf;
pub const __builtin_floor = @import("std").zig.c_builtins.__builtin_floor;
pub const __builtin_floorf = @import("std").zig.c_builtins.__builtin_floorf;
pub const __builtin_ceil = @import("std").zig.c_builtins.__builtin_ceil;
pub const __builtin_ceilf = @import("std").zig.c_builtins.__builtin_ceilf;
pub const __builtin_trunc = @import("std").zig.c_builtins.__builtin_trunc;
pub const __builtin_truncf = @import("std").zig.c_builtins.__builtin_truncf;
pub const __builtin_round = @import("std").zig.c_builtins.__builtin_round;
pub const __builtin_roundf = @import("std").zig.c_builtins.__builtin_roundf;
pub const __builtin_strlen = @import("std").zig.c_builtins.__builtin_strlen;
pub const __builtin_strcmp = @import("std").zig.c_builtins.__builtin_strcmp;
pub const __builtin_object_size = @import("std").zig.c_builtins.__builtin_object_size;
pub const __builtin___memset_chk = @import("std").zig.c_builtins.__builtin___memset_chk;
pub const __builtin_memset = @import("std").zig.c_builtins.__builtin_memset;
pub const __builtin___memcpy_chk = @import("std").zig.c_builtins.__builtin___memcpy_chk;
pub const __builtin_memcpy = @import("std").zig.c_builtins.__builtin_memcpy;
pub const __builtin_expect = @import("std").zig.c_builtins.__builtin_expect;
pub const __builtin_nanf = @import("std").zig.c_builtins.__builtin_nanf;
pub const __builtin_huge_valf = @import("std").zig.c_builtins.__builtin_huge_valf;
pub const __builtin_inff = @import("std").zig.c_builtins.__builtin_inff;
pub const __builtin_isnan = @import("std").zig.c_builtins.__builtin_isnan;
pub const __builtin_isinf = @import("std").zig.c_builtins.__builtin_isinf;
pub const __builtin_isinf_sign = @import("std").zig.c_builtins.__builtin_isinf_sign;
pub const __has_builtin = @import("std").zig.c_builtins.__has_builtin;
pub const __builtin_assume = @import("std").zig.c_builtins.__builtin_assume;
pub const __builtin_unreachable = @import("std").zig.c_builtins.__builtin_unreachable;
pub const __builtin_constant_p = @import("std").zig.c_builtins.__builtin_constant_p;
pub const __builtin_mul_overflow = @import("std").zig.c_builtins.__builtin_mul_overflow;
pub const __u_char = u8;
pub const __u_short = c_ushort;
pub const __u_int = c_uint;
pub const __u_long = c_ulong;
pub const __int8_t = i8;
pub const __uint8_t = u8;
pub const __int16_t = c_short;
pub const __uint16_t = c_ushort;
pub const __int32_t = c_int;
pub const __uint32_t = c_uint;
pub const __int64_t = c_long;
pub const __uint64_t = c_ulong;
pub const __int_least8_t = __int8_t;
pub const __uint_least8_t = __uint8_t;
pub const __int_least16_t = __int16_t;
pub const __uint_least16_t = __uint16_t;
pub const __int_least32_t = __int32_t;
pub const __uint_least32_t = __uint32_t;
pub const __int_least64_t = __int64_t;
pub const __uint_least64_t = __uint64_t;
pub const __quad_t = c_long;
pub const __u_quad_t = c_ulong;
pub const __intmax_t = c_long;
pub const __uintmax_t = c_ulong;
pub const __dev_t = c_ulong;
pub const __uid_t = c_uint;
pub const __gid_t = c_uint;
pub const __ino_t = c_ulong;
pub const __ino64_t = c_ulong;
pub const __mode_t = c_uint;
pub const __nlink_t = c_ulong;
pub const __off_t = c_long;
pub const __off64_t = c_long;
pub const __pid_t = c_int;
pub const __fsid_t = extern struct {
    __val: [2]c_int = @import("std").mem.zeroes([2]c_int),
};
pub const __clock_t = c_long;
pub const __rlim_t = c_ulong;
pub const __rlim64_t = c_ulong;
pub const __id_t = c_uint;
pub const __time_t = c_long;
pub const __useconds_t = c_uint;
pub const __suseconds_t = c_long;
pub const __suseconds64_t = c_long;
pub const __daddr_t = c_int;
pub const __key_t = c_int;
pub const __clockid_t = c_int;
pub const __timer_t = ?*anyopaque;
pub const __blksize_t = c_long;
pub const __blkcnt_t = c_long;
pub const __blkcnt64_t = c_long;
pub const __fsblkcnt_t = c_ulong;
pub const __fsblkcnt64_t = c_ulong;
pub const __fsfilcnt_t = c_ulong;
pub const __fsfilcnt64_t = c_ulong;
pub const __fsword_t = c_long;
pub const __ssize_t = c_long;
pub const __syscall_slong_t = c_long;
pub const __syscall_ulong_t = c_ulong;
pub const __loff_t = __off64_t;
pub const __caddr_t = [*c]u8;
pub const __intptr_t = c_long;
pub const __socklen_t = c_uint;
pub const __sig_atomic_t = c_int;
pub const int_least8_t = __int_least8_t;
pub const int_least16_t = __int_least16_t;
pub const int_least32_t = __int_least32_t;
pub const int_least64_t = __int_least64_t;
pub const uint_least8_t = __uint_least8_t;
pub const uint_least16_t = __uint_least16_t;
pub const uint_least32_t = __uint_least32_t;
pub const uint_least64_t = __uint_least64_t;
pub const int_fast8_t = i8;
pub const int_fast16_t = c_long;
pub const int_fast32_t = c_long;
pub const int_fast64_t = c_long;
pub const uint_fast8_t = u8;
pub const uint_fast16_t = c_ulong;
pub const uint_fast32_t = c_ulong;
pub const uint_fast64_t = c_ulong;
pub const intmax_t = __intmax_t;
pub const uintmax_t = __uintmax_t;
pub const khronos_int32_t = i32;
pub const khronos_uint32_t = u32;
pub const khronos_int64_t = i64;
pub const khronos_uint64_t = u64;
pub const khronos_int8_t = i8;
pub const khronos_uint8_t = u8;
pub const khronos_int16_t = c_short;
pub const khronos_uint16_t = c_ushort;
pub const khronos_intptr_t = c_long;
pub const khronos_uintptr_t = c_ulong;
pub const khronos_ssize_t = c_long;
pub const khronos_usize_t = c_ulong;
pub const khronos_float_t = f32;
pub const khronos_utime_nanoseconds_t = khronos_uint64_t;
pub const khronos_stime_nanoseconds_t = khronos_int64_t;
pub const KHRONOS_FALSE: c_int = 0;
pub const KHRONOS_TRUE: c_int = 1;
pub const KHRONOS_BOOLEAN_ENUM_FORCE_SIZE: c_int = 2147483647;
pub const khronos_boolean_enum_t = c_uint;
pub const GLbyte = khronos_int8_t;
pub const GLclampf = khronos_float_t;
pub const GLfixed = khronos_int32_t;
pub const GLshort = khronos_int16_t;
pub const GLushort = khronos_uint16_t;
pub const GLvoid = anyopaque;
pub const struct___GLsync = opaque {};
pub const GLsync = ?*struct___GLsync;
pub const GLint64 = khronos_int64_t;
pub const GLuint64 = khronos_uint64_t;
pub const GLenum = c_uint;
pub const GLuint = c_uint;
pub const GLchar = u8;
pub const GLfloat = khronos_float_t;
pub const GLsizeiptr = khronos_ssize_t;
pub const GLintptr = khronos_intptr_t;
pub const GLbitfield = c_uint;
pub const GLint = c_int;
pub const GLboolean = u8;
pub const GLsizei = c_int;
pub const GLubyte = khronos_uint8_t;
pub const PFNGLACTIVETEXTUREPROC = ?*const fn (GLenum) callconv(.c) void;
pub const PFNGLATTACHSHADERPROC = ?*const fn (GLuint, GLuint) callconv(.c) void;
pub const PFNGLBINDATTRIBLOCATIONPROC = ?*const fn (GLuint, GLuint, [*c]const GLchar) callconv(.c) void;
pub const PFNGLBINDBUFFERPROC = ?*const fn (GLenum, GLuint) callconv(.c) void;
pub const PFNGLBINDFRAMEBUFFERPROC = ?*const fn (GLenum, GLuint) callconv(.c) void;
pub const PFNGLBINDRENDERBUFFERPROC = ?*const fn (GLenum, GLuint) callconv(.c) void;
pub const PFNGLBINDTEXTUREPROC = ?*const fn (GLenum, GLuint) callconv(.c) void;
pub const PFNGLBLENDCOLORPROC = ?*const fn (GLfloat, GLfloat, GLfloat, GLfloat) callconv(.c) void;
pub const PFNGLBLENDEQUATIONPROC = ?*const fn (GLenum) callconv(.c) void;
pub const PFNGLBLENDEQUATIONSEPARATEPROC = ?*const fn (GLenum, GLenum) callconv(.c) void;
pub const PFNGLBLENDFUNCPROC = ?*const fn (GLenum, GLenum) callconv(.c) void;
pub const PFNGLBLENDFUNCSEPARATEPROC = ?*const fn (GLenum, GLenum, GLenum, GLenum) callconv(.c) void;
pub const PFNGLBUFFERDATAPROC = ?*const fn (GLenum, GLsizeiptr, ?*const anyopaque, GLenum) callconv(.c) void;
pub const PFNGLBUFFERSUBDATAPROC = ?*const fn (GLenum, GLintptr, GLsizeiptr, ?*const anyopaque) callconv(.c) void;
pub const PFNGLCHECKFRAMEBUFFERSTATUSPROC = ?*const fn (GLenum) callconv(.c) GLenum;
pub const PFNGLCLEARPROC = ?*const fn (GLbitfield) callconv(.c) void;
pub const PFNGLCLEARCOLORPROC = ?*const fn (GLfloat, GLfloat, GLfloat, GLfloat) callconv(.c) void;
pub const PFNGLCLEARDEPTHFPROC = ?*const fn (GLfloat) callconv(.c) void;
pub const PFNGLCLEARSTENCILPROC = ?*const fn (GLint) callconv(.c) void;
pub const PFNGLCOLORMASKPROC = ?*const fn (GLboolean, GLboolean, GLboolean, GLboolean) callconv(.c) void;
pub const PFNGLCOMPILESHADERPROC = ?*const fn (GLuint) callconv(.c) void;
pub const PFNGLCOMPRESSEDTEXIMAGE2DPROC = ?*const fn (GLenum, GLint, GLenum, GLsizei, GLsizei, GLint, GLsizei, ?*const anyopaque) callconv(.c) void;
pub const PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC = ?*const fn (GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, ?*const anyopaque) callconv(.c) void;
pub const PFNGLCOPYTEXIMAGE2DPROC = ?*const fn (GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint) callconv(.c) void;
pub const PFNGLCOPYTEXSUBIMAGE2DPROC = ?*const fn (GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei) callconv(.c) void;
pub const PFNGLCREATEPROGRAMPROC = ?*const fn () callconv(.c) GLuint;
pub const PFNGLCREATESHADERPROC = ?*const fn (GLenum) callconv(.c) GLuint;
pub const PFNGLCULLFACEPROC = ?*const fn (GLenum) callconv(.c) void;
pub const PFNGLDELETEBUFFERSPROC = ?*const fn (GLsizei, [*c]const GLuint) callconv(.c) void;
pub const PFNGLDELETEFRAMEBUFFERSPROC = ?*const fn (GLsizei, [*c]const GLuint) callconv(.c) void;
pub const PFNGLDELETEPROGRAMPROC = ?*const fn (GLuint) callconv(.c) void;
pub const PFNGLDELETERENDERBUFFERSPROC = ?*const fn (GLsizei, [*c]const GLuint) callconv(.c) void;
pub const PFNGLDELETESHADERPROC = ?*const fn (GLuint) callconv(.c) void;
pub const PFNGLDELETETEXTURESPROC = ?*const fn (GLsizei, [*c]const GLuint) callconv(.c) void;
pub const PFNGLDEPTHFUNCPROC = ?*const fn (GLenum) callconv(.c) void;
pub const PFNGLDEPTHMASKPROC = ?*const fn (GLboolean) callconv(.c) void;
pub const PFNGLDEPTHRANGEFPROC = ?*const fn (GLfloat, GLfloat) callconv(.c) void;
pub const PFNGLDETACHSHADERPROC = ?*const fn (GLuint, GLuint) callconv(.c) void;
pub const PFNGLDISABLEPROC = ?*const fn (GLenum) callconv(.c) void;
pub const PFNGLDISABLEVERTEXATTRIBARRAYPROC = ?*const fn (GLuint) callconv(.c) void;
pub const PFNGLDRAWARRAYSPROC = ?*const fn (GLenum, GLint, GLsizei) callconv(.c) void;
pub const PFNGLDRAWELEMENTSPROC = ?*const fn (GLenum, GLsizei, GLenum, ?*const anyopaque) callconv(.c) void;
pub const PFNGLENABLEPROC = ?*const fn (GLenum) callconv(.c) void;
pub const PFNGLENABLEVERTEXATTRIBARRAYPROC = ?*const fn (GLuint) callconv(.c) void;
pub const PFNGLFINISHPROC = ?*const fn () callconv(.c) void;
pub const PFNGLFLUSHPROC = ?*const fn () callconv(.c) void;
pub const PFNGLFRAMEBUFFERRENDERBUFFERPROC = ?*const fn (GLenum, GLenum, GLenum, GLuint) callconv(.c) void;
pub const PFNGLFRAMEBUFFERTEXTURE2DPROC = ?*const fn (GLenum, GLenum, GLenum, GLuint, GLint) callconv(.c) void;
pub const PFNGLFRONTFACEPROC = ?*const fn (GLenum) callconv(.c) void;
pub const PFNGLGENBUFFERSPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.c) void;
pub const PFNGLGENERATEMIPMAPPROC = ?*const fn (GLenum) callconv(.c) void;
pub const PFNGLGENFRAMEBUFFERSPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.c) void;
pub const PFNGLGENRENDERBUFFERSPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.c) void;
pub const PFNGLGENTEXTURESPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.c) void;
pub const PFNGLGETACTIVEATTRIBPROC = ?*const fn (GLuint, GLuint, GLsizei, [*c]GLsizei, [*c]GLint, [*c]GLenum, [*c]GLchar) callconv(.c) void;
pub const PFNGLGETACTIVEUNIFORMPROC = ?*const fn (GLuint, GLuint, GLsizei, [*c]GLsizei, [*c]GLint, [*c]GLenum, [*c]GLchar) callconv(.c) void;
pub const PFNGLGETATTACHEDSHADERSPROC = ?*const fn (GLuint, GLsizei, [*c]GLsizei, [*c]GLuint) callconv(.c) void;
pub const PFNGLGETATTRIBLOCATIONPROC = ?*const fn (GLuint, [*c]const GLchar) callconv(.c) GLint;
pub const PFNGLGETBOOLEANVPROC = ?*const fn (GLenum, [*c]GLboolean) callconv(.c) void;
pub const PFNGLGETBUFFERPARAMETERIVPROC = ?*const fn (GLenum, GLenum, [*c]GLint) callconv(.c) void;
pub const PFNGLGETERRORPROC = ?*const fn () callconv(.c) GLenum;
pub const PFNGLGETFLOATVPROC = ?*const fn (GLenum, [*c]GLfloat) callconv(.c) void;
pub const PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC = ?*const fn (GLenum, GLenum, GLenum, [*c]GLint) callconv(.c) void;
pub const PFNGLGETINTEGERVPROC = ?*const fn (GLenum, [*c]GLint) callconv(.c) void;
pub const PFNGLGETPROGRAMIVPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.c) void;
pub const PFNGLGETPROGRAMINFOLOGPROC = ?*const fn (GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.c) void;
pub const PFNGLGETRENDERBUFFERPARAMETERIVPROC = ?*const fn (GLenum, GLenum, [*c]GLint) callconv(.c) void;
pub const PFNGLGETSHADERIVPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.c) void;
pub const PFNGLGETSHADERINFOLOGPROC = ?*const fn (GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.c) void;
pub const PFNGLGETSHADERPRECISIONFORMATPROC = ?*const fn (GLenum, GLenum, [*c]GLint, [*c]GLint) callconv(.c) void;
pub const PFNGLGETSHADERSOURCEPROC = ?*const fn (GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.c) void;
pub const PFNGLGETSTRINGPROC = ?*const fn (GLenum) callconv(.c) [*c]const GLubyte;
pub const PFNGLGETTEXPARAMETERFVPROC = ?*const fn (GLenum, GLenum, [*c]GLfloat) callconv(.c) void;
pub const PFNGLGETTEXPARAMETERIVPROC = ?*const fn (GLenum, GLenum, [*c]GLint) callconv(.c) void;
pub const PFNGLGETUNIFORMFVPROC = ?*const fn (GLuint, GLint, [*c]GLfloat) callconv(.c) void;
pub const PFNGLGETUNIFORMIVPROC = ?*const fn (GLuint, GLint, [*c]GLint) callconv(.c) void;
pub const PFNGLGETUNIFORMLOCATIONPROC = ?*const fn (GLuint, [*c]const GLchar) callconv(.c) GLint;
pub const PFNGLGETVERTEXATTRIBFVPROC = ?*const fn (GLuint, GLenum, [*c]GLfloat) callconv(.c) void;
pub const PFNGLGETVERTEXATTRIBIVPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.c) void;
pub const PFNGLGETVERTEXATTRIBPOINTERVPROC = ?*const fn (GLuint, GLenum, [*c]?*anyopaque) callconv(.c) void;
pub const PFNGLHINTPROC = ?*const fn (GLenum, GLenum) callconv(.c) void;
pub const PFNGLISBUFFERPROC = ?*const fn (GLuint) callconv(.c) GLboolean;
pub const PFNGLISENABLEDPROC = ?*const fn (GLenum) callconv(.c) GLboolean;
pub const PFNGLISFRAMEBUFFERPROC = ?*const fn (GLuint) callconv(.c) GLboolean;
pub const PFNGLISPROGRAMPROC = ?*const fn (GLuint) callconv(.c) GLboolean;
pub const PFNGLISRENDERBUFFERPROC = ?*const fn (GLuint) callconv(.c) GLboolean;
pub const PFNGLISSHADERPROC = ?*const fn (GLuint) callconv(.c) GLboolean;
pub const PFNGLISTEXTUREPROC = ?*const fn (GLuint) callconv(.c) GLboolean;
pub const PFNGLLINEWIDTHPROC = ?*const fn (GLfloat) callconv(.c) void;
pub const PFNGLLINKPROGRAMPROC = ?*const fn (GLuint) callconv(.c) void;
pub const PFNGLPIXELSTOREIPROC = ?*const fn (GLenum, GLint) callconv(.c) void;
pub const PFNGLPOLYGONOFFSETPROC = ?*const fn (GLfloat, GLfloat) callconv(.c) void;
pub const PFNGLREADPIXELSPROC = ?*const fn (GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, ?*anyopaque) callconv(.c) void;
pub const PFNGLRELEASESHADERCOMPILERPROC = ?*const fn () callconv(.c) void;
pub const PFNGLRENDERBUFFERSTORAGEPROC = ?*const fn (GLenum, GLenum, GLsizei, GLsizei) callconv(.c) void;
pub const PFNGLSAMPLECOVERAGEPROC = ?*const fn (GLfloat, GLboolean) callconv(.c) void;
pub const PFNGLSCISSORPROC = ?*const fn (GLint, GLint, GLsizei, GLsizei) callconv(.c) void;
pub const PFNGLSHADERBINARYPROC = ?*const fn (GLsizei, [*c]const GLuint, GLenum, ?*const anyopaque, GLsizei) callconv(.c) void;
pub const PFNGLSHADERSOURCEPROC = ?*const fn (GLuint, GLsizei, [*c]const [*c]const GLchar, [*c]const GLint) callconv(.c) void;
pub const PFNGLSTENCILFUNCPROC = ?*const fn (GLenum, GLint, GLuint) callconv(.c) void;
pub const PFNGLSTENCILFUNCSEPARATEPROC = ?*const fn (GLenum, GLenum, GLint, GLuint) callconv(.c) void;
pub const PFNGLSTENCILMASKPROC = ?*const fn (GLuint) callconv(.c) void;
pub const PFNGLSTENCILMASKSEPARATEPROC = ?*const fn (GLenum, GLuint) callconv(.c) void;
pub const PFNGLSTENCILOPPROC = ?*const fn (GLenum, GLenum, GLenum) callconv(.c) void;
pub const PFNGLSTENCILOPSEPARATEPROC = ?*const fn (GLenum, GLenum, GLenum, GLenum) callconv(.c) void;
pub const PFNGLTEXIMAGE2DPROC = ?*const fn (GLenum, GLint, GLint, GLsizei, GLsizei, GLint, GLenum, GLenum, ?*const anyopaque) callconv(.c) void;
pub const PFNGLTEXPARAMETERFPROC = ?*const fn (GLenum, GLenum, GLfloat) callconv(.c) void;
pub const PFNGLTEXPARAMETERFVPROC = ?*const fn (GLenum, GLenum, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLTEXPARAMETERIPROC = ?*const fn (GLenum, GLenum, GLint) callconv(.c) void;
pub const PFNGLTEXPARAMETERIVPROC = ?*const fn (GLenum, GLenum, [*c]const GLint) callconv(.c) void;
pub const PFNGLTEXSUBIMAGE2DPROC = ?*const fn (GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, ?*const anyopaque) callconv(.c) void;
pub const PFNGLUNIFORM1FPROC = ?*const fn (GLint, GLfloat) callconv(.c) void;
pub const PFNGLUNIFORM1FVPROC = ?*const fn (GLint, GLsizei, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLUNIFORM1IPROC = ?*const fn (GLint, GLint) callconv(.c) void;
pub const PFNGLUNIFORM1IVPROC = ?*const fn (GLint, GLsizei, [*c]const GLint) callconv(.c) void;
pub const PFNGLUNIFORM2FPROC = ?*const fn (GLint, GLfloat, GLfloat) callconv(.c) void;
pub const PFNGLUNIFORM2FVPROC = ?*const fn (GLint, GLsizei, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLUNIFORM2IPROC = ?*const fn (GLint, GLint, GLint) callconv(.c) void;
pub const PFNGLUNIFORM2IVPROC = ?*const fn (GLint, GLsizei, [*c]const GLint) callconv(.c) void;
pub const PFNGLUNIFORM3FPROC = ?*const fn (GLint, GLfloat, GLfloat, GLfloat) callconv(.c) void;
pub const PFNGLUNIFORM3FVPROC = ?*const fn (GLint, GLsizei, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLUNIFORM3IPROC = ?*const fn (GLint, GLint, GLint, GLint) callconv(.c) void;
pub const PFNGLUNIFORM3IVPROC = ?*const fn (GLint, GLsizei, [*c]const GLint) callconv(.c) void;
pub const PFNGLUNIFORM4FPROC = ?*const fn (GLint, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.c) void;
pub const PFNGLUNIFORM4FVPROC = ?*const fn (GLint, GLsizei, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLUNIFORM4IPROC = ?*const fn (GLint, GLint, GLint, GLint, GLint) callconv(.c) void;
pub const PFNGLUNIFORM4IVPROC = ?*const fn (GLint, GLsizei, [*c]const GLint) callconv(.c) void;
pub const PFNGLUNIFORMMATRIX2FVPROC = ?*const fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLUNIFORMMATRIX3FVPROC = ?*const fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLUNIFORMMATRIX4FVPROC = ?*const fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLUSEPROGRAMPROC = ?*const fn (GLuint) callconv(.c) void;
pub const PFNGLVALIDATEPROGRAMPROC = ?*const fn (GLuint) callconv(.c) void;
pub const PFNGLVERTEXATTRIB1FPROC = ?*const fn (GLuint, GLfloat) callconv(.c) void;
pub const PFNGLVERTEXATTRIB1FVPROC = ?*const fn (GLuint, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLVERTEXATTRIB2FPROC = ?*const fn (GLuint, GLfloat, GLfloat) callconv(.c) void;
pub const PFNGLVERTEXATTRIB2FVPROC = ?*const fn (GLuint, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLVERTEXATTRIB3FPROC = ?*const fn (GLuint, GLfloat, GLfloat, GLfloat) callconv(.c) void;
pub const PFNGLVERTEXATTRIB3FVPROC = ?*const fn (GLuint, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLVERTEXATTRIB4FPROC = ?*const fn (GLuint, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.c) void;
pub const PFNGLVERTEXATTRIB4FVPROC = ?*const fn (GLuint, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLVERTEXATTRIBPOINTERPROC = ?*const fn (GLuint, GLint, GLenum, GLboolean, GLsizei, ?*const anyopaque) callconv(.c) void;
pub const PFNGLVIEWPORTPROC = ?*const fn (GLint, GLint, GLsizei, GLsizei) callconv(.c) void;
pub extern fn glActiveTexture(texture: GLenum) void;
pub extern fn glAttachShader(program: GLuint, shader: GLuint) void;
pub extern fn glBindAttribLocation(program: GLuint, index: GLuint, name: [*c]const GLchar) void;
pub extern fn glBindBuffer(target: GLenum, buffer: GLuint) void;
pub extern fn glBindFramebuffer(target: GLenum, framebuffer: GLuint) void;
pub extern fn glBindRenderbuffer(target: GLenum, renderbuffer: GLuint) void;
pub extern fn glBindTexture(target: GLenum, texture: GLuint) void;
pub extern fn glBlendColor(red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) void;
pub extern fn glBlendEquation(mode: GLenum) void;
pub extern fn glBlendEquationSeparate(modeRGB: GLenum, modeAlpha: GLenum) void;
pub extern fn glBlendFunc(sfactor: GLenum, dfactor: GLenum) void;
pub extern fn glBlendFuncSeparate(sfactorRGB: GLenum, dfactorRGB: GLenum, sfactorAlpha: GLenum, dfactorAlpha: GLenum) void;
pub extern fn glBufferData(target: GLenum, size: GLsizeiptr, data: ?*const anyopaque, usage: GLenum) void;
pub extern fn glBufferSubData(target: GLenum, offset: GLintptr, size: GLsizeiptr, data: ?*const anyopaque) void;
pub extern fn glCheckFramebufferStatus(target: GLenum) GLenum;
pub extern fn glClear(mask: GLbitfield) void;
pub extern fn glClearColor(red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) void;
pub extern fn glClearDepthf(d: GLfloat) void;
pub extern fn glClearStencil(s: GLint) void;
pub extern fn glColorMask(red: GLboolean, green: GLboolean, blue: GLboolean, alpha: GLboolean) void;
pub extern fn glCompileShader(shader: GLuint) void;
pub extern fn glCompressedTexImage2D(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, border: GLint, imageSize: GLsizei, data: ?*const anyopaque) void;
pub extern fn glCompressedTexSubImage2D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, imageSize: GLsizei, data: ?*const anyopaque) void;
pub extern fn glCopyTexImage2D(target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei, border: GLint) void;
pub extern fn glCopyTexSubImage2D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) void;
pub extern fn glCreateProgram() GLuint;
pub extern fn glCreateShader(@"type": GLenum) GLuint;
pub extern fn glCullFace(mode: GLenum) void;
pub extern fn glDeleteBuffers(n: GLsizei, buffers: [*c]const GLuint) void;
pub extern fn glDeleteFramebuffers(n: GLsizei, framebuffers: [*c]const GLuint) void;
pub extern fn glDeleteProgram(program: GLuint) void;
pub extern fn glDeleteRenderbuffers(n: GLsizei, renderbuffers: [*c]const GLuint) void;
pub extern fn glDeleteShader(shader: GLuint) void;
pub extern fn glDeleteTextures(n: GLsizei, textures: [*c]const GLuint) void;
pub extern fn glDepthFunc(func: GLenum) void;
pub extern fn glDepthMask(flag: GLboolean) void;
pub extern fn glDepthRangef(n: GLfloat, f: GLfloat) void;
pub extern fn glDetachShader(program: GLuint, shader: GLuint) void;
pub extern fn glDisable(cap: GLenum) void;
pub extern fn glDisableVertexAttribArray(index: GLuint) void;
pub extern fn glDrawArrays(mode: GLenum, first: GLint, count: GLsizei) void;
pub extern fn glDrawElements(mode: GLenum, count: GLsizei, @"type": GLenum, indices: ?*const anyopaque) void;
pub extern fn glEnable(cap: GLenum) void;
pub extern fn glEnableVertexAttribArray(index: GLuint) void;
pub extern fn glFinish() void;
pub extern fn glFlush() void;
pub extern fn glFramebufferRenderbuffer(target: GLenum, attachment: GLenum, renderbuffertarget: GLenum, renderbuffer: GLuint) void;
pub extern fn glFramebufferTexture2D(target: GLenum, attachment: GLenum, textarget: GLenum, texture: GLuint, level: GLint) void;
pub extern fn glFrontFace(mode: GLenum) void;
pub extern fn glGenBuffers(n: GLsizei, buffers: [*c]GLuint) void;
pub extern fn glGenerateMipmap(target: GLenum) void;
pub extern fn glGenFramebuffers(n: GLsizei, framebuffers: [*c]GLuint) void;
pub extern fn glGenRenderbuffers(n: GLsizei, renderbuffers: [*c]GLuint) void;
pub extern fn glGenTextures(n: GLsizei, textures: [*c]GLuint) void;
pub extern fn glGetActiveAttrib(program: GLuint, index: GLuint, bufSize: GLsizei, length: [*c]GLsizei, size: [*c]GLint, @"type": [*c]GLenum, name: [*c]GLchar) void;
pub extern fn glGetActiveUniform(program: GLuint, index: GLuint, bufSize: GLsizei, length: [*c]GLsizei, size: [*c]GLint, @"type": [*c]GLenum, name: [*c]GLchar) void;
pub extern fn glGetAttachedShaders(program: GLuint, maxCount: GLsizei, count: [*c]GLsizei, shaders: [*c]GLuint) void;
pub extern fn glGetAttribLocation(program: GLuint, name: [*c]const GLchar) GLint;
pub extern fn glGetBooleanv(pname: GLenum, data: [*c]GLboolean) void;
pub extern fn glGetBufferParameteriv(target: GLenum, pname: GLenum, params: [*c]GLint) void;
pub extern fn glGetError() GLenum;
pub extern fn glGetFloatv(pname: GLenum, data: [*c]GLfloat) void;
pub extern fn glGetFramebufferAttachmentParameteriv(target: GLenum, attachment: GLenum, pname: GLenum, params: [*c]GLint) void;
pub extern fn glGetIntegerv(pname: GLenum, data: [*c]GLint) void;
pub extern fn glGetProgramiv(program: GLuint, pname: GLenum, params: [*c]GLint) void;
pub extern fn glGetProgramInfoLog(program: GLuint, bufSize: GLsizei, length: [*c]GLsizei, infoLog: [*c]GLchar) void;
pub extern fn glGetRenderbufferParameteriv(target: GLenum, pname: GLenum, params: [*c]GLint) void;
pub extern fn glGetShaderiv(shader: GLuint, pname: GLenum, params: [*c]GLint) void;
pub extern fn glGetShaderInfoLog(shader: GLuint, bufSize: GLsizei, length: [*c]GLsizei, infoLog: [*c]GLchar) void;
pub extern fn glGetShaderPrecisionFormat(shadertype: GLenum, precisiontype: GLenum, range: [*c]GLint, precision: [*c]GLint) void;
pub extern fn glGetShaderSource(shader: GLuint, bufSize: GLsizei, length: [*c]GLsizei, source: [*c]GLchar) void;
pub extern fn glGetString(name: GLenum) [*c]const GLubyte;
pub extern fn glGetTexParameterfv(target: GLenum, pname: GLenum, params: [*c]GLfloat) void;
pub extern fn glGetTexParameteriv(target: GLenum, pname: GLenum, params: [*c]GLint) void;
pub extern fn glGetUniformfv(program: GLuint, location: GLint, params: [*c]GLfloat) void;
pub extern fn glGetUniformiv(program: GLuint, location: GLint, params: [*c]GLint) void;
pub extern fn glGetUniformLocation(program: GLuint, name: [*c]const GLchar) GLint;
pub extern fn glGetVertexAttribfv(index: GLuint, pname: GLenum, params: [*c]GLfloat) void;
pub extern fn glGetVertexAttribiv(index: GLuint, pname: GLenum, params: [*c]GLint) void;
pub extern fn glGetVertexAttribPointerv(index: GLuint, pname: GLenum, pointer: [*c]?*anyopaque) void;
pub extern fn glHint(target: GLenum, mode: GLenum) void;
pub extern fn glIsBuffer(buffer: GLuint) GLboolean;
pub extern fn glIsEnabled(cap: GLenum) GLboolean;
pub extern fn glIsFramebuffer(framebuffer: GLuint) GLboolean;
pub extern fn glIsProgram(program: GLuint) GLboolean;
pub extern fn glIsRenderbuffer(renderbuffer: GLuint) GLboolean;
pub extern fn glIsShader(shader: GLuint) GLboolean;
pub extern fn glIsTexture(texture: GLuint) GLboolean;
pub extern fn glLineWidth(width: GLfloat) void;
pub extern fn glLinkProgram(program: GLuint) void;
pub extern fn glPixelStorei(pname: GLenum, param: GLint) void;
pub extern fn glPolygonOffset(factor: GLfloat, units: GLfloat) void;
pub extern fn glReadPixels(x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, @"type": GLenum, pixels: ?*anyopaque) void;
pub extern fn glReleaseShaderCompiler() void;
pub extern fn glRenderbufferStorage(target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei) void;
pub extern fn glSampleCoverage(value: GLfloat, invert: GLboolean) void;
pub extern fn glScissor(x: GLint, y: GLint, width: GLsizei, height: GLsizei) void;
pub extern fn glShaderBinary(count: GLsizei, shaders: [*c]const GLuint, binaryFormat: GLenum, binary: ?*const anyopaque, length: GLsizei) void;
pub extern fn glShaderSource(shader: GLuint, count: GLsizei, string: [*c]const [*c]const GLchar, length: [*c]const GLint) void;
pub extern fn glStencilFunc(func: GLenum, ref: GLint, mask: GLuint) void;
pub extern fn glStencilFuncSeparate(face: GLenum, func: GLenum, ref: GLint, mask: GLuint) void;
pub extern fn glStencilMask(mask: GLuint) void;
pub extern fn glStencilMaskSeparate(face: GLenum, mask: GLuint) void;
pub extern fn glStencilOp(fail: GLenum, zfail: GLenum, zpass: GLenum) void;
pub extern fn glStencilOpSeparate(face: GLenum, sfail: GLenum, dpfail: GLenum, dppass: GLenum) void;
pub extern fn glTexImage2D(target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, border: GLint, format: GLenum, @"type": GLenum, pixels: ?*const anyopaque) void;
pub extern fn glTexParameterf(target: GLenum, pname: GLenum, param: GLfloat) void;
pub extern fn glTexParameterfv(target: GLenum, pname: GLenum, params: [*c]const GLfloat) void;
pub extern fn glTexParameteri(target: GLenum, pname: GLenum, param: GLint) void;
pub extern fn glTexParameteriv(target: GLenum, pname: GLenum, params: [*c]const GLint) void;
pub extern fn glTexSubImage2D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, @"type": GLenum, pixels: ?*const anyopaque) void;
pub extern fn glUniform1f(location: GLint, v0: GLfloat) void;
pub extern fn glUniform1fv(location: GLint, count: GLsizei, value: [*c]const GLfloat) void;
pub extern fn glUniform1i(location: GLint, v0: GLint) void;
pub extern fn glUniform1iv(location: GLint, count: GLsizei, value: [*c]const GLint) void;
pub extern fn glUniform2f(location: GLint, v0: GLfloat, v1: GLfloat) void;
pub extern fn glUniform2fv(location: GLint, count: GLsizei, value: [*c]const GLfloat) void;
pub extern fn glUniform2i(location: GLint, v0: GLint, v1: GLint) void;
pub extern fn glUniform2iv(location: GLint, count: GLsizei, value: [*c]const GLint) void;
pub extern fn glUniform3f(location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat) void;
pub extern fn glUniform3fv(location: GLint, count: GLsizei, value: [*c]const GLfloat) void;
pub extern fn glUniform3i(location: GLint, v0: GLint, v1: GLint, v2: GLint) void;
pub extern fn glUniform3iv(location: GLint, count: GLsizei, value: [*c]const GLint) void;
pub extern fn glUniform4f(location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat, v3: GLfloat) void;
pub extern fn glUniform4fv(location: GLint, count: GLsizei, value: [*c]const GLfloat) void;
pub extern fn glUniform4i(location: GLint, v0: GLint, v1: GLint, v2: GLint, v3: GLint) void;
pub extern fn glUniform4iv(location: GLint, count: GLsizei, value: [*c]const GLint) void;
pub extern fn glUniformMatrix2fv(location: GLint, count: GLsizei, transpose: GLboolean, value: [*c]const GLfloat) void;
pub extern fn glUniformMatrix3fv(location: GLint, count: GLsizei, transpose: GLboolean, value: [*c]const GLfloat) void;
pub extern fn glUniformMatrix4fv(location: GLint, count: GLsizei, transpose: GLboolean, value: [*c]const GLfloat) void;
pub extern fn glUseProgram(program: GLuint) void;
pub extern fn glValidateProgram(program: GLuint) void;
pub extern fn glVertexAttrib1f(index: GLuint, x: GLfloat) void;
pub extern fn glVertexAttrib1fv(index: GLuint, v: [*c]const GLfloat) void;
pub extern fn glVertexAttrib2f(index: GLuint, x: GLfloat, y: GLfloat) void;
pub extern fn glVertexAttrib2fv(index: GLuint, v: [*c]const GLfloat) void;
pub extern fn glVertexAttrib3f(index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat) void;
pub extern fn glVertexAttrib3fv(index: GLuint, v: [*c]const GLfloat) void;
pub extern fn glVertexAttrib4f(index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) void;
pub extern fn glVertexAttrib4fv(index: GLuint, v: [*c]const GLfloat) void;
pub extern fn glVertexAttribPointer(index: GLuint, size: GLint, @"type": GLenum, normalized: GLboolean, stride: GLsizei, pointer: ?*const anyopaque) void;
pub extern fn glViewport(x: GLint, y: GLint, width: GLsizei, height: GLsizei) void;
pub const PFNGLBLENDBARRIERKHRPROC = ?*const fn () callconv(.c) void;
pub const GLDEBUGPROCKHR = ?*const fn (GLenum, GLenum, GLuint, GLenum, GLsizei, [*c]const GLchar, ?*const anyopaque) callconv(.c) void;
pub const PFNGLDEBUGMESSAGECONTROLKHRPROC = ?*const fn (GLenum, GLenum, GLenum, GLsizei, [*c]const GLuint, GLboolean) callconv(.c) void;
pub const PFNGLDEBUGMESSAGEINSERTKHRPROC = ?*const fn (GLenum, GLenum, GLuint, GLenum, GLsizei, [*c]const GLchar) callconv(.c) void;
pub const PFNGLDEBUGMESSAGECALLBACKKHRPROC = ?*const fn (GLDEBUGPROCKHR, ?*const anyopaque) callconv(.c) void;
pub const PFNGLGETDEBUGMESSAGELOGKHRPROC = ?*const fn (GLuint, GLsizei, [*c]GLenum, [*c]GLenum, [*c]GLuint, [*c]GLenum, [*c]GLsizei, [*c]GLchar) callconv(.c) GLuint;
pub const PFNGLPUSHDEBUGGROUPKHRPROC = ?*const fn (GLenum, GLuint, GLsizei, [*c]const GLchar) callconv(.c) void;
pub const PFNGLPOPDEBUGGROUPKHRPROC = ?*const fn () callconv(.c) void;
pub const PFNGLOBJECTLABELKHRPROC = ?*const fn (GLenum, GLuint, GLsizei, [*c]const GLchar) callconv(.c) void;
pub const PFNGLGETOBJECTLABELKHRPROC = ?*const fn (GLenum, GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.c) void;
pub const PFNGLOBJECTPTRLABELKHRPROC = ?*const fn (?*const anyopaque, GLsizei, [*c]const GLchar) callconv(.c) void;
pub const PFNGLGETOBJECTPTRLABELKHRPROC = ?*const fn (?*const anyopaque, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.c) void;
pub const PFNGLGETPOINTERVKHRPROC = ?*const fn (GLenum, [*c]?*anyopaque) callconv(.c) void;
pub const PFNGLMAXSHADERCOMPILERTHREADSKHRPROC = ?*const fn (GLuint) callconv(.c) void;
pub const PFNGLGETGRAPHICSRESETSTATUSKHRPROC = ?*const fn () callconv(.c) GLenum;
pub const PFNGLREADNPIXELSKHRPROC = ?*const fn (GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, GLsizei, ?*anyopaque) callconv(.c) void;
pub const PFNGLGETNUNIFORMFVKHRPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]GLfloat) callconv(.c) void;
pub const PFNGLGETNUNIFORMIVKHRPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]GLint) callconv(.c) void;
pub const PFNGLGETNUNIFORMUIVKHRPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]GLuint) callconv(.c) void;
pub const GLeglImageOES = ?*anyopaque;
pub const PFNGLEGLIMAGETARGETTEXTURE2DOESPROC = ?*const fn (GLenum, GLeglImageOES) callconv(.c) void;
pub const PFNGLEGLIMAGETARGETRENDERBUFFERSTORAGEOESPROC = ?*const fn (GLenum, GLeglImageOES) callconv(.c) void;
pub const PFNGLCOPYIMAGESUBDATAOESPROC = ?*const fn (GLuint, GLenum, GLint, GLint, GLint, GLint, GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei) callconv(.c) void;
pub const PFNGLENABLEIOESPROC = ?*const fn (GLenum, GLuint) callconv(.c) void;
pub const PFNGLDISABLEIOESPROC = ?*const fn (GLenum, GLuint) callconv(.c) void;
pub const PFNGLBLENDEQUATIONIOESPROC = ?*const fn (GLuint, GLenum) callconv(.c) void;
pub const PFNGLBLENDEQUATIONSEPARATEIOESPROC = ?*const fn (GLuint, GLenum, GLenum) callconv(.c) void;
pub const PFNGLBLENDFUNCIOESPROC = ?*const fn (GLuint, GLenum, GLenum) callconv(.c) void;
pub const PFNGLBLENDFUNCSEPARATEIOESPROC = ?*const fn (GLuint, GLenum, GLenum, GLenum, GLenum) callconv(.c) void;
pub const PFNGLCOLORMASKIOESPROC = ?*const fn (GLuint, GLboolean, GLboolean, GLboolean, GLboolean) callconv(.c) void;
pub const PFNGLISENABLEDIOESPROC = ?*const fn (GLenum, GLuint) callconv(.c) GLboolean;
pub const PFNGLDRAWELEMENTSBASEVERTEXOESPROC = ?*const fn (GLenum, GLsizei, GLenum, ?*const anyopaque, GLint) callconv(.c) void;
pub const PFNGLDRAWRANGEELEMENTSBASEVERTEXOESPROC = ?*const fn (GLenum, GLuint, GLuint, GLsizei, GLenum, ?*const anyopaque, GLint) callconv(.c) void;
pub const PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXOESPROC = ?*const fn (GLenum, GLsizei, GLenum, ?*const anyopaque, GLsizei, GLint) callconv(.c) void;
pub const PFNGLMULTIDRAWELEMENTSBASEVERTEXEXTPROC = ?*const fn (GLenum, [*c]const GLsizei, GLenum, [*c]const ?*const anyopaque, GLsizei, [*c]const GLint) callconv(.c) void;
pub const PFNGLFRAMEBUFFERTEXTUREOESPROC = ?*const fn (GLenum, GLenum, GLuint, GLint) callconv(.c) void;
pub const PFNGLGETPROGRAMBINARYOESPROC = ?*const fn (GLuint, GLsizei, [*c]GLsizei, [*c]GLenum, ?*anyopaque) callconv(.c) void;
pub const PFNGLPROGRAMBINARYOESPROC = ?*const fn (GLuint, GLenum, ?*const anyopaque, GLint) callconv(.c) void;
pub const PFNGLMAPBUFFEROESPROC = ?*const fn (GLenum, GLenum) callconv(.c) ?*anyopaque;
pub const PFNGLUNMAPBUFFEROESPROC = ?*const fn (GLenum) callconv(.c) GLboolean;
pub const PFNGLGETBUFFERPOINTERVOESPROC = ?*const fn (GLenum, GLenum, [*c]?*anyopaque) callconv(.c) void;
pub const PFNGLPRIMITIVEBOUNDINGBOXOESPROC = ?*const fn (GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.c) void;
pub const PFNGLMINSAMPLESHADINGOESPROC = ?*const fn (GLfloat) callconv(.c) void;
pub const PFNGLPATCHPARAMETERIOESPROC = ?*const fn (GLenum, GLint) callconv(.c) void;
pub const PFNGLTEXIMAGE3DOESPROC = ?*const fn (GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, ?*const anyopaque) callconv(.c) void;
pub const PFNGLTEXSUBIMAGE3DOESPROC = ?*const fn (GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, ?*const anyopaque) callconv(.c) void;
pub const PFNGLCOPYTEXSUBIMAGE3DOESPROC = ?*const fn (GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei) callconv(.c) void;
pub const PFNGLCOMPRESSEDTEXIMAGE3DOESPROC = ?*const fn (GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLsizei, ?*const anyopaque) callconv(.c) void;
pub const PFNGLCOMPRESSEDTEXSUBIMAGE3DOESPROC = ?*const fn (GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, ?*const anyopaque) callconv(.c) void;
pub const PFNGLFRAMEBUFFERTEXTURE3DOESPROC = ?*const fn (GLenum, GLenum, GLenum, GLuint, GLint, GLint) callconv(.c) void;
pub const PFNGLTEXPARAMETERIIVOESPROC = ?*const fn (GLenum, GLenum, [*c]const GLint) callconv(.c) void;
pub const PFNGLTEXPARAMETERIUIVOESPROC = ?*const fn (GLenum, GLenum, [*c]const GLuint) callconv(.c) void;
pub const PFNGLGETTEXPARAMETERIIVOESPROC = ?*const fn (GLenum, GLenum, [*c]GLint) callconv(.c) void;
pub const PFNGLGETTEXPARAMETERIUIVOESPROC = ?*const fn (GLenum, GLenum, [*c]GLuint) callconv(.c) void;
pub const PFNGLSAMPLERPARAMETERIIVOESPROC = ?*const fn (GLuint, GLenum, [*c]const GLint) callconv(.c) void;
pub const PFNGLSAMPLERPARAMETERIUIVOESPROC = ?*const fn (GLuint, GLenum, [*c]const GLuint) callconv(.c) void;
pub const PFNGLGETSAMPLERPARAMETERIIVOESPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.c) void;
pub const PFNGLGETSAMPLERPARAMETERIUIVOESPROC = ?*const fn (GLuint, GLenum, [*c]GLuint) callconv(.c) void;
pub const PFNGLTEXBUFFEROESPROC = ?*const fn (GLenum, GLenum, GLuint) callconv(.c) void;
pub const PFNGLTEXBUFFERRANGEOESPROC = ?*const fn (GLenum, GLenum, GLuint, GLintptr, GLsizeiptr) callconv(.c) void;
pub const PFNGLTEXSTORAGE3DMULTISAMPLEOESPROC = ?*const fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean) callconv(.c) void;
pub const PFNGLTEXTUREVIEWOESPROC = ?*const fn (GLuint, GLenum, GLuint, GLenum, GLuint, GLuint, GLuint, GLuint) callconv(.c) void;
pub const PFNGLBINDVERTEXARRAYOESPROC = ?*const fn (GLuint) callconv(.c) void;
pub const PFNGLDELETEVERTEXARRAYSOESPROC = ?*const fn (GLsizei, [*c]const GLuint) callconv(.c) void;
pub const PFNGLGENVERTEXARRAYSOESPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.c) void;
pub const PFNGLISVERTEXARRAYOESPROC = ?*const fn (GLuint) callconv(.c) GLboolean;
pub const PFNGLVIEWPORTARRAYVOESPROC = ?*const fn (GLuint, GLsizei, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLVIEWPORTINDEXEDFOESPROC = ?*const fn (GLuint, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.c) void;
pub const PFNGLVIEWPORTINDEXEDFVOESPROC = ?*const fn (GLuint, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLSCISSORARRAYVOESPROC = ?*const fn (GLuint, GLsizei, [*c]const GLint) callconv(.c) void;
pub const PFNGLSCISSORINDEXEDOESPROC = ?*const fn (GLuint, GLint, GLint, GLsizei, GLsizei) callconv(.c) void;
pub const PFNGLSCISSORINDEXEDVOESPROC = ?*const fn (GLuint, [*c]const GLint) callconv(.c) void;
pub const PFNGLDEPTHRANGEARRAYFVOESPROC = ?*const fn (GLuint, GLsizei, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLDEPTHRANGEINDEXEDFOESPROC = ?*const fn (GLuint, GLfloat, GLfloat) callconv(.c) void;
pub const PFNGLGETFLOATI_VOESPROC = ?*const fn (GLenum, GLuint, [*c]GLfloat) callconv(.c) void;
pub const PFNGLRENDERBUFFERSTORAGEMULTISAMPLEADVANCEDAMDPROC = ?*const fn (GLenum, GLsizei, GLsizei, GLenum, GLsizei, GLsizei) callconv(.c) void;
pub const PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEADVANCEDAMDPROC = ?*const fn (GLuint, GLsizei, GLsizei, GLenum, GLsizei, GLsizei) callconv(.c) void;
pub const PFNGLGETPERFMONITORGROUPSAMDPROC = ?*const fn ([*c]GLint, GLsizei, [*c]GLuint) callconv(.c) void;
pub const PFNGLGETPERFMONITORCOUNTERSAMDPROC = ?*const fn (GLuint, [*c]GLint, [*c]GLint, GLsizei, [*c]GLuint) callconv(.c) void;
pub const PFNGLGETPERFMONITORGROUPSTRINGAMDPROC = ?*const fn (GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.c) void;
pub const PFNGLGETPERFMONITORCOUNTERSTRINGAMDPROC = ?*const fn (GLuint, GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.c) void;
pub const PFNGLGETPERFMONITORCOUNTERINFOAMDPROC = ?*const fn (GLuint, GLuint, GLenum, ?*anyopaque) callconv(.c) void;
pub const PFNGLGENPERFMONITORSAMDPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.c) void;
pub const PFNGLDELETEPERFMONITORSAMDPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.c) void;
pub const PFNGLSELECTPERFMONITORCOUNTERSAMDPROC = ?*const fn (GLuint, GLboolean, GLuint, GLint, [*c]GLuint) callconv(.c) void;
pub const PFNGLBEGINPERFMONITORAMDPROC = ?*const fn (GLuint) callconv(.c) void;
pub const PFNGLENDPERFMONITORAMDPROC = ?*const fn (GLuint) callconv(.c) void;
pub const PFNGLGETPERFMONITORCOUNTERDATAAMDPROC = ?*const fn (GLuint, GLenum, GLsizei, [*c]GLuint, [*c]GLint) callconv(.c) void;
pub const PFNGLBLITFRAMEBUFFERANGLEPROC = ?*const fn (GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum) callconv(.c) void;
pub const PFNGLRENDERBUFFERSTORAGEMULTISAMPLEANGLEPROC = ?*const fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei) callconv(.c) void;
pub const PFNGLDRAWARRAYSINSTANCEDANGLEPROC = ?*const fn (GLenum, GLint, GLsizei, GLsizei) callconv(.c) void;
pub const PFNGLDRAWELEMENTSINSTANCEDANGLEPROC = ?*const fn (GLenum, GLsizei, GLenum, ?*const anyopaque, GLsizei) callconv(.c) void;
pub const PFNGLVERTEXATTRIBDIVISORANGLEPROC = ?*const fn (GLuint, GLuint) callconv(.c) void;
pub const PFNGLGETTRANSLATEDSHADERSOURCEANGLEPROC = ?*const fn (GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.c) void;
pub const PFNGLCOPYTEXTURELEVELSAPPLEPROC = ?*const fn (GLuint, GLuint, GLint, GLsizei) callconv(.c) void;
pub const PFNGLRENDERBUFFERSTORAGEMULTISAMPLEAPPLEPROC = ?*const fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei) callconv(.c) void;
pub const PFNGLRESOLVEMULTISAMPLEFRAMEBUFFERAPPLEPROC = ?*const fn () callconv(.c) void;
pub const PFNGLFENCESYNCAPPLEPROC = ?*const fn (GLenum, GLbitfield) callconv(.c) GLsync;
pub const PFNGLISSYNCAPPLEPROC = ?*const fn (GLsync) callconv(.c) GLboolean;
pub const PFNGLDELETESYNCAPPLEPROC = ?*const fn (GLsync) callconv(.c) void;
pub const PFNGLCLIENTWAITSYNCAPPLEPROC = ?*const fn (GLsync, GLbitfield, GLuint64) callconv(.c) GLenum;
pub const PFNGLWAITSYNCAPPLEPROC = ?*const fn (GLsync, GLbitfield, GLuint64) callconv(.c) void;
pub const PFNGLGETINTEGER64VAPPLEPROC = ?*const fn (GLenum, [*c]GLint64) callconv(.c) void;
pub const PFNGLGETSYNCIVAPPLEPROC = ?*const fn (GLsync, GLenum, GLsizei, [*c]GLsizei, [*c]GLint) callconv(.c) void;
pub const PFNGLEGLIMAGETARGETTEXSTORAGEEXTPROC = ?*const fn (GLenum, GLeglImageOES, [*c]const GLint) callconv(.c) void;
pub const PFNGLEGLIMAGETARGETTEXTURESTORAGEEXTPROC = ?*const fn (GLuint, GLeglImageOES, [*c]const GLint) callconv(.c) void;
pub const PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEEXTPROC = ?*const fn (GLenum, GLint, GLsizei, GLsizei, GLuint) callconv(.c) void;
pub const PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEEXTPROC = ?*const fn (GLenum, GLsizei, GLenum, ?*const anyopaque, GLsizei, GLuint) callconv(.c) void;
pub const PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEEXTPROC = ?*const fn (GLenum, GLsizei, GLenum, ?*const anyopaque, GLsizei, GLint, GLuint) callconv(.c) void;
pub const PFNGLBINDFRAGDATALOCATIONINDEXEDEXTPROC = ?*const fn (GLuint, GLuint, GLuint, [*c]const GLchar) callconv(.c) void;
pub const PFNGLBINDFRAGDATALOCATIONEXTPROC = ?*const fn (GLuint, GLuint, [*c]const GLchar) callconv(.c) void;
pub const PFNGLGETPROGRAMRESOURCELOCATIONINDEXEXTPROC = ?*const fn (GLuint, GLenum, [*c]const GLchar) callconv(.c) GLint;
pub const PFNGLGETFRAGDATAINDEXEXTPROC = ?*const fn (GLuint, [*c]const GLchar) callconv(.c) GLint;
pub const PFNGLBUFFERSTORAGEEXTPROC = ?*const fn (GLenum, GLsizeiptr, ?*const anyopaque, GLbitfield) callconv(.c) void;
pub const PFNGLCLEARTEXIMAGEEXTPROC = ?*const fn (GLuint, GLint, GLenum, GLenum, ?*const anyopaque) callconv(.c) void;
pub const PFNGLCLEARTEXSUBIMAGEEXTPROC = ?*const fn (GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, ?*const anyopaque) callconv(.c) void;
pub const PFNGLCLIPCONTROLEXTPROC = ?*const fn (GLenum, GLenum) callconv(.c) void;
pub const PFNGLCOPYIMAGESUBDATAEXTPROC = ?*const fn (GLuint, GLenum, GLint, GLint, GLint, GLint, GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei) callconv(.c) void;
pub const PFNGLLABELOBJECTEXTPROC = ?*const fn (GLenum, GLuint, GLsizei, [*c]const GLchar) callconv(.c) void;
pub const PFNGLGETOBJECTLABELEXTPROC = ?*const fn (GLenum, GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.c) void;
pub const PFNGLINSERTEVENTMARKEREXTPROC = ?*const fn (GLsizei, [*c]const GLchar) callconv(.c) void;
pub const PFNGLPUSHGROUPMARKEREXTPROC = ?*const fn (GLsizei, [*c]const GLchar) callconv(.c) void;
pub const PFNGLPOPGROUPMARKEREXTPROC = ?*const fn () callconv(.c) void;
pub const PFNGLDISCARDFRAMEBUFFEREXTPROC = ?*const fn (GLenum, GLsizei, [*c]const GLenum) callconv(.c) void;
pub const PFNGLGENQUERIESEXTPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.c) void;
pub const PFNGLDELETEQUERIESEXTPROC = ?*const fn (GLsizei, [*c]const GLuint) callconv(.c) void;
pub const PFNGLISQUERYEXTPROC = ?*const fn (GLuint) callconv(.c) GLboolean;
pub const PFNGLBEGINQUERYEXTPROC = ?*const fn (GLenum, GLuint) callconv(.c) void;
pub const PFNGLENDQUERYEXTPROC = ?*const fn (GLenum) callconv(.c) void;
pub const PFNGLQUERYCOUNTEREXTPROC = ?*const fn (GLuint, GLenum) callconv(.c) void;
pub const PFNGLGETQUERYIVEXTPROC = ?*const fn (GLenum, GLenum, [*c]GLint) callconv(.c) void;
pub const PFNGLGETQUERYOBJECTIVEXTPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.c) void;
pub const PFNGLGETQUERYOBJECTUIVEXTPROC = ?*const fn (GLuint, GLenum, [*c]GLuint) callconv(.c) void;
pub const PFNGLGETQUERYOBJECTI64VEXTPROC = ?*const fn (GLuint, GLenum, [*c]GLint64) callconv(.c) void;
pub const PFNGLGETQUERYOBJECTUI64VEXTPROC = ?*const fn (GLuint, GLenum, [*c]GLuint64) callconv(.c) void;
pub const PFNGLGETINTEGER64VEXTPROC = ?*const fn (GLenum, [*c]GLint64) callconv(.c) void;
pub const PFNGLDRAWBUFFERSEXTPROC = ?*const fn (GLsizei, [*c]const GLenum) callconv(.c) void;
pub const PFNGLENABLEIEXTPROC = ?*const fn (GLenum, GLuint) callconv(.c) void;
pub const PFNGLDISABLEIEXTPROC = ?*const fn (GLenum, GLuint) callconv(.c) void;
pub const PFNGLBLENDEQUATIONIEXTPROC = ?*const fn (GLuint, GLenum) callconv(.c) void;
pub const PFNGLBLENDEQUATIONSEPARATEIEXTPROC = ?*const fn (GLuint, GLenum, GLenum) callconv(.c) void;
pub const PFNGLBLENDFUNCIEXTPROC = ?*const fn (GLuint, GLenum, GLenum) callconv(.c) void;
pub const PFNGLBLENDFUNCSEPARATEIEXTPROC = ?*const fn (GLuint, GLenum, GLenum, GLenum, GLenum) callconv(.c) void;
pub const PFNGLCOLORMASKIEXTPROC = ?*const fn (GLuint, GLboolean, GLboolean, GLboolean, GLboolean) callconv(.c) void;
pub const PFNGLISENABLEDIEXTPROC = ?*const fn (GLenum, GLuint) callconv(.c) GLboolean;
pub const PFNGLDRAWELEMENTSBASEVERTEXEXTPROC = ?*const fn (GLenum, GLsizei, GLenum, ?*const anyopaque, GLint) callconv(.c) void;
pub const PFNGLDRAWRANGEELEMENTSBASEVERTEXEXTPROC = ?*const fn (GLenum, GLuint, GLuint, GLsizei, GLenum, ?*const anyopaque, GLint) callconv(.c) void;
pub const PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXEXTPROC = ?*const fn (GLenum, GLsizei, GLenum, ?*const anyopaque, GLsizei, GLint) callconv(.c) void;
pub const PFNGLDRAWARRAYSINSTANCEDEXTPROC = ?*const fn (GLenum, GLint, GLsizei, GLsizei) callconv(.c) void;
pub const PFNGLDRAWELEMENTSINSTANCEDEXTPROC = ?*const fn (GLenum, GLsizei, GLenum, ?*const anyopaque, GLsizei) callconv(.c) void;
pub const PFNGLDRAWTRANSFORMFEEDBACKEXTPROC = ?*const fn (GLenum, GLuint) callconv(.c) void;
pub const PFNGLDRAWTRANSFORMFEEDBACKINSTANCEDEXTPROC = ?*const fn (GLenum, GLuint, GLsizei) callconv(.c) void;
pub const GLeglClientBufferEXT = ?*anyopaque;
pub const PFNGLBUFFERSTORAGEEXTERNALEXTPROC = ?*const fn (GLenum, GLintptr, GLsizeiptr, GLeglClientBufferEXT, GLbitfield) callconv(.c) void;
pub const PFNGLNAMEDBUFFERSTORAGEEXTERNALEXTPROC = ?*const fn (GLuint, GLintptr, GLsizeiptr, GLeglClientBufferEXT, GLbitfield) callconv(.c) void;
pub const PFNGLGETFRAGMENTSHADINGRATESEXTPROC = ?*const fn (GLsizei, GLsizei, [*c]GLsizei, [*c]GLenum) callconv(.c) void;
pub const PFNGLSHADINGRATEEXTPROC = ?*const fn (GLenum) callconv(.c) void;
pub const PFNGLSHADINGRATECOMBINEROPSEXTPROC = ?*const fn (GLenum, GLenum) callconv(.c) void;
pub const PFNGLFRAMEBUFFERSHADINGRATEEXTPROC = ?*const fn (GLenum, GLenum, GLuint, GLint, GLsizei, GLsizei, GLsizei) callconv(.c) void;
pub const PFNGLFRAMEBUFFERTEXTUREEXTPROC = ?*const fn (GLenum, GLenum, GLuint, GLint) callconv(.c) void;
pub const PFNGLVERTEXATTRIBDIVISOREXTPROC = ?*const fn (GLuint, GLuint) callconv(.c) void;
pub const PFNGLMAPBUFFERRANGEEXTPROC = ?*const fn (GLenum, GLintptr, GLsizeiptr, GLbitfield) callconv(.c) ?*anyopaque;
pub const PFNGLFLUSHMAPPEDBUFFERRANGEEXTPROC = ?*const fn (GLenum, GLintptr, GLsizeiptr) callconv(.c) void;
pub const PFNGLGETUNSIGNEDBYTEVEXTPROC = ?*const fn (GLenum, [*c]GLubyte) callconv(.c) void;
pub const PFNGLGETUNSIGNEDBYTEI_VEXTPROC = ?*const fn (GLenum, GLuint, [*c]GLubyte) callconv(.c) void;
pub const PFNGLDELETEMEMORYOBJECTSEXTPROC = ?*const fn (GLsizei, [*c]const GLuint) callconv(.c) void;
pub const PFNGLISMEMORYOBJECTEXTPROC = ?*const fn (GLuint) callconv(.c) GLboolean;
pub const PFNGLCREATEMEMORYOBJECTSEXTPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.c) void;
pub const PFNGLMEMORYOBJECTPARAMETERIVEXTPROC = ?*const fn (GLuint, GLenum, [*c]const GLint) callconv(.c) void;
pub const PFNGLGETMEMORYOBJECTPARAMETERIVEXTPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.c) void;
pub const PFNGLTEXSTORAGEMEM2DEXTPROC = ?*const fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLuint, GLuint64) callconv(.c) void;
pub const PFNGLTEXSTORAGEMEM2DMULTISAMPLEEXTPROC = ?*const fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLboolean, GLuint, GLuint64) callconv(.c) void;
pub const PFNGLTEXSTORAGEMEM3DEXTPROC = ?*const fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLuint, GLuint64) callconv(.c) void;
pub const PFNGLTEXSTORAGEMEM3DMULTISAMPLEEXTPROC = ?*const fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean, GLuint, GLuint64) callconv(.c) void;
pub const PFNGLBUFFERSTORAGEMEMEXTPROC = ?*const fn (GLenum, GLsizeiptr, GLuint, GLuint64) callconv(.c) void;
pub const PFNGLTEXTURESTORAGEMEM2DEXTPROC = ?*const fn (GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLuint, GLuint64) callconv(.c) void;
pub const PFNGLTEXTURESTORAGEMEM2DMULTISAMPLEEXTPROC = ?*const fn (GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLboolean, GLuint, GLuint64) callconv(.c) void;
pub const PFNGLTEXTURESTORAGEMEM3DEXTPROC = ?*const fn (GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLuint, GLuint64) callconv(.c) void;
pub const PFNGLTEXTURESTORAGEMEM3DMULTISAMPLEEXTPROC = ?*const fn (GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean, GLuint, GLuint64) callconv(.c) void;
pub const PFNGLNAMEDBUFFERSTORAGEMEMEXTPROC = ?*const fn (GLuint, GLsizeiptr, GLuint, GLuint64) callconv(.c) void;
pub const PFNGLIMPORTMEMORYFDEXTPROC = ?*const fn (GLuint, GLuint64, GLenum, GLint) callconv(.c) void;
pub const PFNGLIMPORTMEMORYWIN32HANDLEEXTPROC = ?*const fn (GLuint, GLuint64, GLenum, ?*anyopaque) callconv(.c) void;
pub const PFNGLIMPORTMEMORYWIN32NAMEEXTPROC = ?*const fn (GLuint, GLuint64, GLenum, ?*const anyopaque) callconv(.c) void;
pub const PFNGLMULTIDRAWARRAYSEXTPROC = ?*const fn (GLenum, [*c]const GLint, [*c]const GLsizei, GLsizei) callconv(.c) void;
pub const PFNGLMULTIDRAWELEMENTSEXTPROC = ?*const fn (GLenum, [*c]const GLsizei, GLenum, [*c]const ?*const anyopaque, GLsizei) callconv(.c) void;
pub const PFNGLMULTIDRAWARRAYSINDIRECTEXTPROC = ?*const fn (GLenum, ?*const anyopaque, GLsizei, GLsizei) callconv(.c) void;
pub const PFNGLMULTIDRAWELEMENTSINDIRECTEXTPROC = ?*const fn (GLenum, GLenum, ?*const anyopaque, GLsizei, GLsizei) callconv(.c) void;
pub const PFNGLRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC = ?*const fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei) callconv(.c) void;
pub const PFNGLFRAMEBUFFERTEXTURE2DMULTISAMPLEEXTPROC = ?*const fn (GLenum, GLenum, GLenum, GLuint, GLint, GLsizei) callconv(.c) void;
pub const PFNGLREADBUFFERINDEXEDEXTPROC = ?*const fn (GLenum, GLint) callconv(.c) void;
pub const PFNGLDRAWBUFFERSINDEXEDEXTPROC = ?*const fn (GLint, [*c]const GLenum, [*c]const GLint) callconv(.c) void;
pub const PFNGLGETINTEGERI_VEXTPROC = ?*const fn (GLenum, GLuint, [*c]GLint) callconv(.c) void;
pub const PFNGLPOLYGONOFFSETCLAMPEXTPROC = ?*const fn (GLfloat, GLfloat, GLfloat) callconv(.c) void;
pub const PFNGLPRIMITIVEBOUNDINGBOXEXTPROC = ?*const fn (GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.c) void;
pub const PFNGLRASTERSAMPLESEXTPROC = ?*const fn (GLuint, GLboolean) callconv(.c) void;
pub const PFNGLGETGRAPHICSRESETSTATUSEXTPROC = ?*const fn () callconv(.c) GLenum;
pub const PFNGLREADNPIXELSEXTPROC = ?*const fn (GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, GLsizei, ?*anyopaque) callconv(.c) void;
pub const PFNGLGETNUNIFORMFVEXTPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]GLfloat) callconv(.c) void;
pub const PFNGLGETNUNIFORMIVEXTPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]GLint) callconv(.c) void;
pub const PFNGLGENSEMAPHORESEXTPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.c) void;
pub const PFNGLDELETESEMAPHORESEXTPROC = ?*const fn (GLsizei, [*c]const GLuint) callconv(.c) void;
pub const PFNGLISSEMAPHOREEXTPROC = ?*const fn (GLuint) callconv(.c) GLboolean;
pub const PFNGLSEMAPHOREPARAMETERUI64VEXTPROC = ?*const fn (GLuint, GLenum, [*c]const GLuint64) callconv(.c) void;
pub const PFNGLGETSEMAPHOREPARAMETERUI64VEXTPROC = ?*const fn (GLuint, GLenum, [*c]GLuint64) callconv(.c) void;
pub const PFNGLWAITSEMAPHOREEXTPROC = ?*const fn (GLuint, GLuint, [*c]const GLuint, GLuint, [*c]const GLuint, [*c]const GLenum) callconv(.c) void;
pub const PFNGLSIGNALSEMAPHOREEXTPROC = ?*const fn (GLuint, GLuint, [*c]const GLuint, GLuint, [*c]const GLuint, [*c]const GLenum) callconv(.c) void;
pub const PFNGLIMPORTSEMAPHOREFDEXTPROC = ?*const fn (GLuint, GLenum, GLint) callconv(.c) void;
pub const PFNGLIMPORTSEMAPHOREWIN32HANDLEEXTPROC = ?*const fn (GLuint, GLenum, ?*anyopaque) callconv(.c) void;
pub const PFNGLIMPORTSEMAPHOREWIN32NAMEEXTPROC = ?*const fn (GLuint, GLenum, ?*const anyopaque) callconv(.c) void;
pub const PFNGLACTIVESHADERPROGRAMEXTPROC = ?*const fn (GLuint, GLuint) callconv(.c) void;
pub const PFNGLBINDPROGRAMPIPELINEEXTPROC = ?*const fn (GLuint) callconv(.c) void;
pub const PFNGLCREATESHADERPROGRAMVEXTPROC = ?*const fn (GLenum, GLsizei, [*c][*c]const GLchar) callconv(.c) GLuint;
pub const PFNGLDELETEPROGRAMPIPELINESEXTPROC = ?*const fn (GLsizei, [*c]const GLuint) callconv(.c) void;
pub const PFNGLGENPROGRAMPIPELINESEXTPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.c) void;
pub const PFNGLGETPROGRAMPIPELINEINFOLOGEXTPROC = ?*const fn (GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.c) void;
pub const PFNGLGETPROGRAMPIPELINEIVEXTPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.c) void;
pub const PFNGLISPROGRAMPIPELINEEXTPROC = ?*const fn (GLuint) callconv(.c) GLboolean;
pub const PFNGLPROGRAMPARAMETERIEXTPROC = ?*const fn (GLuint, GLenum, GLint) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORM1FEXTPROC = ?*const fn (GLuint, GLint, GLfloat) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORM1FVEXTPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORM1IEXTPROC = ?*const fn (GLuint, GLint, GLint) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORM1IVEXTPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLint) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORM2FEXTPROC = ?*const fn (GLuint, GLint, GLfloat, GLfloat) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORM2FVEXTPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORM2IEXTPROC = ?*const fn (GLuint, GLint, GLint, GLint) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORM2IVEXTPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLint) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORM3FEXTPROC = ?*const fn (GLuint, GLint, GLfloat, GLfloat, GLfloat) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORM3FVEXTPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORM3IEXTPROC = ?*const fn (GLuint, GLint, GLint, GLint, GLint) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORM3IVEXTPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLint) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORM4FEXTPROC = ?*const fn (GLuint, GLint, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORM4FVEXTPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORM4IEXTPROC = ?*const fn (GLuint, GLint, GLint, GLint, GLint, GLint) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORM4IVEXTPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLint) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORMMATRIX2FVEXTPROC = ?*const fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORMMATRIX3FVEXTPROC = ?*const fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORMMATRIX4FVEXTPROC = ?*const fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLUSEPROGRAMSTAGESEXTPROC = ?*const fn (GLuint, GLbitfield, GLuint) callconv(.c) void;
pub const PFNGLVALIDATEPROGRAMPIPELINEEXTPROC = ?*const fn (GLuint) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORM1UIEXTPROC = ?*const fn (GLuint, GLint, GLuint) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORM2UIEXTPROC = ?*const fn (GLuint, GLint, GLuint, GLuint) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORM3UIEXTPROC = ?*const fn (GLuint, GLint, GLuint, GLuint, GLuint) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORM4UIEXTPROC = ?*const fn (GLuint, GLint, GLuint, GLuint, GLuint, GLuint) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORM1UIVEXTPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLuint) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORM2UIVEXTPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLuint) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORM3UIVEXTPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLuint) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORM4UIVEXTPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLuint) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORMMATRIX2X3FVEXTPROC = ?*const fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORMMATRIX3X2FVEXTPROC = ?*const fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORMMATRIX2X4FVEXTPROC = ?*const fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORMMATRIX4X2FVEXTPROC = ?*const fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORMMATRIX3X4FVEXTPROC = ?*const fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORMMATRIX4X3FVEXTPROC = ?*const fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLFRAMEBUFFERFETCHBARRIEREXTPROC = ?*const fn () callconv(.c) void;
pub const PFNGLFRAMEBUFFERPIXELLOCALSTORAGESIZEEXTPROC = ?*const fn (GLuint, GLsizei) callconv(.c) void;
pub const PFNGLGETFRAMEBUFFERPIXELLOCALSTORAGESIZEEXTPROC = ?*const fn (GLuint) callconv(.c) GLsizei;
pub const PFNGLCLEARPIXELLOCALSTORAGEUIEXTPROC = ?*const fn (GLsizei, GLsizei, [*c]const GLuint) callconv(.c) void;
pub const PFNGLTEXPAGECOMMITMENTEXTPROC = ?*const fn (GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLboolean) callconv(.c) void;
pub const PFNGLPATCHPARAMETERIEXTPROC = ?*const fn (GLenum, GLint) callconv(.c) void;
pub const PFNGLTEXPARAMETERIIVEXTPROC = ?*const fn (GLenum, GLenum, [*c]const GLint) callconv(.c) void;
pub const PFNGLTEXPARAMETERIUIVEXTPROC = ?*const fn (GLenum, GLenum, [*c]const GLuint) callconv(.c) void;
pub const PFNGLGETTEXPARAMETERIIVEXTPROC = ?*const fn (GLenum, GLenum, [*c]GLint) callconv(.c) void;
pub const PFNGLGETTEXPARAMETERIUIVEXTPROC = ?*const fn (GLenum, GLenum, [*c]GLuint) callconv(.c) void;
pub const PFNGLSAMPLERPARAMETERIIVEXTPROC = ?*const fn (GLuint, GLenum, [*c]const GLint) callconv(.c) void;
pub const PFNGLSAMPLERPARAMETERIUIVEXTPROC = ?*const fn (GLuint, GLenum, [*c]const GLuint) callconv(.c) void;
pub const PFNGLGETSAMPLERPARAMETERIIVEXTPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.c) void;
pub const PFNGLGETSAMPLERPARAMETERIUIVEXTPROC = ?*const fn (GLuint, GLenum, [*c]GLuint) callconv(.c) void;
pub const PFNGLTEXBUFFEREXTPROC = ?*const fn (GLenum, GLenum, GLuint) callconv(.c) void;
pub const PFNGLTEXBUFFERRANGEEXTPROC = ?*const fn (GLenum, GLenum, GLuint, GLintptr, GLsizeiptr) callconv(.c) void;
pub const PFNGLTEXSTORAGE1DEXTPROC = ?*const fn (GLenum, GLsizei, GLenum, GLsizei) callconv(.c) void;
pub const PFNGLTEXSTORAGE2DEXTPROC = ?*const fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei) callconv(.c) void;
pub const PFNGLTEXSTORAGE3DEXTPROC = ?*const fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei) callconv(.c) void;
pub const PFNGLTEXTURESTORAGE1DEXTPROC = ?*const fn (GLuint, GLenum, GLsizei, GLenum, GLsizei) callconv(.c) void;
pub const PFNGLTEXTURESTORAGE2DEXTPROC = ?*const fn (GLuint, GLenum, GLsizei, GLenum, GLsizei, GLsizei) callconv(.c) void;
pub const PFNGLTEXTURESTORAGE3DEXTPROC = ?*const fn (GLuint, GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei) callconv(.c) void;
pub const PFNGLTEXSTORAGEATTRIBS2DEXTPROC = ?*const fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei, [*c]const GLint) callconv(.c) void;
pub const PFNGLTEXSTORAGEATTRIBS3DEXTPROC = ?*const fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, [*c]const GLint) callconv(.c) void;
pub const PFNGLTEXTUREVIEWEXTPROC = ?*const fn (GLuint, GLenum, GLuint, GLenum, GLuint, GLuint, GLuint, GLuint) callconv(.c) void;
pub const PFNGLACQUIREKEYEDMUTEXWIN32EXTPROC = ?*const fn (GLuint, GLuint64, GLuint) callconv(.c) GLboolean;
pub const PFNGLRELEASEKEYEDMUTEXWIN32EXTPROC = ?*const fn (GLuint, GLuint64) callconv(.c) GLboolean;
pub const PFNGLWINDOWRECTANGLESEXTPROC = ?*const fn (GLenum, GLsizei, [*c]const GLint) callconv(.c) void;
pub const PFNGLGETTEXTUREHANDLEIMGPROC = ?*const fn (GLuint) callconv(.c) GLuint64;
pub const PFNGLGETTEXTURESAMPLERHANDLEIMGPROC = ?*const fn (GLuint, GLuint) callconv(.c) GLuint64;
pub const PFNGLUNIFORMHANDLEUI64IMGPROC = ?*const fn (GLint, GLuint64) callconv(.c) void;
pub const PFNGLUNIFORMHANDLEUI64VIMGPROC = ?*const fn (GLint, GLsizei, [*c]const GLuint64) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORMHANDLEUI64IMGPROC = ?*const fn (GLuint, GLint, GLuint64) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORMHANDLEUI64VIMGPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLuint64) callconv(.c) void;
pub const PFNGLFRAMEBUFFERTEXTURE2DDOWNSAMPLEIMGPROC = ?*const fn (GLenum, GLenum, GLenum, GLuint, GLint, GLint, GLint) callconv(.c) void;
pub const PFNGLFRAMEBUFFERTEXTURELAYERDOWNSAMPLEIMGPROC = ?*const fn (GLenum, GLenum, GLuint, GLint, GLint, GLint, GLint) callconv(.c) void;
pub const PFNGLRENDERBUFFERSTORAGEMULTISAMPLEIMGPROC = ?*const fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei) callconv(.c) void;
pub const PFNGLFRAMEBUFFERTEXTURE2DMULTISAMPLEIMGPROC = ?*const fn (GLenum, GLenum, GLenum, GLuint, GLint, GLsizei) callconv(.c) void;
pub const PFNGLAPPLYFRAMEBUFFERATTACHMENTCMAAINTELPROC = ?*const fn () callconv(.c) void;
pub const PFNGLBEGINPERFQUERYINTELPROC = ?*const fn (GLuint) callconv(.c) void;
pub const PFNGLCREATEPERFQUERYINTELPROC = ?*const fn (GLuint, [*c]GLuint) callconv(.c) void;
pub const PFNGLDELETEPERFQUERYINTELPROC = ?*const fn (GLuint) callconv(.c) void;
pub const PFNGLENDPERFQUERYINTELPROC = ?*const fn (GLuint) callconv(.c) void;
pub const PFNGLGETFIRSTPERFQUERYIDINTELPROC = ?*const fn ([*c]GLuint) callconv(.c) void;
pub const PFNGLGETNEXTPERFQUERYIDINTELPROC = ?*const fn (GLuint, [*c]GLuint) callconv(.c) void;
pub const PFNGLGETPERFCOUNTERINFOINTELPROC = ?*const fn (GLuint, GLuint, GLuint, [*c]GLchar, GLuint, [*c]GLchar, [*c]GLuint, [*c]GLuint, [*c]GLuint, [*c]GLuint, [*c]GLuint64) callconv(.c) void;
pub const PFNGLGETPERFQUERYDATAINTELPROC = ?*const fn (GLuint, GLuint, GLsizei, ?*anyopaque, [*c]GLuint) callconv(.c) void;
pub const PFNGLGETPERFQUERYIDBYNAMEINTELPROC = ?*const fn ([*c]GLchar, [*c]GLuint) callconv(.c) void;
pub const PFNGLGETPERFQUERYINFOINTELPROC = ?*const fn (GLuint, GLuint, [*c]GLchar, [*c]GLuint, [*c]GLuint, [*c]GLuint, [*c]GLuint) callconv(.c) void;
pub const PFNGLFRAMEBUFFERPARAMETERIMESAPROC = ?*const fn (GLenum, GLenum, GLint) callconv(.c) void;
pub const PFNGLGETFRAMEBUFFERPARAMETERIVMESAPROC = ?*const fn (GLenum, GLenum, [*c]GLint) callconv(.c) void;
pub const PFNGLGETTEXTUREHANDLENVPROC = ?*const fn (GLuint) callconv(.c) GLuint64;
pub const PFNGLGETTEXTURESAMPLERHANDLENVPROC = ?*const fn (GLuint, GLuint) callconv(.c) GLuint64;
pub const PFNGLMAKETEXTUREHANDLERESIDENTNVPROC = ?*const fn (GLuint64) callconv(.c) void;
pub const PFNGLMAKETEXTUREHANDLENONRESIDENTNVPROC = ?*const fn (GLuint64) callconv(.c) void;
pub const PFNGLGETIMAGEHANDLENVPROC = ?*const fn (GLuint, GLint, GLboolean, GLint, GLenum) callconv(.c) GLuint64;
pub const PFNGLMAKEIMAGEHANDLERESIDENTNVPROC = ?*const fn (GLuint64, GLenum) callconv(.c) void;
pub const PFNGLMAKEIMAGEHANDLENONRESIDENTNVPROC = ?*const fn (GLuint64) callconv(.c) void;
pub const PFNGLUNIFORMHANDLEUI64NVPROC = ?*const fn (GLint, GLuint64) callconv(.c) void;
pub const PFNGLUNIFORMHANDLEUI64VNVPROC = ?*const fn (GLint, GLsizei, [*c]const GLuint64) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORMHANDLEUI64NVPROC = ?*const fn (GLuint, GLint, GLuint64) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORMHANDLEUI64VNVPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLuint64) callconv(.c) void;
pub const PFNGLISTEXTUREHANDLERESIDENTNVPROC = ?*const fn (GLuint64) callconv(.c) GLboolean;
pub const PFNGLISIMAGEHANDLERESIDENTNVPROC = ?*const fn (GLuint64) callconv(.c) GLboolean;
pub const PFNGLBLENDPARAMETERINVPROC = ?*const fn (GLenum, GLint) callconv(.c) void;
pub const PFNGLBLENDBARRIERNVPROC = ?*const fn () callconv(.c) void;
pub const PFNGLVIEWPORTPOSITIONWSCALENVPROC = ?*const fn (GLuint, GLfloat, GLfloat) callconv(.c) void;
pub const PFNGLBEGINCONDITIONALRENDERNVPROC = ?*const fn (GLuint, GLenum) callconv(.c) void;
pub const PFNGLENDCONDITIONALRENDERNVPROC = ?*const fn () callconv(.c) void;
pub const PFNGLSUBPIXELPRECISIONBIASNVPROC = ?*const fn (GLuint, GLuint) callconv(.c) void;
pub const PFNGLCONSERVATIVERASTERPARAMETERINVPROC = ?*const fn (GLenum, GLint) callconv(.c) void;
pub const PFNGLCOPYBUFFERSUBDATANVPROC = ?*const fn (GLenum, GLenum, GLintptr, GLintptr, GLsizeiptr) callconv(.c) void;
pub const PFNGLCOVERAGEMASKNVPROC = ?*const fn (GLboolean) callconv(.c) void;
pub const PFNGLCOVERAGEOPERATIONNVPROC = ?*const fn (GLenum) callconv(.c) void;
pub const PFNGLDRAWBUFFERSNVPROC = ?*const fn (GLsizei, [*c]const GLenum) callconv(.c) void;
pub const PFNGLDRAWARRAYSINSTANCEDNVPROC = ?*const fn (GLenum, GLint, GLsizei, GLsizei) callconv(.c) void;
pub const PFNGLDRAWELEMENTSINSTANCEDNVPROC = ?*const fn (GLenum, GLsizei, GLenum, ?*const anyopaque, GLsizei) callconv(.c) void;
pub const GLVULKANPROCNV = ?*const fn () callconv(.c) void;
pub const PFNGLDRAWVKIMAGENVPROC = ?*const fn (GLuint64, GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.c) void;
pub const PFNGLGETVKPROCADDRNVPROC = ?*const fn ([*c]const GLchar) callconv(.c) GLVULKANPROCNV;
pub const PFNGLWAITVKSEMAPHORENVPROC = ?*const fn (GLuint64) callconv(.c) void;
pub const PFNGLSIGNALVKSEMAPHORENVPROC = ?*const fn (GLuint64) callconv(.c) void;
pub const PFNGLSIGNALVKFENCENVPROC = ?*const fn (GLuint64) callconv(.c) void;
pub const PFNGLDELETEFENCESNVPROC = ?*const fn (GLsizei, [*c]const GLuint) callconv(.c) void;
pub const PFNGLGENFENCESNVPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.c) void;
pub const PFNGLISFENCENVPROC = ?*const fn (GLuint) callconv(.c) GLboolean;
pub const PFNGLTESTFENCENVPROC = ?*const fn (GLuint) callconv(.c) GLboolean;
pub const PFNGLGETFENCEIVNVPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.c) void;
pub const PFNGLFINISHFENCENVPROC = ?*const fn (GLuint) callconv(.c) void;
pub const PFNGLSETFENCENVPROC = ?*const fn (GLuint, GLenum) callconv(.c) void;
pub const PFNGLFRAGMENTCOVERAGECOLORNVPROC = ?*const fn (GLuint) callconv(.c) void;
pub const PFNGLBLITFRAMEBUFFERNVPROC = ?*const fn (GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum) callconv(.c) void;
pub const PFNGLCOVERAGEMODULATIONTABLENVPROC = ?*const fn (GLsizei, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLGETCOVERAGEMODULATIONTABLENVPROC = ?*const fn (GLsizei, [*c]GLfloat) callconv(.c) void;
pub const PFNGLCOVERAGEMODULATIONNVPROC = ?*const fn (GLenum) callconv(.c) void;
pub const PFNGLRENDERBUFFERSTORAGEMULTISAMPLENVPROC = ?*const fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei) callconv(.c) void;
pub const GLint64EXT = khronos_int64_t;
pub const GLuint64EXT = khronos_uint64_t;
pub const PFNGLUNIFORM1I64NVPROC = ?*const fn (GLint, GLint64EXT) callconv(.c) void;
pub const PFNGLUNIFORM2I64NVPROC = ?*const fn (GLint, GLint64EXT, GLint64EXT) callconv(.c) void;
pub const PFNGLUNIFORM3I64NVPROC = ?*const fn (GLint, GLint64EXT, GLint64EXT, GLint64EXT) callconv(.c) void;
pub const PFNGLUNIFORM4I64NVPROC = ?*const fn (GLint, GLint64EXT, GLint64EXT, GLint64EXT, GLint64EXT) callconv(.c) void;
pub const PFNGLUNIFORM1I64VNVPROC = ?*const fn (GLint, GLsizei, [*c]const GLint64EXT) callconv(.c) void;
pub const PFNGLUNIFORM2I64VNVPROC = ?*const fn (GLint, GLsizei, [*c]const GLint64EXT) callconv(.c) void;
pub const PFNGLUNIFORM3I64VNVPROC = ?*const fn (GLint, GLsizei, [*c]const GLint64EXT) callconv(.c) void;
pub const PFNGLUNIFORM4I64VNVPROC = ?*const fn (GLint, GLsizei, [*c]const GLint64EXT) callconv(.c) void;
pub const PFNGLUNIFORM1UI64NVPROC = ?*const fn (GLint, GLuint64EXT) callconv(.c) void;
pub const PFNGLUNIFORM2UI64NVPROC = ?*const fn (GLint, GLuint64EXT, GLuint64EXT) callconv(.c) void;
pub const PFNGLUNIFORM3UI64NVPROC = ?*const fn (GLint, GLuint64EXT, GLuint64EXT, GLuint64EXT) callconv(.c) void;
pub const PFNGLUNIFORM4UI64NVPROC = ?*const fn (GLint, GLuint64EXT, GLuint64EXT, GLuint64EXT, GLuint64EXT) callconv(.c) void;
pub const PFNGLUNIFORM1UI64VNVPROC = ?*const fn (GLint, GLsizei, [*c]const GLuint64EXT) callconv(.c) void;
pub const PFNGLUNIFORM2UI64VNVPROC = ?*const fn (GLint, GLsizei, [*c]const GLuint64EXT) callconv(.c) void;
pub const PFNGLUNIFORM3UI64VNVPROC = ?*const fn (GLint, GLsizei, [*c]const GLuint64EXT) callconv(.c) void;
pub const PFNGLUNIFORM4UI64VNVPROC = ?*const fn (GLint, GLsizei, [*c]const GLuint64EXT) callconv(.c) void;
pub const PFNGLGETUNIFORMI64VNVPROC = ?*const fn (GLuint, GLint, [*c]GLint64EXT) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORM1I64NVPROC = ?*const fn (GLuint, GLint, GLint64EXT) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORM2I64NVPROC = ?*const fn (GLuint, GLint, GLint64EXT, GLint64EXT) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORM3I64NVPROC = ?*const fn (GLuint, GLint, GLint64EXT, GLint64EXT, GLint64EXT) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORM4I64NVPROC = ?*const fn (GLuint, GLint, GLint64EXT, GLint64EXT, GLint64EXT, GLint64EXT) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORM1I64VNVPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLint64EXT) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORM2I64VNVPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLint64EXT) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORM3I64VNVPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLint64EXT) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORM4I64VNVPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLint64EXT) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORM1UI64NVPROC = ?*const fn (GLuint, GLint, GLuint64EXT) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORM2UI64NVPROC = ?*const fn (GLuint, GLint, GLuint64EXT, GLuint64EXT) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORM3UI64NVPROC = ?*const fn (GLuint, GLint, GLuint64EXT, GLuint64EXT, GLuint64EXT) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORM4UI64NVPROC = ?*const fn (GLuint, GLint, GLuint64EXT, GLuint64EXT, GLuint64EXT, GLuint64EXT) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORM1UI64VNVPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLuint64EXT) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORM2UI64VNVPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLuint64EXT) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORM3UI64VNVPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLuint64EXT) callconv(.c) void;
pub const PFNGLPROGRAMUNIFORM4UI64VNVPROC = ?*const fn (GLuint, GLint, GLsizei, [*c]const GLuint64EXT) callconv(.c) void;
pub const PFNGLVERTEXATTRIBDIVISORNVPROC = ?*const fn (GLuint, GLuint) callconv(.c) void;
pub const PFNGLGETINTERNALFORMATSAMPLEIVNVPROC = ?*const fn (GLenum, GLenum, GLsizei, GLenum, GLsizei, [*c]GLint) callconv(.c) void;
pub const PFNGLGETMEMORYOBJECTDETACHEDRESOURCESUIVNVPROC = ?*const fn (GLuint, GLenum, GLint, GLsizei, [*c]GLuint) callconv(.c) void;
pub const PFNGLRESETMEMORYOBJECTPARAMETERNVPROC = ?*const fn (GLuint, GLenum) callconv(.c) void;
pub const PFNGLTEXATTACHMEMORYNVPROC = ?*const fn (GLenum, GLuint, GLuint64) callconv(.c) void;
pub const PFNGLBUFFERATTACHMEMORYNVPROC = ?*const fn (GLenum, GLuint, GLuint64) callconv(.c) void;
pub const PFNGLTEXTUREATTACHMEMORYNVPROC = ?*const fn (GLuint, GLuint, GLuint64) callconv(.c) void;
pub const PFNGLNAMEDBUFFERATTACHMEMORYNVPROC = ?*const fn (GLuint, GLuint, GLuint64) callconv(.c) void;
pub const PFNGLBUFFERPAGECOMMITMENTMEMNVPROC = ?*const fn (GLenum, GLintptr, GLsizeiptr, GLuint, GLuint64, GLboolean) callconv(.c) void;
pub const PFNGLTEXPAGECOMMITMENTMEMNVPROC = ?*const fn (GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLuint, GLuint64, GLboolean) callconv(.c) void;
pub const PFNGLNAMEDBUFFERPAGECOMMITMENTMEMNVPROC = ?*const fn (GLuint, GLintptr, GLsizeiptr, GLuint, GLuint64, GLboolean) callconv(.c) void;
pub const PFNGLTEXTUREPAGECOMMITMENTMEMNVPROC = ?*const fn (GLuint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLuint, GLuint64, GLboolean) callconv(.c) void;
pub const PFNGLDRAWMESHTASKSNVPROC = ?*const fn (GLuint, GLuint) callconv(.c) void;
pub const PFNGLDRAWMESHTASKSINDIRECTNVPROC = ?*const fn (GLintptr) callconv(.c) void;
pub const PFNGLMULTIDRAWMESHTASKSINDIRECTNVPROC = ?*const fn (GLintptr, GLsizei, GLsizei) callconv(.c) void;
pub const PFNGLMULTIDRAWMESHTASKSINDIRECTCOUNTNVPROC = ?*const fn (GLintptr, GLintptr, GLsizei, GLsizei) callconv(.c) void;
pub const PFNGLUNIFORMMATRIX2X3FVNVPROC = ?*const fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLUNIFORMMATRIX3X2FVNVPROC = ?*const fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLUNIFORMMATRIX2X4FVNVPROC = ?*const fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLUNIFORMMATRIX4X2FVNVPROC = ?*const fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLUNIFORMMATRIX3X4FVNVPROC = ?*const fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLUNIFORMMATRIX4X3FVNVPROC = ?*const fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.c) void;
pub const GLdouble = f64;
pub const PFNGLGENPATHSNVPROC = ?*const fn (GLsizei) callconv(.c) GLuint;
pub const PFNGLDELETEPATHSNVPROC = ?*const fn (GLuint, GLsizei) callconv(.c) void;
pub const PFNGLISPATHNVPROC = ?*const fn (GLuint) callconv(.c) GLboolean;
pub const PFNGLPATHCOMMANDSNVPROC = ?*const fn (GLuint, GLsizei, [*c]const GLubyte, GLsizei, GLenum, ?*const anyopaque) callconv(.c) void;
pub const PFNGLPATHCOORDSNVPROC = ?*const fn (GLuint, GLsizei, GLenum, ?*const anyopaque) callconv(.c) void;
pub const PFNGLPATHSUBCOMMANDSNVPROC = ?*const fn (GLuint, GLsizei, GLsizei, GLsizei, [*c]const GLubyte, GLsizei, GLenum, ?*const anyopaque) callconv(.c) void;
pub const PFNGLPATHSUBCOORDSNVPROC = ?*const fn (GLuint, GLsizei, GLsizei, GLenum, ?*const anyopaque) callconv(.c) void;
pub const PFNGLPATHSTRINGNVPROC = ?*const fn (GLuint, GLenum, GLsizei, ?*const anyopaque) callconv(.c) void;
pub const PFNGLPATHGLYPHSNVPROC = ?*const fn (GLuint, GLenum, ?*const anyopaque, GLbitfield, GLsizei, GLenum, ?*const anyopaque, GLenum, GLuint, GLfloat) callconv(.c) void;
pub const PFNGLPATHGLYPHRANGENVPROC = ?*const fn (GLuint, GLenum, ?*const anyopaque, GLbitfield, GLuint, GLsizei, GLenum, GLuint, GLfloat) callconv(.c) void;
pub const PFNGLWEIGHTPATHSNVPROC = ?*const fn (GLuint, GLsizei, [*c]const GLuint, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLCOPYPATHNVPROC = ?*const fn (GLuint, GLuint) callconv(.c) void;
pub const PFNGLINTERPOLATEPATHSNVPROC = ?*const fn (GLuint, GLuint, GLuint, GLfloat) callconv(.c) void;
pub const PFNGLTRANSFORMPATHNVPROC = ?*const fn (GLuint, GLuint, GLenum, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLPATHPARAMETERIVNVPROC = ?*const fn (GLuint, GLenum, [*c]const GLint) callconv(.c) void;
pub const PFNGLPATHPARAMETERINVPROC = ?*const fn (GLuint, GLenum, GLint) callconv(.c) void;
pub const PFNGLPATHPARAMETERFVNVPROC = ?*const fn (GLuint, GLenum, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLPATHPARAMETERFNVPROC = ?*const fn (GLuint, GLenum, GLfloat) callconv(.c) void;
pub const PFNGLPATHDASHARRAYNVPROC = ?*const fn (GLuint, GLsizei, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLPATHSTENCILFUNCNVPROC = ?*const fn (GLenum, GLint, GLuint) callconv(.c) void;
pub const PFNGLPATHSTENCILDEPTHOFFSETNVPROC = ?*const fn (GLfloat, GLfloat) callconv(.c) void;
pub const PFNGLSTENCILFILLPATHNVPROC = ?*const fn (GLuint, GLenum, GLuint) callconv(.c) void;
pub const PFNGLSTENCILSTROKEPATHNVPROC = ?*const fn (GLuint, GLint, GLuint) callconv(.c) void;
pub const PFNGLSTENCILFILLPATHINSTANCEDNVPROC = ?*const fn (GLsizei, GLenum, ?*const anyopaque, GLuint, GLenum, GLuint, GLenum, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLSTENCILSTROKEPATHINSTANCEDNVPROC = ?*const fn (GLsizei, GLenum, ?*const anyopaque, GLuint, GLint, GLuint, GLenum, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLPATHCOVERDEPTHFUNCNVPROC = ?*const fn (GLenum) callconv(.c) void;
pub const PFNGLCOVERFILLPATHNVPROC = ?*const fn (GLuint, GLenum) callconv(.c) void;
pub const PFNGLCOVERSTROKEPATHNVPROC = ?*const fn (GLuint, GLenum) callconv(.c) void;
pub const PFNGLCOVERFILLPATHINSTANCEDNVPROC = ?*const fn (GLsizei, GLenum, ?*const anyopaque, GLuint, GLenum, GLenum, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLCOVERSTROKEPATHINSTANCEDNVPROC = ?*const fn (GLsizei, GLenum, ?*const anyopaque, GLuint, GLenum, GLenum, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLGETPATHPARAMETERIVNVPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.c) void;
pub const PFNGLGETPATHPARAMETERFVNVPROC = ?*const fn (GLuint, GLenum, [*c]GLfloat) callconv(.c) void;
pub const PFNGLGETPATHCOMMANDSNVPROC = ?*const fn (GLuint, [*c]GLubyte) callconv(.c) void;
pub const PFNGLGETPATHCOORDSNVPROC = ?*const fn (GLuint, [*c]GLfloat) callconv(.c) void;
pub const PFNGLGETPATHDASHARRAYNVPROC = ?*const fn (GLuint, [*c]GLfloat) callconv(.c) void;
pub const PFNGLGETPATHMETRICSNVPROC = ?*const fn (GLbitfield, GLsizei, GLenum, ?*const anyopaque, GLuint, GLsizei, [*c]GLfloat) callconv(.c) void;
pub const PFNGLGETPATHMETRICRANGENVPROC = ?*const fn (GLbitfield, GLuint, GLsizei, GLsizei, [*c]GLfloat) callconv(.c) void;
pub const PFNGLGETPATHSPACINGNVPROC = ?*const fn (GLenum, GLsizei, GLenum, ?*const anyopaque, GLuint, GLfloat, GLfloat, GLenum, [*c]GLfloat) callconv(.c) void;
pub const PFNGLISPOINTINFILLPATHNVPROC = ?*const fn (GLuint, GLuint, GLfloat, GLfloat) callconv(.c) GLboolean;
pub const PFNGLISPOINTINSTROKEPATHNVPROC = ?*const fn (GLuint, GLfloat, GLfloat) callconv(.c) GLboolean;
pub const PFNGLGETPATHLENGTHNVPROC = ?*const fn (GLuint, GLsizei, GLsizei) callconv(.c) GLfloat;
pub const PFNGLPOINTALONGPATHNVPROC = ?*const fn (GLuint, GLsizei, GLsizei, GLfloat, [*c]GLfloat, [*c]GLfloat, [*c]GLfloat, [*c]GLfloat) callconv(.c) GLboolean;
pub const PFNGLMATRIXLOAD3X2FNVPROC = ?*const fn (GLenum, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLMATRIXLOAD3X3FNVPROC = ?*const fn (GLenum, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLMATRIXLOADTRANSPOSE3X3FNVPROC = ?*const fn (GLenum, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLMATRIXMULT3X2FNVPROC = ?*const fn (GLenum, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLMATRIXMULT3X3FNVPROC = ?*const fn (GLenum, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLMATRIXMULTTRANSPOSE3X3FNVPROC = ?*const fn (GLenum, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLSTENCILTHENCOVERFILLPATHNVPROC = ?*const fn (GLuint, GLenum, GLuint, GLenum) callconv(.c) void;
pub const PFNGLSTENCILTHENCOVERSTROKEPATHNVPROC = ?*const fn (GLuint, GLint, GLuint, GLenum) callconv(.c) void;
pub const PFNGLSTENCILTHENCOVERFILLPATHINSTANCEDNVPROC = ?*const fn (GLsizei, GLenum, ?*const anyopaque, GLuint, GLenum, GLuint, GLenum, GLenum, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLSTENCILTHENCOVERSTROKEPATHINSTANCEDNVPROC = ?*const fn (GLsizei, GLenum, ?*const anyopaque, GLuint, GLint, GLuint, GLenum, GLenum, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLPATHGLYPHINDEXRANGENVPROC = ?*const fn (GLenum, ?*const anyopaque, GLbitfield, GLuint, GLfloat, [*c]GLuint) callconv(.c) GLenum;
pub const PFNGLPATHGLYPHINDEXARRAYNVPROC = ?*const fn (GLuint, GLenum, ?*const anyopaque, GLbitfield, GLuint, GLsizei, GLuint, GLfloat) callconv(.c) GLenum;
pub const PFNGLPATHMEMORYGLYPHINDEXARRAYNVPROC = ?*const fn (GLuint, GLenum, GLsizeiptr, ?*const anyopaque, GLsizei, GLuint, GLsizei, GLuint, GLfloat) callconv(.c) GLenum;
pub const PFNGLPROGRAMPATHFRAGMENTINPUTGENNVPROC = ?*const fn (GLuint, GLint, GLenum, GLint, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLGETPROGRAMRESOURCEFVNVPROC = ?*const fn (GLuint, GLenum, GLuint, GLsizei, [*c]const GLenum, GLsizei, [*c]GLsizei, [*c]GLfloat) callconv(.c) void;
pub const PFNGLMATRIXFRUSTUMEXTPROC = ?*const fn (GLenum, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.c) void;
pub const PFNGLMATRIXLOADIDENTITYEXTPROC = ?*const fn (GLenum) callconv(.c) void;
pub const PFNGLMATRIXLOADTRANSPOSEFEXTPROC = ?*const fn (GLenum, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLMATRIXLOADTRANSPOSEDEXTPROC = ?*const fn (GLenum, [*c]const GLdouble) callconv(.c) void;
pub const PFNGLMATRIXLOADFEXTPROC = ?*const fn (GLenum, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLMATRIXLOADDEXTPROC = ?*const fn (GLenum, [*c]const GLdouble) callconv(.c) void;
pub const PFNGLMATRIXMULTTRANSPOSEFEXTPROC = ?*const fn (GLenum, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLMATRIXMULTTRANSPOSEDEXTPROC = ?*const fn (GLenum, [*c]const GLdouble) callconv(.c) void;
pub const PFNGLMATRIXMULTFEXTPROC = ?*const fn (GLenum, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLMATRIXMULTDEXTPROC = ?*const fn (GLenum, [*c]const GLdouble) callconv(.c) void;
pub const PFNGLMATRIXORTHOEXTPROC = ?*const fn (GLenum, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.c) void;
pub const PFNGLMATRIXPOPEXTPROC = ?*const fn (GLenum) callconv(.c) void;
pub const PFNGLMATRIXPUSHEXTPROC = ?*const fn (GLenum) callconv(.c) void;
pub const PFNGLMATRIXROTATEFEXTPROC = ?*const fn (GLenum, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.c) void;
pub const PFNGLMATRIXROTATEDEXTPROC = ?*const fn (GLenum, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.c) void;
pub const PFNGLMATRIXSCALEFEXTPROC = ?*const fn (GLenum, GLfloat, GLfloat, GLfloat) callconv(.c) void;
pub const PFNGLMATRIXSCALEDEXTPROC = ?*const fn (GLenum, GLdouble, GLdouble, GLdouble) callconv(.c) void;
pub const PFNGLMATRIXTRANSLATEFEXTPROC = ?*const fn (GLenum, GLfloat, GLfloat, GLfloat) callconv(.c) void;
pub const PFNGLMATRIXTRANSLATEDEXTPROC = ?*const fn (GLenum, GLdouble, GLdouble, GLdouble) callconv(.c) void;
pub const PFNGLPOLYGONMODENVPROC = ?*const fn (GLenum, GLenum) callconv(.c) void;
pub const PFNGLREADBUFFERNVPROC = ?*const fn (GLenum) callconv(.c) void;
pub const PFNGLFRAMEBUFFERSAMPLELOCATIONSFVNVPROC = ?*const fn (GLenum, GLuint, GLsizei, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLNAMEDFRAMEBUFFERSAMPLELOCATIONSFVNVPROC = ?*const fn (GLuint, GLuint, GLsizei, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLRESOLVEDEPTHVALUESNVPROC = ?*const fn () callconv(.c) void;
pub const PFNGLSCISSOREXCLUSIVENVPROC = ?*const fn (GLint, GLint, GLsizei, GLsizei) callconv(.c) void;
pub const PFNGLSCISSOREXCLUSIVEARRAYVNVPROC = ?*const fn (GLuint, GLsizei, [*c]const GLint) callconv(.c) void;
pub const PFNGLBINDSHADINGRATEIMAGENVPROC = ?*const fn (GLuint) callconv(.c) void;
pub const PFNGLGETSHADINGRATEIMAGEPALETTENVPROC = ?*const fn (GLuint, GLuint, [*c]GLenum) callconv(.c) void;
pub const PFNGLGETSHADINGRATESAMPLELOCATIONIVNVPROC = ?*const fn (GLenum, GLuint, GLuint, [*c]GLint) callconv(.c) void;
pub const PFNGLSHADINGRATEIMAGEBARRIERNVPROC = ?*const fn (GLboolean) callconv(.c) void;
pub const PFNGLSHADINGRATEIMAGEPALETTENVPROC = ?*const fn (GLuint, GLuint, GLsizei, [*c]const GLenum) callconv(.c) void;
pub const PFNGLSHADINGRATESAMPLEORDERNVPROC = ?*const fn (GLenum) callconv(.c) void;
pub const PFNGLSHADINGRATESAMPLEORDERCUSTOMNVPROC = ?*const fn (GLenum, GLuint, [*c]const GLint) callconv(.c) void;
pub const PFNGLCREATESEMAPHORESNVPROC = ?*const fn (GLsizei, [*c]GLuint) callconv(.c) void;
pub const PFNGLSEMAPHOREPARAMETERIVNVPROC = ?*const fn (GLuint, GLenum, [*c]const GLint) callconv(.c) void;
pub const PFNGLGETSEMAPHOREPARAMETERIVNVPROC = ?*const fn (GLuint, GLenum, [*c]GLint) callconv(.c) void;
pub const PFNGLVIEWPORTARRAYVNVPROC = ?*const fn (GLuint, GLsizei, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLVIEWPORTINDEXEDFNVPROC = ?*const fn (GLuint, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.c) void;
pub const PFNGLVIEWPORTINDEXEDFVNVPROC = ?*const fn (GLuint, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLSCISSORARRAYVNVPROC = ?*const fn (GLuint, GLsizei, [*c]const GLint) callconv(.c) void;
pub const PFNGLSCISSORINDEXEDNVPROC = ?*const fn (GLuint, GLint, GLint, GLsizei, GLsizei) callconv(.c) void;
pub const PFNGLSCISSORINDEXEDVNVPROC = ?*const fn (GLuint, [*c]const GLint) callconv(.c) void;
pub const PFNGLDEPTHRANGEARRAYFVNVPROC = ?*const fn (GLuint, GLsizei, [*c]const GLfloat) callconv(.c) void;
pub const PFNGLDEPTHRANGEINDEXEDFNVPROC = ?*const fn (GLuint, GLfloat, GLfloat) callconv(.c) void;
pub const PFNGLGETFLOATI_VNVPROC = ?*const fn (GLenum, GLuint, [*c]GLfloat) callconv(.c) void;
pub const PFNGLENABLEINVPROC = ?*const fn (GLenum, GLuint) callconv(.c) void;
pub const PFNGLDISABLEINVPROC = ?*const fn (GLenum, GLuint) callconv(.c) void;
pub const PFNGLISENABLEDINVPROC = ?*const fn (GLenum, GLuint) callconv(.c) GLboolean;
pub const PFNGLVIEWPORTSWIZZLENVPROC = ?*const fn (GLuint, GLenum, GLenum, GLenum, GLenum) callconv(.c) void;
pub const PFNGLFRAMEBUFFERTEXTUREMULTIVIEWOVRPROC = ?*const fn (GLenum, GLenum, GLuint, GLint, GLint, GLsizei) callconv(.c) void;
pub const PFNGLFRAMEBUFFERTEXTUREMULTISAMPLEMULTIVIEWOVRPROC = ?*const fn (GLenum, GLenum, GLuint, GLint, GLsizei, GLint, GLsizei) callconv(.c) void;
pub const PFNGLALPHAFUNCQCOMPROC = ?*const fn (GLenum, GLclampf) callconv(.c) void;
pub const PFNGLGETDRIVERCONTROLSQCOMPROC = ?*const fn ([*c]GLint, GLsizei, [*c]GLuint) callconv(.c) void;
pub const PFNGLGETDRIVERCONTROLSTRINGQCOMPROC = ?*const fn (GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.c) void;
pub const PFNGLENABLEDRIVERCONTROLQCOMPROC = ?*const fn (GLuint) callconv(.c) void;
pub const PFNGLDISABLEDRIVERCONTROLQCOMPROC = ?*const fn (GLuint) callconv(.c) void;
pub const PFNGLEXTGETTEXTURESQCOMPROC = ?*const fn ([*c]GLuint, GLint, [*c]GLint) callconv(.c) void;
pub const PFNGLEXTGETBUFFERSQCOMPROC = ?*const fn ([*c]GLuint, GLint, [*c]GLint) callconv(.c) void;
pub const PFNGLEXTGETRENDERBUFFERSQCOMPROC = ?*const fn ([*c]GLuint, GLint, [*c]GLint) callconv(.c) void;
pub const PFNGLEXTGETFRAMEBUFFERSQCOMPROC = ?*const fn ([*c]GLuint, GLint, [*c]GLint) callconv(.c) void;
pub const PFNGLEXTGETTEXLEVELPARAMETERIVQCOMPROC = ?*const fn (GLuint, GLenum, GLint, GLenum, [*c]GLint) callconv(.c) void;
pub const PFNGLEXTTEXOBJECTSTATEOVERRIDEIQCOMPROC = ?*const fn (GLenum, GLenum, GLint) callconv(.c) void;
pub const PFNGLEXTGETTEXSUBIMAGEQCOMPROC = ?*const fn (GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, ?*anyopaque) callconv(.c) void;
pub const PFNGLEXTGETBUFFERPOINTERVQCOMPROC = ?*const fn (GLenum, [*c]?*anyopaque) callconv(.c) void;
pub const PFNGLEXTGETSHADERSQCOMPROC = ?*const fn ([*c]GLuint, GLint, [*c]GLint) callconv(.c) void;
pub const PFNGLEXTGETPROGRAMSQCOMPROC = ?*const fn ([*c]GLuint, GLint, [*c]GLint) callconv(.c) void;
pub const PFNGLEXTISPROGRAMBINARYQCOMPROC = ?*const fn (GLuint) callconv(.c) GLboolean;
pub const PFNGLEXTGETPROGRAMBINARYSOURCEQCOMPROC = ?*const fn (GLuint, GLenum, [*c]GLchar, [*c]GLint) callconv(.c) void;
pub const PFNGLEXTRAPOLATETEX2DQCOMPROC = ?*const fn (GLuint, GLuint, GLuint, GLfloat) callconv(.c) void;
pub const PFNGLFRAMEBUFFERFOVEATIONCONFIGQCOMPROC = ?*const fn (GLuint, GLuint, GLuint, GLuint, [*c]GLuint) callconv(.c) void;
pub const PFNGLFRAMEBUFFERFOVEATIONPARAMETERSQCOMPROC = ?*const fn (GLuint, GLuint, GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.c) void;
pub const PFNGLTEXESTIMATEMOTIONQCOMPROC = ?*const fn (GLuint, GLuint, GLuint) callconv(.c) void;
pub const PFNGLTEXESTIMATEMOTIONREGIONSQCOMPROC = ?*const fn (GLuint, GLuint, GLuint, GLuint) callconv(.c) void;
pub const PFNGLFRAMEBUFFERFETCHBARRIERQCOMPROC = ?*const fn () callconv(.c) void;
pub const PFNGLSHADINGRATEQCOMPROC = ?*const fn (GLenum) callconv(.c) void;
pub const PFNGLTEXTUREFOVEATIONPARAMETERSQCOMPROC = ?*const fn (GLuint, GLuint, GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.c) void;
pub const PFNGLSTARTTILINGQCOMPROC = ?*const fn (GLuint, GLuint, GLuint, GLuint, GLbitfield) callconv(.c) void;
pub const PFNGLENDTILINGQCOMPROC = ?*const fn (GLbitfield) callconv(.c) void;
pub const __llvm__ = @as(c_int, 1);
pub const __clang__ = @as(c_int, 1);
pub const __clang_major__ = @as(c_int, 19);
pub const __clang_minor__ = @as(c_int, 1);
pub const __clang_patchlevel__ = @as(c_int, 7);
pub const __clang_version__ = "19.1.7 (https://github.com/ziglang/zig-bootstrap de1b01a8c1dddf75a560123ac1c2ab182b4830da)";
pub const __GNUC__ = @as(c_int, 4);
pub const __GNUC_MINOR__ = @as(c_int, 2);
pub const __GNUC_PATCHLEVEL__ = @as(c_int, 1);
pub const __GXX_ABI_VERSION = @as(c_int, 1002);
pub const __ATOMIC_RELAXED = @as(c_int, 0);
pub const __ATOMIC_CONSUME = @as(c_int, 1);
pub const __ATOMIC_ACQUIRE = @as(c_int, 2);
pub const __ATOMIC_RELEASE = @as(c_int, 3);
pub const __ATOMIC_ACQ_REL = @as(c_int, 4);
pub const __ATOMIC_SEQ_CST = @as(c_int, 5);
pub const __MEMORY_SCOPE_SYSTEM = @as(c_int, 0);
pub const __MEMORY_SCOPE_DEVICE = @as(c_int, 1);
pub const __MEMORY_SCOPE_WRKGRP = @as(c_int, 2);
pub const __MEMORY_SCOPE_WVFRNT = @as(c_int, 3);
pub const __MEMORY_SCOPE_SINGLE = @as(c_int, 4);
pub const __OPENCL_MEMORY_SCOPE_WORK_ITEM = @as(c_int, 0);
pub const __OPENCL_MEMORY_SCOPE_WORK_GROUP = @as(c_int, 1);
pub const __OPENCL_MEMORY_SCOPE_DEVICE = @as(c_int, 2);
pub const __OPENCL_MEMORY_SCOPE_ALL_SVM_DEVICES = @as(c_int, 3);
pub const __OPENCL_MEMORY_SCOPE_SUB_GROUP = @as(c_int, 4);
pub const __FPCLASS_SNAN = @as(c_int, 0x0001);
pub const __FPCLASS_QNAN = @as(c_int, 0x0002);
pub const __FPCLASS_NEGINF = @as(c_int, 0x0004);
pub const __FPCLASS_NEGNORMAL = @as(c_int, 0x0008);
pub const __FPCLASS_NEGSUBNORMAL = @as(c_int, 0x0010);
pub const __FPCLASS_NEGZERO = @as(c_int, 0x0020);
pub const __FPCLASS_POSZERO = @as(c_int, 0x0040);
pub const __FPCLASS_POSSUBNORMAL = @as(c_int, 0x0080);
pub const __FPCLASS_POSNORMAL = @as(c_int, 0x0100);
pub const __FPCLASS_POSINF = @as(c_int, 0x0200);
pub const __PRAGMA_REDEFINE_EXTNAME = @as(c_int, 1);
pub const __VERSION__ = "Clang 19.1.7 (https://github.com/ziglang/zig-bootstrap de1b01a8c1dddf75a560123ac1c2ab182b4830da)";
pub const __OBJC_BOOL_IS_BOOL = @as(c_int, 0);
pub const __CONSTANT_CFSTRINGS__ = @as(c_int, 1);
pub const __clang_literal_encoding__ = "UTF-8";
pub const __clang_wide_literal_encoding__ = "UTF-32";
pub const __ORDER_LITTLE_ENDIAN__ = @as(c_int, 1234);
pub const __ORDER_BIG_ENDIAN__ = @as(c_int, 4321);
pub const __ORDER_PDP_ENDIAN__ = @as(c_int, 3412);
pub const __BYTE_ORDER__ = __ORDER_LITTLE_ENDIAN__;
pub const __LITTLE_ENDIAN__ = @as(c_int, 1);
pub const _LP64 = @as(c_int, 1);
pub const __LP64__ = @as(c_int, 1);
pub const __CHAR_BIT__ = @as(c_int, 8);
pub const __BOOL_WIDTH__ = @as(c_int, 8);
pub const __SHRT_WIDTH__ = @as(c_int, 16);
pub const __INT_WIDTH__ = @as(c_int, 32);
pub const __LONG_WIDTH__ = @as(c_int, 64);
pub const __LLONG_WIDTH__ = @as(c_int, 64);
pub const __BITINT_MAXWIDTH__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 8388608, .decimal);
pub const __SCHAR_MAX__ = @as(c_int, 127);
pub const __SHRT_MAX__ = @as(c_int, 32767);
pub const __INT_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __LONG_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const __LONG_LONG_MAX__ = @as(c_longlong, 9223372036854775807);
pub const __WCHAR_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __WCHAR_WIDTH__ = @as(c_int, 32);
pub const __WINT_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const __WINT_WIDTH__ = @as(c_int, 32);
pub const __INTMAX_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const __INTMAX_WIDTH__ = @as(c_int, 64);
pub const __SIZE_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_ulong, 18446744073709551615, .decimal);
pub const __SIZE_WIDTH__ = @as(c_int, 64);
pub const __UINTMAX_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_ulong, 18446744073709551615, .decimal);
pub const __UINTMAX_WIDTH__ = @as(c_int, 64);
pub const __PTRDIFF_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const __PTRDIFF_WIDTH__ = @as(c_int, 64);
pub const __INTPTR_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const __INTPTR_WIDTH__ = @as(c_int, 64);
pub const __UINTPTR_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_ulong, 18446744073709551615, .decimal);
pub const __UINTPTR_WIDTH__ = @as(c_int, 64);
pub const __SIZEOF_DOUBLE__ = @as(c_int, 8);
pub const __SIZEOF_FLOAT__ = @as(c_int, 4);
pub const __SIZEOF_INT__ = @as(c_int, 4);
pub const __SIZEOF_LONG__ = @as(c_int, 8);
pub const __SIZEOF_LONG_DOUBLE__ = @as(c_int, 16);
pub const __SIZEOF_LONG_LONG__ = @as(c_int, 8);
pub const __SIZEOF_POINTER__ = @as(c_int, 8);
pub const __SIZEOF_SHORT__ = @as(c_int, 2);
pub const __SIZEOF_PTRDIFF_T__ = @as(c_int, 8);
pub const __SIZEOF_SIZE_T__ = @as(c_int, 8);
pub const __SIZEOF_WCHAR_T__ = @as(c_int, 4);
pub const __SIZEOF_WINT_T__ = @as(c_int, 4);
pub const __SIZEOF_INT128__ = @as(c_int, 16);
pub const __INTMAX_TYPE__ = c_long;
pub const __INTMAX_FMTd__ = "ld";
pub const __INTMAX_FMTi__ = "li";
pub const __INTMAX_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `L`");
// (no file):95:9
pub const __UINTMAX_TYPE__ = c_ulong;
pub const __UINTMAX_FMTo__ = "lo";
pub const __UINTMAX_FMTu__ = "lu";
pub const __UINTMAX_FMTx__ = "lx";
pub const __UINTMAX_FMTX__ = "lX";
pub const __UINTMAX_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `UL`");
// (no file):101:9
pub const __PTRDIFF_TYPE__ = c_long;
pub const __PTRDIFF_FMTd__ = "ld";
pub const __PTRDIFF_FMTi__ = "li";
pub const __INTPTR_TYPE__ = c_long;
pub const __INTPTR_FMTd__ = "ld";
pub const __INTPTR_FMTi__ = "li";
pub const __SIZE_TYPE__ = c_ulong;
pub const __SIZE_FMTo__ = "lo";
pub const __SIZE_FMTu__ = "lu";
pub const __SIZE_FMTx__ = "lx";
pub const __SIZE_FMTX__ = "lX";
pub const __WCHAR_TYPE__ = c_int;
pub const __WINT_TYPE__ = c_uint;
pub const __SIG_ATOMIC_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __SIG_ATOMIC_WIDTH__ = @as(c_int, 32);
pub const __CHAR16_TYPE__ = c_ushort;
pub const __CHAR32_TYPE__ = c_uint;
pub const __UINTPTR_TYPE__ = c_ulong;
pub const __UINTPTR_FMTo__ = "lo";
pub const __UINTPTR_FMTu__ = "lu";
pub const __UINTPTR_FMTx__ = "lx";
pub const __UINTPTR_FMTX__ = "lX";
pub const __FLT16_DENORM_MIN__ = @as(f16, 5.9604644775390625e-8);
pub const __FLT16_NORM_MAX__ = @as(f16, 6.5504e+4);
pub const __FLT16_HAS_DENORM__ = @as(c_int, 1);
pub const __FLT16_DIG__ = @as(c_int, 3);
pub const __FLT16_DECIMAL_DIG__ = @as(c_int, 5);
pub const __FLT16_EPSILON__ = @as(f16, 9.765625e-4);
pub const __FLT16_HAS_INFINITY__ = @as(c_int, 1);
pub const __FLT16_HAS_QUIET_NAN__ = @as(c_int, 1);
pub const __FLT16_MANT_DIG__ = @as(c_int, 11);
pub const __FLT16_MAX_10_EXP__ = @as(c_int, 4);
pub const __FLT16_MAX_EXP__ = @as(c_int, 16);
pub const __FLT16_MAX__ = @as(f16, 6.5504e+4);
pub const __FLT16_MIN_10_EXP__ = -@as(c_int, 4);
pub const __FLT16_MIN_EXP__ = -@as(c_int, 13);
pub const __FLT16_MIN__ = @as(f16, 6.103515625e-5);
pub const __FLT_DENORM_MIN__ = @as(f32, 1.40129846e-45);
pub const __FLT_NORM_MAX__ = @as(f32, 3.40282347e+38);
pub const __FLT_HAS_DENORM__ = @as(c_int, 1);
pub const __FLT_DIG__ = @as(c_int, 6);
pub const __FLT_DECIMAL_DIG__ = @as(c_int, 9);
pub const __FLT_EPSILON__ = @as(f32, 1.19209290e-7);
pub const __FLT_HAS_INFINITY__ = @as(c_int, 1);
pub const __FLT_HAS_QUIET_NAN__ = @as(c_int, 1);
pub const __FLT_MANT_DIG__ = @as(c_int, 24);
pub const __FLT_MAX_10_EXP__ = @as(c_int, 38);
pub const __FLT_MAX_EXP__ = @as(c_int, 128);
pub const __FLT_MAX__ = @as(f32, 3.40282347e+38);
pub const __FLT_MIN_10_EXP__ = -@as(c_int, 37);
pub const __FLT_MIN_EXP__ = -@as(c_int, 125);
pub const __FLT_MIN__ = @as(f32, 1.17549435e-38);
pub const __DBL_DENORM_MIN__ = @as(f64, 4.9406564584124654e-324);
pub const __DBL_NORM_MAX__ = @as(f64, 1.7976931348623157e+308);
pub const __DBL_HAS_DENORM__ = @as(c_int, 1);
pub const __DBL_DIG__ = @as(c_int, 15);
pub const __DBL_DECIMAL_DIG__ = @as(c_int, 17);
pub const __DBL_EPSILON__ = @as(f64, 2.2204460492503131e-16);
pub const __DBL_HAS_INFINITY__ = @as(c_int, 1);
pub const __DBL_HAS_QUIET_NAN__ = @as(c_int, 1);
pub const __DBL_MANT_DIG__ = @as(c_int, 53);
pub const __DBL_MAX_10_EXP__ = @as(c_int, 308);
pub const __DBL_MAX_EXP__ = @as(c_int, 1024);
pub const __DBL_MAX__ = @as(f64, 1.7976931348623157e+308);
pub const __DBL_MIN_10_EXP__ = -@as(c_int, 307);
pub const __DBL_MIN_EXP__ = -@as(c_int, 1021);
pub const __DBL_MIN__ = @as(f64, 2.2250738585072014e-308);
pub const __LDBL_DENORM_MIN__ = @as(c_longdouble, 3.64519953188247460253e-4951);
pub const __LDBL_NORM_MAX__ = @as(c_longdouble, 1.18973149535723176502e+4932);
pub const __LDBL_HAS_DENORM__ = @as(c_int, 1);
pub const __LDBL_DIG__ = @as(c_int, 18);
pub const __LDBL_DECIMAL_DIG__ = @as(c_int, 21);
pub const __LDBL_EPSILON__ = @as(c_longdouble, 1.08420217248550443401e-19);
pub const __LDBL_HAS_INFINITY__ = @as(c_int, 1);
pub const __LDBL_HAS_QUIET_NAN__ = @as(c_int, 1);
pub const __LDBL_MANT_DIG__ = @as(c_int, 64);
pub const __LDBL_MAX_10_EXP__ = @as(c_int, 4932);
pub const __LDBL_MAX_EXP__ = @as(c_int, 16384);
pub const __LDBL_MAX__ = @as(c_longdouble, 1.18973149535723176502e+4932);
pub const __LDBL_MIN_10_EXP__ = -@as(c_int, 4931);
pub const __LDBL_MIN_EXP__ = -@as(c_int, 16381);
pub const __LDBL_MIN__ = @as(c_longdouble, 3.36210314311209350626e-4932);
pub const __POINTER_WIDTH__ = @as(c_int, 64);
pub const __BIGGEST_ALIGNMENT__ = @as(c_int, 16);
pub const __WINT_UNSIGNED__ = @as(c_int, 1);
pub const __INT8_TYPE__ = i8;
pub const __INT8_FMTd__ = "hhd";
pub const __INT8_FMTi__ = "hhi";
pub const __INT8_C_SUFFIX__ = "";
pub const __INT16_TYPE__ = c_short;
pub const __INT16_FMTd__ = "hd";
pub const __INT16_FMTi__ = "hi";
pub const __INT16_C_SUFFIX__ = "";
pub const __INT32_TYPE__ = c_int;
pub const __INT32_FMTd__ = "d";
pub const __INT32_FMTi__ = "i";
pub const __INT32_C_SUFFIX__ = "";
pub const __INT64_TYPE__ = c_long;
pub const __INT64_FMTd__ = "ld";
pub const __INT64_FMTi__ = "li";
pub const __INT64_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `L`");
// (no file):202:9
pub const __UINT8_TYPE__ = u8;
pub const __UINT8_FMTo__ = "hho";
pub const __UINT8_FMTu__ = "hhu";
pub const __UINT8_FMTx__ = "hhx";
pub const __UINT8_FMTX__ = "hhX";
pub const __UINT8_C_SUFFIX__ = "";
pub const __UINT8_MAX__ = @as(c_int, 255);
pub const __INT8_MAX__ = @as(c_int, 127);
pub const __UINT16_TYPE__ = c_ushort;
pub const __UINT16_FMTo__ = "ho";
pub const __UINT16_FMTu__ = "hu";
pub const __UINT16_FMTx__ = "hx";
pub const __UINT16_FMTX__ = "hX";
pub const __UINT16_C_SUFFIX__ = "";
pub const __UINT16_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65535, .decimal);
pub const __INT16_MAX__ = @as(c_int, 32767);
pub const __UINT32_TYPE__ = c_uint;
pub const __UINT32_FMTo__ = "o";
pub const __UINT32_FMTu__ = "u";
pub const __UINT32_FMTx__ = "x";
pub const __UINT32_FMTX__ = "X";
pub const __UINT32_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `U`");
// (no file):224:9
pub const __UINT32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const __INT32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __UINT64_TYPE__ = c_ulong;
pub const __UINT64_FMTo__ = "lo";
pub const __UINT64_FMTu__ = "lu";
pub const __UINT64_FMTx__ = "lx";
pub const __UINT64_FMTX__ = "lX";
pub const __UINT64_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `UL`");
// (no file):232:9
pub const __UINT64_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_ulong, 18446744073709551615, .decimal);
pub const __INT64_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const __INT_LEAST8_TYPE__ = i8;
pub const __INT_LEAST8_MAX__ = @as(c_int, 127);
pub const __INT_LEAST8_WIDTH__ = @as(c_int, 8);
pub const __INT_LEAST8_FMTd__ = "hhd";
pub const __INT_LEAST8_FMTi__ = "hhi";
pub const __UINT_LEAST8_TYPE__ = u8;
pub const __UINT_LEAST8_MAX__ = @as(c_int, 255);
pub const __UINT_LEAST8_FMTo__ = "hho";
pub const __UINT_LEAST8_FMTu__ = "hhu";
pub const __UINT_LEAST8_FMTx__ = "hhx";
pub const __UINT_LEAST8_FMTX__ = "hhX";
pub const __INT_LEAST16_TYPE__ = c_short;
pub const __INT_LEAST16_MAX__ = @as(c_int, 32767);
pub const __INT_LEAST16_WIDTH__ = @as(c_int, 16);
pub const __INT_LEAST16_FMTd__ = "hd";
pub const __INT_LEAST16_FMTi__ = "hi";
pub const __UINT_LEAST16_TYPE__ = c_ushort;
pub const __UINT_LEAST16_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65535, .decimal);
pub const __UINT_LEAST16_FMTo__ = "ho";
pub const __UINT_LEAST16_FMTu__ = "hu";
pub const __UINT_LEAST16_FMTx__ = "hx";
pub const __UINT_LEAST16_FMTX__ = "hX";
pub const __INT_LEAST32_TYPE__ = c_int;
pub const __INT_LEAST32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __INT_LEAST32_WIDTH__ = @as(c_int, 32);
pub const __INT_LEAST32_FMTd__ = "d";
pub const __INT_LEAST32_FMTi__ = "i";
pub const __UINT_LEAST32_TYPE__ = c_uint;
pub const __UINT_LEAST32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const __UINT_LEAST32_FMTo__ = "o";
pub const __UINT_LEAST32_FMTu__ = "u";
pub const __UINT_LEAST32_FMTx__ = "x";
pub const __UINT_LEAST32_FMTX__ = "X";
pub const __INT_LEAST64_TYPE__ = c_long;
pub const __INT_LEAST64_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const __INT_LEAST64_WIDTH__ = @as(c_int, 64);
pub const __INT_LEAST64_FMTd__ = "ld";
pub const __INT_LEAST64_FMTi__ = "li";
pub const __UINT_LEAST64_TYPE__ = c_ulong;
pub const __UINT_LEAST64_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_ulong, 18446744073709551615, .decimal);
pub const __UINT_LEAST64_FMTo__ = "lo";
pub const __UINT_LEAST64_FMTu__ = "lu";
pub const __UINT_LEAST64_FMTx__ = "lx";
pub const __UINT_LEAST64_FMTX__ = "lX";
pub const __INT_FAST8_TYPE__ = i8;
pub const __INT_FAST8_MAX__ = @as(c_int, 127);
pub const __INT_FAST8_WIDTH__ = @as(c_int, 8);
pub const __INT_FAST8_FMTd__ = "hhd";
pub const __INT_FAST8_FMTi__ = "hhi";
pub const __UINT_FAST8_TYPE__ = u8;
pub const __UINT_FAST8_MAX__ = @as(c_int, 255);
pub const __UINT_FAST8_FMTo__ = "hho";
pub const __UINT_FAST8_FMTu__ = "hhu";
pub const __UINT_FAST8_FMTx__ = "hhx";
pub const __UINT_FAST8_FMTX__ = "hhX";
pub const __INT_FAST16_TYPE__ = c_short;
pub const __INT_FAST16_MAX__ = @as(c_int, 32767);
pub const __INT_FAST16_WIDTH__ = @as(c_int, 16);
pub const __INT_FAST16_FMTd__ = "hd";
pub const __INT_FAST16_FMTi__ = "hi";
pub const __UINT_FAST16_TYPE__ = c_ushort;
pub const __UINT_FAST16_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65535, .decimal);
pub const __UINT_FAST16_FMTo__ = "ho";
pub const __UINT_FAST16_FMTu__ = "hu";
pub const __UINT_FAST16_FMTx__ = "hx";
pub const __UINT_FAST16_FMTX__ = "hX";
pub const __INT_FAST32_TYPE__ = c_int;
pub const __INT_FAST32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __INT_FAST32_WIDTH__ = @as(c_int, 32);
pub const __INT_FAST32_FMTd__ = "d";
pub const __INT_FAST32_FMTi__ = "i";
pub const __UINT_FAST32_TYPE__ = c_uint;
pub const __UINT_FAST32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const __UINT_FAST32_FMTo__ = "o";
pub const __UINT_FAST32_FMTu__ = "u";
pub const __UINT_FAST32_FMTx__ = "x";
pub const __UINT_FAST32_FMTX__ = "X";
pub const __INT_FAST64_TYPE__ = c_long;
pub const __INT_FAST64_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const __INT_FAST64_WIDTH__ = @as(c_int, 64);
pub const __INT_FAST64_FMTd__ = "ld";
pub const __INT_FAST64_FMTi__ = "li";
pub const __UINT_FAST64_TYPE__ = c_ulong;
pub const __UINT_FAST64_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_ulong, 18446744073709551615, .decimal);
pub const __UINT_FAST64_FMTo__ = "lo";
pub const __UINT_FAST64_FMTu__ = "lu";
pub const __UINT_FAST64_FMTx__ = "lx";
pub const __UINT_FAST64_FMTX__ = "lX";
pub const __USER_LABEL_PREFIX__ = "";
pub const __FINITE_MATH_ONLY__ = @as(c_int, 0);
pub const __GNUC_STDC_INLINE__ = @as(c_int, 1);
pub const __GCC_ATOMIC_TEST_AND_SET_TRUEVAL = @as(c_int, 1);
pub const __GCC_DESTRUCTIVE_SIZE = @as(c_int, 64);
pub const __GCC_CONSTRUCTIVE_SIZE = @as(c_int, 64);
pub const __CLANG_ATOMIC_BOOL_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_CHAR_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_CHAR16_T_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_CHAR32_T_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_WCHAR_T_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_SHORT_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_INT_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_LONG_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_LLONG_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_POINTER_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_BOOL_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_CHAR_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_CHAR16_T_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_CHAR32_T_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_WCHAR_T_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_SHORT_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_INT_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_LONG_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_LLONG_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_POINTER_LOCK_FREE = @as(c_int, 2);
pub const __NO_INLINE__ = @as(c_int, 1);
pub const __PIC__ = @as(c_int, 2);
pub const __pic__ = @as(c_int, 2);
pub const __FLT_RADIX__ = @as(c_int, 2);
pub const __DECIMAL_DIG__ = __LDBL_DECIMAL_DIG__;
pub const __SSP_STRONG__ = @as(c_int, 2);
pub const __ELF__ = @as(c_int, 1);
pub const __GCC_ASM_FLAG_OUTPUTS__ = @as(c_int, 1);
pub const __code_model_small__ = @as(c_int, 1);
pub const __amd64__ = @as(c_int, 1);
pub const __amd64 = @as(c_int, 1);
pub const __x86_64 = @as(c_int, 1);
pub const __x86_64__ = @as(c_int, 1);
pub const __SEG_GS = @as(c_int, 1);
pub const __SEG_FS = @as(c_int, 1);
pub const __seg_gs = @compileError("unable to translate macro: undefined identifier `address_space`");
// (no file):366:9
pub const __seg_fs = @compileError("unable to translate macro: undefined identifier `address_space`");
// (no file):367:9
pub const __corei7 = @as(c_int, 1);
pub const __corei7__ = @as(c_int, 1);
pub const __tune_corei7__ = @as(c_int, 1);
pub const __REGISTER_PREFIX__ = "";
pub const __NO_MATH_INLINES = @as(c_int, 1);
pub const __AES__ = @as(c_int, 1);
pub const __PCLMUL__ = @as(c_int, 1);
pub const __LAHF_SAHF__ = @as(c_int, 1);
pub const __LZCNT__ = @as(c_int, 1);
pub const __RDRND__ = @as(c_int, 1);
pub const __FSGSBASE__ = @as(c_int, 1);
pub const __BMI__ = @as(c_int, 1);
pub const __BMI2__ = @as(c_int, 1);
pub const __POPCNT__ = @as(c_int, 1);
pub const __PRFCHW__ = @as(c_int, 1);
pub const __RDSEED__ = @as(c_int, 1);
pub const __ADX__ = @as(c_int, 1);
pub const __MOVBE__ = @as(c_int, 1);
pub const __FMA__ = @as(c_int, 1);
pub const __F16C__ = @as(c_int, 1);
pub const __FXSR__ = @as(c_int, 1);
pub const __XSAVE__ = @as(c_int, 1);
pub const __XSAVEOPT__ = @as(c_int, 1);
pub const __XSAVEC__ = @as(c_int, 1);
pub const __XSAVES__ = @as(c_int, 1);
pub const __CLFLUSHOPT__ = @as(c_int, 1);
pub const __SGX__ = @as(c_int, 1);
pub const __INVPCID__ = @as(c_int, 1);
pub const __CRC32__ = @as(c_int, 1);
pub const __AVX2__ = @as(c_int, 1);
pub const __AVX__ = @as(c_int, 1);
pub const __SSE4_2__ = @as(c_int, 1);
pub const __SSE4_1__ = @as(c_int, 1);
pub const __SSSE3__ = @as(c_int, 1);
pub const __SSE3__ = @as(c_int, 1);
pub const __SSE2__ = @as(c_int, 1);
pub const __SSE2_MATH__ = @as(c_int, 1);
pub const __SSE__ = @as(c_int, 1);
pub const __SSE_MATH__ = @as(c_int, 1);
pub const __MMX__ = @as(c_int, 1);
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_1 = @as(c_int, 1);
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_2 = @as(c_int, 1);
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_4 = @as(c_int, 1);
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_8 = @as(c_int, 1);
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_16 = @as(c_int, 1);
pub const __SIZEOF_FLOAT128__ = @as(c_int, 16);
pub const unix = @as(c_int, 1);
pub const __unix = @as(c_int, 1);
pub const __unix__ = @as(c_int, 1);
pub const linux = @as(c_int, 1);
pub const __linux = @as(c_int, 1);
pub const __linux__ = @as(c_int, 1);
pub const __gnu_linux__ = @as(c_int, 1);
pub const __FLOAT128__ = @as(c_int, 1);
pub const __STDC__ = @as(c_int, 1);
pub const __STDC_HOSTED__ = @as(c_int, 1);
pub const __STDC_VERSION__ = @as(c_long, 201710);
pub const __STDC_UTF_16__ = @as(c_int, 1);
pub const __STDC_UTF_32__ = @as(c_int, 1);
pub const __STDC_EMBED_NOT_FOUND__ = @as(c_int, 0);
pub const __STDC_EMBED_FOUND__ = @as(c_int, 1);
pub const __STDC_EMBED_EMPTY__ = @as(c_int, 2);
pub const _DEBUG = @as(c_int, 1);
pub const __GLIBC_MINOR__ = @as(c_int, 41);
pub const __GCC_HAVE_DWARF2_CFI_ASM = @as(c_int, 1);
pub const __gles2_gl2_h_ = @as(c_int, 1);
pub const __gl2platform_h_ = "";
pub const __khrplatform_h_ = "";
pub const KHRONOS_APICALL = "";
pub const KHRONOS_APIENTRY = "";
pub const KHRONOS_APIATTRIBUTES = "";
pub const __CLANG_STDINT_H = "";
pub const _STDINT_H = @as(c_int, 1);
pub const __GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION = "";
pub const _FEATURES_H = @as(c_int, 1);
pub const __KERNEL_STRICT_NAMES = "";
pub inline fn __GNUC_PREREQ(maj: anytype, min: anytype) @TypeOf(((__GNUC__ << @as(c_int, 16)) + __GNUC_MINOR__) >= ((maj << @as(c_int, 16)) + min)) {
    _ = &maj;
    _ = &min;
    return ((__GNUC__ << @as(c_int, 16)) + __GNUC_MINOR__) >= ((maj << @as(c_int, 16)) + min);
}
pub inline fn __glibc_clang_prereq(maj: anytype, min: anytype) @TypeOf(((__clang_major__ << @as(c_int, 16)) + __clang_minor__) >= ((maj << @as(c_int, 16)) + min)) {
    _ = &maj;
    _ = &min;
    return ((__clang_major__ << @as(c_int, 16)) + __clang_minor__) >= ((maj << @as(c_int, 16)) + min);
}
pub const __GLIBC_USE = @compileError("unable to translate macro: undefined identifier `__GLIBC_USE_`");
// /usr/include/features.h:191:9
pub const _DEFAULT_SOURCE = @as(c_int, 1);
pub const __GLIBC_USE_ISOC2Y = @as(c_int, 0);
pub const __GLIBC_USE_ISOC23 = @as(c_int, 0);
pub const __USE_ISOC11 = @as(c_int, 1);
pub const __USE_ISOC99 = @as(c_int, 1);
pub const __USE_ISOC95 = @as(c_int, 1);
pub const __USE_POSIX_IMPLICITLY = @as(c_int, 1);
pub const _POSIX_SOURCE = @as(c_int, 1);
pub const _POSIX_C_SOURCE = @as(c_long, 200809);
pub const __USE_POSIX = @as(c_int, 1);
pub const __USE_POSIX2 = @as(c_int, 1);
pub const __USE_POSIX199309 = @as(c_int, 1);
pub const __USE_POSIX199506 = @as(c_int, 1);
pub const __USE_XOPEN2K = @as(c_int, 1);
pub const __USE_XOPEN2K8 = @as(c_int, 1);
pub const _ATFILE_SOURCE = @as(c_int, 1);
pub const __WORDSIZE = @as(c_int, 64);
pub const __WORDSIZE_TIME64_COMPAT32 = @as(c_int, 1);
pub const __SYSCALL_WORDSIZE = @as(c_int, 64);
pub const __TIMESIZE = __WORDSIZE;
pub const __USE_TIME_BITS64 = @as(c_int, 1);
pub const __USE_MISC = @as(c_int, 1);
pub const __USE_ATFILE = @as(c_int, 1);
pub const __USE_FORTIFY_LEVEL = @as(c_int, 0);
pub const __GLIBC_USE_DEPRECATED_GETS = @as(c_int, 0);
pub const __GLIBC_USE_DEPRECATED_SCANF = @as(c_int, 0);
pub const __GLIBC_USE_C23_STRTOL = @as(c_int, 0);
pub const _STDC_PREDEF_H = @as(c_int, 1);
pub const __STDC_IEC_559__ = @as(c_int, 1);
pub const __STDC_IEC_60559_BFP__ = @as(c_long, 201404);
pub const __STDC_IEC_559_COMPLEX__ = @as(c_int, 1);
pub const __STDC_IEC_60559_COMPLEX__ = @as(c_long, 201404);
pub const __STDC_ISO_10646__ = @as(c_long, 201706);
pub const __GNU_LIBRARY__ = @as(c_int, 6);
pub const __GLIBC__ = @as(c_int, 2);
pub inline fn __GLIBC_PREREQ(maj: anytype, min: anytype) @TypeOf(((__GLIBC__ << @as(c_int, 16)) + __GLIBC_MINOR__) >= ((maj << @as(c_int, 16)) + min)) {
    _ = &maj;
    _ = &min;
    return ((__GLIBC__ << @as(c_int, 16)) + __GLIBC_MINOR__) >= ((maj << @as(c_int, 16)) + min);
}
pub const _SYS_CDEFS_H = @as(c_int, 1);
pub const __glibc_has_attribute = @compileError("unable to translate macro: undefined identifier `__has_attribute`");
// /usr/include/sys/cdefs.h:45:10
pub inline fn __glibc_has_builtin(name: anytype) @TypeOf(__has_builtin(name)) {
    _ = &name;
    return __has_builtin(name);
}
pub const __glibc_has_extension = @compileError("unable to translate macro: undefined identifier `__has_extension`");
// /usr/include/sys/cdefs.h:55:10
pub const __LEAF = "";
pub const __LEAF_ATTR = "";
pub const __THROW = @compileError("unable to translate macro: undefined identifier `__nothrow__`");
// /usr/include/sys/cdefs.h:79:11
pub const __THROWNL = @compileError("unable to translate macro: undefined identifier `__nothrow__`");
// /usr/include/sys/cdefs.h:80:11
pub const __NTH = @compileError("unable to translate macro: undefined identifier `__nothrow__`");
// /usr/include/sys/cdefs.h:81:11
pub const __NTHNL = @compileError("unable to translate macro: undefined identifier `__nothrow__`");
// /usr/include/sys/cdefs.h:82:11
pub const __COLD = @compileError("unable to translate macro: undefined identifier `__cold__`");
// /usr/include/sys/cdefs.h:102:11
pub inline fn __P(args: anytype) @TypeOf(args) {
    _ = &args;
    return args;
}
pub inline fn __PMT(args: anytype) @TypeOf(args) {
    _ = &args;
    return args;
}
pub const __CONCAT = @compileError("unable to translate C expr: unexpected token '##'");
// /usr/include/sys/cdefs.h:131:9
pub const __STRING = @compileError("unable to translate C expr: unexpected token '#'");
// /usr/include/sys/cdefs.h:132:9
pub const __ptr_t = ?*anyopaque;
pub const __BEGIN_DECLS = "";
pub const __END_DECLS = "";
pub const __attribute_overloadable__ = @compileError("unable to translate macro: undefined identifier `__overloadable__`");
// /usr/include/sys/cdefs.h:151:10
pub inline fn __bos(ptr: anytype) @TypeOf(__builtin_object_size(ptr, __USE_FORTIFY_LEVEL > @as(c_int, 1))) {
    _ = &ptr;
    return __builtin_object_size(ptr, __USE_FORTIFY_LEVEL > @as(c_int, 1));
}
pub inline fn __bos0(ptr: anytype) @TypeOf(__builtin_object_size(ptr, @as(c_int, 0))) {
    _ = &ptr;
    return __builtin_object_size(ptr, @as(c_int, 0));
}
pub inline fn __glibc_objsize0(__o: anytype) @TypeOf(__bos0(__o)) {
    _ = &__o;
    return __bos0(__o);
}
pub inline fn __glibc_objsize(__o: anytype) @TypeOf(__bos(__o)) {
    _ = &__o;
    return __bos(__o);
}
pub const __warnattr = @compileError("unable to translate C expr: unexpected token ''");
// /usr/include/sys/cdefs.h:370:10
pub const __errordecl = @compileError("unable to translate C expr: unexpected token 'extern'");
// /usr/include/sys/cdefs.h:371:10
pub const __flexarr = @compileError("unable to translate C expr: unexpected token '['");
// /usr/include/sys/cdefs.h:379:10
pub const __glibc_c99_flexarr_available = @as(c_int, 1);
pub const __REDIRECT = @compileError("unable to translate C expr: unexpected token '__asm__'");
// /usr/include/sys/cdefs.h:410:10
pub const __REDIRECT_NTH = @compileError("unable to translate C expr: unexpected token '__asm__'");
// /usr/include/sys/cdefs.h:417:11
pub const __REDIRECT_NTHNL = @compileError("unable to translate C expr: unexpected token '__asm__'");
// /usr/include/sys/cdefs.h:419:11
pub const __ASMNAME = @compileError("unable to translate C expr: unexpected token ','");
// /usr/include/sys/cdefs.h:422:10
pub inline fn __ASMNAME2(prefix: anytype, cname: anytype) @TypeOf(__STRING(prefix) ++ cname) {
    _ = &prefix;
    _ = &cname;
    return __STRING(prefix) ++ cname;
}
pub const __REDIRECT_FORTIFY = __REDIRECT;
pub const __REDIRECT_FORTIFY_NTH = __REDIRECT_NTH;
pub const __attribute_malloc__ = @compileError("unable to translate macro: undefined identifier `__malloc__`");
// /usr/include/sys/cdefs.h:452:10
pub const __attribute_alloc_size__ = @compileError("unable to translate C expr: unexpected token ''");
// /usr/include/sys/cdefs.h:463:10
pub const __attribute_alloc_align__ = @compileError("unable to translate macro: undefined identifier `__alloc_align__`");
// /usr/include/sys/cdefs.h:469:10
pub const __attribute_pure__ = @compileError("unable to translate macro: undefined identifier `__pure__`");
// /usr/include/sys/cdefs.h:479:10
pub const __attribute_const__ = @compileError("unable to translate C expr: unexpected token '__attribute__'");
// /usr/include/sys/cdefs.h:486:10
pub const __attribute_maybe_unused__ = @compileError("unable to translate macro: undefined identifier `__unused__`");
// /usr/include/sys/cdefs.h:492:10
pub const __attribute_used__ = @compileError("unable to translate macro: undefined identifier `__used__`");
// /usr/include/sys/cdefs.h:501:10
pub const __attribute_noinline__ = @compileError("unable to translate macro: undefined identifier `__noinline__`");
// /usr/include/sys/cdefs.h:502:10
pub const __attribute_deprecated__ = @compileError("unable to translate macro: undefined identifier `__deprecated__`");
// /usr/include/sys/cdefs.h:510:10
pub const __attribute_deprecated_msg__ = @compileError("unable to translate macro: undefined identifier `__deprecated__`");
// /usr/include/sys/cdefs.h:520:10
pub const __attribute_format_arg__ = @compileError("unable to translate macro: undefined identifier `__format_arg__`");
// /usr/include/sys/cdefs.h:533:10
pub const __attribute_format_strfmon__ = @compileError("unable to translate macro: undefined identifier `__format__`");
// /usr/include/sys/cdefs.h:543:10
pub const __attribute_nonnull__ = @compileError("unable to translate macro: undefined identifier `__nonnull__`");
// /usr/include/sys/cdefs.h:555:11
pub inline fn __nonnull(params: anytype) @TypeOf(__attribute_nonnull__(params)) {
    _ = &params;
    return __attribute_nonnull__(params);
}
pub const __returns_nonnull = @compileError("unable to translate macro: undefined identifier `__returns_nonnull__`");
// /usr/include/sys/cdefs.h:568:10
pub const __attribute_warn_unused_result__ = @compileError("unable to translate macro: undefined identifier `__warn_unused_result__`");
// /usr/include/sys/cdefs.h:577:10
pub const __wur = "";
pub const __always_inline = @compileError("unable to translate macro: undefined identifier `__always_inline__`");
// /usr/include/sys/cdefs.h:595:10
pub const __attribute_artificial__ = @compileError("unable to translate macro: undefined identifier `__artificial__`");
// /usr/include/sys/cdefs.h:604:10
pub const __extern_inline = @compileError("unable to translate macro: undefined identifier `__gnu_inline__`");
// /usr/include/sys/cdefs.h:622:11
pub const __extern_always_inline = @compileError("unable to translate macro: undefined identifier `__gnu_inline__`");
// /usr/include/sys/cdefs.h:623:11
pub const __fortify_function = __extern_always_inline ++ __attribute_artificial__;
pub const __restrict_arr = @compileError("unable to translate C expr: unexpected token '__restrict'");
// /usr/include/sys/cdefs.h:666:10
pub inline fn __glibc_unlikely(cond: anytype) @TypeOf(__builtin_expect(cond, @as(c_int, 0))) {
    _ = &cond;
    return __builtin_expect(cond, @as(c_int, 0));
}
pub inline fn __glibc_likely(cond: anytype) @TypeOf(__builtin_expect(cond, @as(c_int, 1))) {
    _ = &cond;
    return __builtin_expect(cond, @as(c_int, 1));
}
pub const __attribute_nonstring__ = "";
pub const __attribute_copy__ = @compileError("unable to translate C expr: unexpected token ''");
// /usr/include/sys/cdefs.h:715:10
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI = @as(c_int, 0);
pub inline fn __LDBL_REDIR1(name: anytype, proto: anytype, alias: anytype) @TypeOf(name ++ proto) {
    _ = &name;
    _ = &proto;
    _ = &alias;
    return name ++ proto;
}
pub inline fn __LDBL_REDIR(name: anytype, proto: anytype) @TypeOf(name ++ proto) {
    _ = &name;
    _ = &proto;
    return name ++ proto;
}
pub inline fn __LDBL_REDIR1_NTH(name: anytype, proto: anytype, alias: anytype) @TypeOf(name ++ proto ++ __THROW) {
    _ = &name;
    _ = &proto;
    _ = &alias;
    return name ++ proto ++ __THROW;
}
pub inline fn __LDBL_REDIR_NTH(name: anytype, proto: anytype) @TypeOf(name ++ proto ++ __THROW) {
    _ = &name;
    _ = &proto;
    return name ++ proto ++ __THROW;
}
pub const __LDBL_REDIR2_DECL = @compileError("unable to translate C expr: unexpected token ''");
// /usr/include/sys/cdefs.h:792:10
pub const __LDBL_REDIR_DECL = @compileError("unable to translate C expr: unexpected token ''");
// /usr/include/sys/cdefs.h:793:10
pub inline fn __REDIRECT_LDBL(name: anytype, proto: anytype, alias: anytype) @TypeOf(__REDIRECT(name, proto, alias)) {
    _ = &name;
    _ = &proto;
    _ = &alias;
    return __REDIRECT(name, proto, alias);
}
pub inline fn __REDIRECT_NTH_LDBL(name: anytype, proto: anytype, alias: anytype) @TypeOf(__REDIRECT_NTH(name, proto, alias)) {
    _ = &name;
    _ = &proto;
    _ = &alias;
    return __REDIRECT_NTH(name, proto, alias);
}
pub const __glibc_macro_warning1 = @compileError("unable to translate macro: undefined identifier `_Pragma`");
// /usr/include/sys/cdefs.h:807:10
pub const __glibc_macro_warning = @compileError("unable to translate macro: undefined identifier `GCC`");
// /usr/include/sys/cdefs.h:808:10
pub const __HAVE_GENERIC_SELECTION = @as(c_int, 1);
pub const __fortified_attr_access = @compileError("unable to translate C expr: unexpected token ''");
// /usr/include/sys/cdefs.h:853:11
pub const __attr_access = @compileError("unable to translate C expr: unexpected token ''");
// /usr/include/sys/cdefs.h:854:11
pub const __attr_access_none = @compileError("unable to translate C expr: unexpected token ''");
// /usr/include/sys/cdefs.h:855:11
pub const __attr_dealloc = @compileError("unable to translate C expr: unexpected token ''");
// /usr/include/sys/cdefs.h:865:10
pub const __attr_dealloc_free = "";
pub const __attribute_returns_twice__ = @compileError("unable to translate macro: undefined identifier `__returns_twice__`");
// /usr/include/sys/cdefs.h:872:10
pub const __attribute_struct_may_alias__ = @compileError("unable to translate macro: undefined identifier `__may_alias__`");
// /usr/include/sys/cdefs.h:881:10
pub const __stub___compat_bdflush = "";
pub const __stub_chflags = "";
pub const __stub_fchflags = "";
pub const __stub_gtty = "";
pub const __stub_revoke = "";
pub const __stub_setlogin = "";
pub const __stub_sigreturn = "";
pub const __stub_stty = "";
pub const __GLIBC_USE_LIB_EXT2 = @as(c_int, 0);
pub const __GLIBC_USE_IEC_60559_BFP_EXT = @as(c_int, 0);
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C23 = @as(c_int, 0);
pub const __GLIBC_USE_IEC_60559_EXT = @as(c_int, 0);
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT = @as(c_int, 0);
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C23 = @as(c_int, 0);
pub const __GLIBC_USE_IEC_60559_TYPES_EXT = @as(c_int, 0);
pub const _BITS_TYPES_H = @as(c_int, 1);
pub const __S16_TYPE = c_short;
pub const __U16_TYPE = c_ushort;
pub const __S32_TYPE = c_int;
pub const __U32_TYPE = c_uint;
pub const __SLONGWORD_TYPE = c_long;
pub const __ULONGWORD_TYPE = c_ulong;
pub const __SQUAD_TYPE = c_long;
pub const __UQUAD_TYPE = c_ulong;
pub const __SWORD_TYPE = c_long;
pub const __UWORD_TYPE = c_ulong;
pub const __SLONG32_TYPE = c_int;
pub const __ULONG32_TYPE = c_uint;
pub const __S64_TYPE = c_long;
pub const __U64_TYPE = c_ulong;
pub const __STD_TYPE = @compileError("unable to translate C expr: unexpected token 'typedef'");
// /usr/include/bits/types.h:137:10
pub const _BITS_TYPESIZES_H = @as(c_int, 1);
pub const __SYSCALL_SLONG_TYPE = __SLONGWORD_TYPE;
pub const __SYSCALL_ULONG_TYPE = __ULONGWORD_TYPE;
pub const __DEV_T_TYPE = __UQUAD_TYPE;
pub const __UID_T_TYPE = __U32_TYPE;
pub const __GID_T_TYPE = __U32_TYPE;
pub const __INO_T_TYPE = __SYSCALL_ULONG_TYPE;
pub const __INO64_T_TYPE = __UQUAD_TYPE;
pub const __MODE_T_TYPE = __U32_TYPE;
pub const __NLINK_T_TYPE = __SYSCALL_ULONG_TYPE;
pub const __FSWORD_T_TYPE = __SYSCALL_SLONG_TYPE;
pub const __OFF_T_TYPE = __SYSCALL_SLONG_TYPE;
pub const __OFF64_T_TYPE = __SQUAD_TYPE;
pub const __PID_T_TYPE = __S32_TYPE;
pub const __RLIM_T_TYPE = __SYSCALL_ULONG_TYPE;
pub const __RLIM64_T_TYPE = __UQUAD_TYPE;
pub const __BLKCNT_T_TYPE = __SYSCALL_SLONG_TYPE;
pub const __BLKCNT64_T_TYPE = __SQUAD_TYPE;
pub const __FSBLKCNT_T_TYPE = __SYSCALL_ULONG_TYPE;
pub const __FSBLKCNT64_T_TYPE = __UQUAD_TYPE;
pub const __FSFILCNT_T_TYPE = __SYSCALL_ULONG_TYPE;
pub const __FSFILCNT64_T_TYPE = __UQUAD_TYPE;
pub const __ID_T_TYPE = __U32_TYPE;
pub const __CLOCK_T_TYPE = __SYSCALL_SLONG_TYPE;
pub const __TIME_T_TYPE = __SYSCALL_SLONG_TYPE;
pub const __USECONDS_T_TYPE = __U32_TYPE;
pub const __SUSECONDS_T_TYPE = __SYSCALL_SLONG_TYPE;
pub const __SUSECONDS64_T_TYPE = __SQUAD_TYPE;
pub const __DADDR_T_TYPE = __S32_TYPE;
pub const __KEY_T_TYPE = __S32_TYPE;
pub const __CLOCKID_T_TYPE = __S32_TYPE;
pub const __TIMER_T_TYPE = ?*anyopaque;
pub const __BLKSIZE_T_TYPE = __SYSCALL_SLONG_TYPE;
pub const __FSID_T_TYPE = @compileError("unable to translate macro: undefined identifier `__val`");
// /usr/include/bits/typesizes.h:73:9
pub const __SSIZE_T_TYPE = __SWORD_TYPE;
pub const __CPU_MASK_TYPE = __SYSCALL_ULONG_TYPE;
pub const __OFF_T_MATCHES_OFF64_T = @as(c_int, 1);
pub const __INO_T_MATCHES_INO64_T = @as(c_int, 1);
pub const __RLIM_T_MATCHES_RLIM64_T = @as(c_int, 1);
pub const __STATFS_MATCHES_STATFS64 = @as(c_int, 1);
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64 = @as(c_int, 1);
pub const __FD_SETSIZE = @as(c_int, 1024);
pub const _BITS_TIME64_H = @as(c_int, 1);
pub const __TIME64_T_TYPE = __TIME_T_TYPE;
pub const _BITS_WCHAR_H = @as(c_int, 1);
pub const __WCHAR_MAX = __WCHAR_MAX__;
pub const __WCHAR_MIN = -__WCHAR_MAX - @as(c_int, 1);
pub const _BITS_STDINT_INTN_H = @as(c_int, 1);
pub const _BITS_STDINT_UINTN_H = @as(c_int, 1);
pub const _BITS_STDINT_LEAST_H = @as(c_int, 1);
pub const __intptr_t_defined = "";
pub const __INT64_C = @import("std").zig.c_translation.Macros.L_SUFFIX;
pub const __UINT64_C = @import("std").zig.c_translation.Macros.UL_SUFFIX;
pub const INT8_MIN = -@as(c_int, 128);
pub const INT16_MIN = -@as(c_int, 32767) - @as(c_int, 1);
pub const INT32_MIN = -@import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal) - @as(c_int, 1);
pub const INT64_MIN = -__INT64_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 9223372036854775807, .decimal)) - @as(c_int, 1);
pub const INT8_MAX = @as(c_int, 127);
pub const INT16_MAX = @as(c_int, 32767);
pub const INT32_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const INT64_MAX = __INT64_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 9223372036854775807, .decimal));
pub const UINT8_MAX = @as(c_int, 255);
pub const UINT16_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65535, .decimal);
pub const UINT32_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const UINT64_MAX = __UINT64_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 18446744073709551615, .decimal));
pub const INT_LEAST8_MIN = -@as(c_int, 128);
pub const INT_LEAST16_MIN = -@as(c_int, 32767) - @as(c_int, 1);
pub const INT_LEAST32_MIN = -@import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal) - @as(c_int, 1);
pub const INT_LEAST64_MIN = -__INT64_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 9223372036854775807, .decimal)) - @as(c_int, 1);
pub const INT_LEAST8_MAX = @as(c_int, 127);
pub const INT_LEAST16_MAX = @as(c_int, 32767);
pub const INT_LEAST32_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const INT_LEAST64_MAX = __INT64_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 9223372036854775807, .decimal));
pub const UINT_LEAST8_MAX = @as(c_int, 255);
pub const UINT_LEAST16_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65535, .decimal);
pub const UINT_LEAST32_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const UINT_LEAST64_MAX = __UINT64_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 18446744073709551615, .decimal));
pub const INT_FAST8_MIN = -@as(c_int, 128);
pub const INT_FAST16_MIN = -@import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal) - @as(c_int, 1);
pub const INT_FAST32_MIN = -@import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal) - @as(c_int, 1);
pub const INT_FAST64_MIN = -__INT64_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 9223372036854775807, .decimal)) - @as(c_int, 1);
pub const INT_FAST8_MAX = @as(c_int, 127);
pub const INT_FAST16_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const INT_FAST32_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const INT_FAST64_MAX = __INT64_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 9223372036854775807, .decimal));
pub const UINT_FAST8_MAX = @as(c_int, 255);
pub const UINT_FAST16_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_ulong, 18446744073709551615, .decimal);
pub const UINT_FAST32_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_ulong, 18446744073709551615, .decimal);
pub const UINT_FAST64_MAX = __UINT64_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 18446744073709551615, .decimal));
pub const INTPTR_MIN = -@import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal) - @as(c_int, 1);
pub const INTPTR_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const UINTPTR_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_ulong, 18446744073709551615, .decimal);
pub const INTMAX_MIN = -__INT64_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 9223372036854775807, .decimal)) - @as(c_int, 1);
pub const INTMAX_MAX = __INT64_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 9223372036854775807, .decimal));
pub const UINTMAX_MAX = __UINT64_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 18446744073709551615, .decimal));
pub const PTRDIFF_MIN = -@import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal) - @as(c_int, 1);
pub const PTRDIFF_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const SIG_ATOMIC_MIN = -@import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal) - @as(c_int, 1);
pub const SIG_ATOMIC_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const SIZE_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_ulong, 18446744073709551615, .decimal);
pub const WCHAR_MIN = __WCHAR_MIN;
pub const WCHAR_MAX = __WCHAR_MAX;
pub const WINT_MIN = @as(c_uint, 0);
pub const WINT_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub inline fn INT8_C(c: anytype) @TypeOf(c) {
    _ = &c;
    return c;
}
pub inline fn INT16_C(c: anytype) @TypeOf(c) {
    _ = &c;
    return c;
}
pub inline fn INT32_C(c: anytype) @TypeOf(c) {
    _ = &c;
    return c;
}
pub const INT64_C = @import("std").zig.c_translation.Macros.L_SUFFIX;
pub inline fn UINT8_C(c: anytype) @TypeOf(c) {
    _ = &c;
    return c;
}
pub inline fn UINT16_C(c: anytype) @TypeOf(c) {
    _ = &c;
    return c;
}
pub const UINT32_C = @import("std").zig.c_translation.Macros.U_SUFFIX;
pub const UINT64_C = @import("std").zig.c_translation.Macros.UL_SUFFIX;
pub const INTMAX_C = @import("std").zig.c_translation.Macros.L_SUFFIX;
pub const UINTMAX_C = @import("std").zig.c_translation.Macros.UL_SUFFIX;
pub const KHRONOS_SUPPORT_INT64 = @as(c_int, 1);
pub const KHRONOS_SUPPORT_FLOAT = @as(c_int, 1);
pub const KHRONOS_MAX_ENUM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x7FFFFFFF, .hex);
pub const GL_APICALL = "";
pub const GL_APIENTRY = "";
pub const GL_APIENTRYP = @compileError("unable to translate C expr: unexpected token ''");
// /usr/include/GLES2/gl2.h:21:9
pub const GL_GLES_PROTOTYPES = @as(c_int, 1);
pub const GL_ES_VERSION_2_0 = @as(c_int, 1);
pub const GL_DEPTH_BUFFER_BIT = @as(c_int, 0x00000100);
pub const GL_STENCIL_BUFFER_BIT = @as(c_int, 0x00000400);
pub const GL_COLOR_BUFFER_BIT = @as(c_int, 0x00004000);
pub const GL_FALSE = @as(c_int, 0);
pub const GL_TRUE = @as(c_int, 1);
pub const GL_POINTS = @as(c_int, 0x0000);
pub const GL_LINES = @as(c_int, 0x0001);
pub const GL_LINE_LOOP = @as(c_int, 0x0002);
pub const GL_LINE_STRIP = @as(c_int, 0x0003);
pub const GL_TRIANGLES = @as(c_int, 0x0004);
pub const GL_TRIANGLE_STRIP = @as(c_int, 0x0005);
pub const GL_TRIANGLE_FAN = @as(c_int, 0x0006);
pub const GL_ZERO = @as(c_int, 0);
pub const GL_ONE = @as(c_int, 1);
pub const GL_SRC_COLOR = @as(c_int, 0x0300);
pub const GL_ONE_MINUS_SRC_COLOR = @as(c_int, 0x0301);
pub const GL_SRC_ALPHA = @as(c_int, 0x0302);
pub const GL_ONE_MINUS_SRC_ALPHA = @as(c_int, 0x0303);
pub const GL_DST_ALPHA = @as(c_int, 0x0304);
pub const GL_ONE_MINUS_DST_ALPHA = @as(c_int, 0x0305);
pub const GL_DST_COLOR = @as(c_int, 0x0306);
pub const GL_ONE_MINUS_DST_COLOR = @as(c_int, 0x0307);
pub const GL_SRC_ALPHA_SATURATE = @as(c_int, 0x0308);
pub const GL_FUNC_ADD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8006, .hex);
pub const GL_BLEND_EQUATION = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8009, .hex);
pub const GL_BLEND_EQUATION_RGB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8009, .hex);
pub const GL_BLEND_EQUATION_ALPHA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x883D, .hex);
pub const GL_FUNC_SUBTRACT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x800A, .hex);
pub const GL_FUNC_REVERSE_SUBTRACT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x800B, .hex);
pub const GL_BLEND_DST_RGB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80C8, .hex);
pub const GL_BLEND_SRC_RGB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80C9, .hex);
pub const GL_BLEND_DST_ALPHA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80CA, .hex);
pub const GL_BLEND_SRC_ALPHA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80CB, .hex);
pub const GL_CONSTANT_COLOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8001, .hex);
pub const GL_ONE_MINUS_CONSTANT_COLOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8002, .hex);
pub const GL_CONSTANT_ALPHA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8003, .hex);
pub const GL_ONE_MINUS_CONSTANT_ALPHA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8004, .hex);
pub const GL_BLEND_COLOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8005, .hex);
pub const GL_ARRAY_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8892, .hex);
pub const GL_ELEMENT_ARRAY_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8893, .hex);
pub const GL_ARRAY_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8894, .hex);
pub const GL_ELEMENT_ARRAY_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8895, .hex);
pub const GL_STREAM_DRAW = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88E0, .hex);
pub const GL_STATIC_DRAW = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88E4, .hex);
pub const GL_DYNAMIC_DRAW = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88E8, .hex);
pub const GL_BUFFER_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8764, .hex);
pub const GL_BUFFER_USAGE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8765, .hex);
pub const GL_CURRENT_VERTEX_ATTRIB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8626, .hex);
pub const GL_FRONT = @as(c_int, 0x0404);
pub const GL_BACK = @as(c_int, 0x0405);
pub const GL_FRONT_AND_BACK = @as(c_int, 0x0408);
pub const GL_TEXTURE_2D = @as(c_int, 0x0DE1);
pub const GL_CULL_FACE = @as(c_int, 0x0B44);
pub const GL_BLEND = @as(c_int, 0x0BE2);
pub const GL_DITHER = @as(c_int, 0x0BD0);
pub const GL_STENCIL_TEST = @as(c_int, 0x0B90);
pub const GL_DEPTH_TEST = @as(c_int, 0x0B71);
pub const GL_SCISSOR_TEST = @as(c_int, 0x0C11);
pub const GL_POLYGON_OFFSET_FILL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8037, .hex);
pub const GL_SAMPLE_ALPHA_TO_COVERAGE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x809E, .hex);
pub const GL_SAMPLE_COVERAGE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80A0, .hex);
pub const GL_NO_ERROR = @as(c_int, 0);
pub const GL_INVALID_ENUM = @as(c_int, 0x0500);
pub const GL_INVALID_VALUE = @as(c_int, 0x0501);
pub const GL_INVALID_OPERATION = @as(c_int, 0x0502);
pub const GL_OUT_OF_MEMORY = @as(c_int, 0x0505);
pub const GL_CW = @as(c_int, 0x0900);
pub const GL_CCW = @as(c_int, 0x0901);
pub const GL_LINE_WIDTH = @as(c_int, 0x0B21);
pub const GL_ALIASED_POINT_SIZE_RANGE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x846D, .hex);
pub const GL_ALIASED_LINE_WIDTH_RANGE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x846E, .hex);
pub const GL_CULL_FACE_MODE = @as(c_int, 0x0B45);
pub const GL_FRONT_FACE = @as(c_int, 0x0B46);
pub const GL_DEPTH_RANGE = @as(c_int, 0x0B70);
pub const GL_DEPTH_WRITEMASK = @as(c_int, 0x0B72);
pub const GL_DEPTH_CLEAR_VALUE = @as(c_int, 0x0B73);
pub const GL_DEPTH_FUNC = @as(c_int, 0x0B74);
pub const GL_STENCIL_CLEAR_VALUE = @as(c_int, 0x0B91);
pub const GL_STENCIL_FUNC = @as(c_int, 0x0B92);
pub const GL_STENCIL_FAIL = @as(c_int, 0x0B94);
pub const GL_STENCIL_PASS_DEPTH_FAIL = @as(c_int, 0x0B95);
pub const GL_STENCIL_PASS_DEPTH_PASS = @as(c_int, 0x0B96);
pub const GL_STENCIL_REF = @as(c_int, 0x0B97);
pub const GL_STENCIL_VALUE_MASK = @as(c_int, 0x0B93);
pub const GL_STENCIL_WRITEMASK = @as(c_int, 0x0B98);
pub const GL_STENCIL_BACK_FUNC = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8800, .hex);
pub const GL_STENCIL_BACK_FAIL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8801, .hex);
pub const GL_STENCIL_BACK_PASS_DEPTH_FAIL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8802, .hex);
pub const GL_STENCIL_BACK_PASS_DEPTH_PASS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8803, .hex);
pub const GL_STENCIL_BACK_REF = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CA3, .hex);
pub const GL_STENCIL_BACK_VALUE_MASK = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CA4, .hex);
pub const GL_STENCIL_BACK_WRITEMASK = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CA5, .hex);
pub const GL_VIEWPORT = @as(c_int, 0x0BA2);
pub const GL_SCISSOR_BOX = @as(c_int, 0x0C10);
pub const GL_COLOR_CLEAR_VALUE = @as(c_int, 0x0C22);
pub const GL_COLOR_WRITEMASK = @as(c_int, 0x0C23);
pub const GL_UNPACK_ALIGNMENT = @as(c_int, 0x0CF5);
pub const GL_PACK_ALIGNMENT = @as(c_int, 0x0D05);
pub const GL_MAX_TEXTURE_SIZE = @as(c_int, 0x0D33);
pub const GL_MAX_VIEWPORT_DIMS = @as(c_int, 0x0D3A);
pub const GL_SUBPIXEL_BITS = @as(c_int, 0x0D50);
pub const GL_RED_BITS = @as(c_int, 0x0D52);
pub const GL_GREEN_BITS = @as(c_int, 0x0D53);
pub const GL_BLUE_BITS = @as(c_int, 0x0D54);
pub const GL_ALPHA_BITS = @as(c_int, 0x0D55);
pub const GL_DEPTH_BITS = @as(c_int, 0x0D56);
pub const GL_STENCIL_BITS = @as(c_int, 0x0D57);
pub const GL_POLYGON_OFFSET_UNITS = @as(c_int, 0x2A00);
pub const GL_POLYGON_OFFSET_FACTOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8038, .hex);
pub const GL_TEXTURE_BINDING_2D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8069, .hex);
pub const GL_SAMPLE_BUFFERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80A8, .hex);
pub const GL_SAMPLES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80A9, .hex);
pub const GL_SAMPLE_COVERAGE_VALUE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80AA, .hex);
pub const GL_SAMPLE_COVERAGE_INVERT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80AB, .hex);
pub const GL_NUM_COMPRESSED_TEXTURE_FORMATS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86A2, .hex);
pub const GL_COMPRESSED_TEXTURE_FORMATS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86A3, .hex);
pub const GL_DONT_CARE = @as(c_int, 0x1100);
pub const GL_FASTEST = @as(c_int, 0x1101);
pub const GL_NICEST = @as(c_int, 0x1102);
pub const GL_GENERATE_MIPMAP_HINT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8192, .hex);
pub const GL_BYTE = @as(c_int, 0x1400);
pub const GL_UNSIGNED_BYTE = @as(c_int, 0x1401);
pub const GL_SHORT = @as(c_int, 0x1402);
pub const GL_UNSIGNED_SHORT = @as(c_int, 0x1403);
pub const GL_INT = @as(c_int, 0x1404);
pub const GL_UNSIGNED_INT = @as(c_int, 0x1405);
pub const GL_FLOAT = @as(c_int, 0x1406);
pub const GL_FIXED = @as(c_int, 0x140C);
pub const GL_DEPTH_COMPONENT = @as(c_int, 0x1902);
pub const GL_ALPHA = @as(c_int, 0x1906);
pub const GL_RGB = @as(c_int, 0x1907);
pub const GL_RGBA = @as(c_int, 0x1908);
pub const GL_LUMINANCE = @as(c_int, 0x1909);
pub const GL_LUMINANCE_ALPHA = @as(c_int, 0x190A);
pub const GL_UNSIGNED_SHORT_4_4_4_4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8033, .hex);
pub const GL_UNSIGNED_SHORT_5_5_5_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8034, .hex);
pub const GL_UNSIGNED_SHORT_5_6_5 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8363, .hex);
pub const GL_FRAGMENT_SHADER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B30, .hex);
pub const GL_VERTEX_SHADER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B31, .hex);
pub const GL_MAX_VERTEX_ATTRIBS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8869, .hex);
pub const GL_MAX_VERTEX_UNIFORM_VECTORS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DFB, .hex);
pub const GL_MAX_VARYING_VECTORS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DFC, .hex);
pub const GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B4D, .hex);
pub const GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B4C, .hex);
pub const GL_MAX_TEXTURE_IMAGE_UNITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8872, .hex);
pub const GL_MAX_FRAGMENT_UNIFORM_VECTORS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DFD, .hex);
pub const GL_SHADER_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B4F, .hex);
pub const GL_DELETE_STATUS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B80, .hex);
pub const GL_LINK_STATUS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B82, .hex);
pub const GL_VALIDATE_STATUS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B83, .hex);
pub const GL_ATTACHED_SHADERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B85, .hex);
pub const GL_ACTIVE_UNIFORMS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B86, .hex);
pub const GL_ACTIVE_UNIFORM_MAX_LENGTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B87, .hex);
pub const GL_ACTIVE_ATTRIBUTES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B89, .hex);
pub const GL_ACTIVE_ATTRIBUTE_MAX_LENGTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B8A, .hex);
pub const GL_SHADING_LANGUAGE_VERSION = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B8C, .hex);
pub const GL_CURRENT_PROGRAM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B8D, .hex);
pub const GL_NEVER = @as(c_int, 0x0200);
pub const GL_LESS = @as(c_int, 0x0201);
pub const GL_EQUAL = @as(c_int, 0x0202);
pub const GL_LEQUAL = @as(c_int, 0x0203);
pub const GL_GREATER = @as(c_int, 0x0204);
pub const GL_NOTEQUAL = @as(c_int, 0x0205);
pub const GL_GEQUAL = @as(c_int, 0x0206);
pub const GL_ALWAYS = @as(c_int, 0x0207);
pub const GL_KEEP = @as(c_int, 0x1E00);
pub const GL_REPLACE = @as(c_int, 0x1E01);
pub const GL_INCR = @as(c_int, 0x1E02);
pub const GL_DECR = @as(c_int, 0x1E03);
pub const GL_INVERT = @as(c_int, 0x150A);
pub const GL_INCR_WRAP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8507, .hex);
pub const GL_DECR_WRAP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8508, .hex);
pub const GL_VENDOR = @as(c_int, 0x1F00);
pub const GL_RENDERER = @as(c_int, 0x1F01);
pub const GL_VERSION = @as(c_int, 0x1F02);
pub const GL_EXTENSIONS = @as(c_int, 0x1F03);
pub const GL_NEAREST = @as(c_int, 0x2600);
pub const GL_LINEAR = @as(c_int, 0x2601);
pub const GL_NEAREST_MIPMAP_NEAREST = @as(c_int, 0x2700);
pub const GL_LINEAR_MIPMAP_NEAREST = @as(c_int, 0x2701);
pub const GL_NEAREST_MIPMAP_LINEAR = @as(c_int, 0x2702);
pub const GL_LINEAR_MIPMAP_LINEAR = @as(c_int, 0x2703);
pub const GL_TEXTURE_MAG_FILTER = @as(c_int, 0x2800);
pub const GL_TEXTURE_MIN_FILTER = @as(c_int, 0x2801);
pub const GL_TEXTURE_WRAP_S = @as(c_int, 0x2802);
pub const GL_TEXTURE_WRAP_T = @as(c_int, 0x2803);
pub const GL_TEXTURE = @as(c_int, 0x1702);
pub const GL_TEXTURE_CUBE_MAP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8513, .hex);
pub const GL_TEXTURE_BINDING_CUBE_MAP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8514, .hex);
pub const GL_TEXTURE_CUBE_MAP_POSITIVE_X = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8515, .hex);
pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_X = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8516, .hex);
pub const GL_TEXTURE_CUBE_MAP_POSITIVE_Y = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8517, .hex);
pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_Y = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8518, .hex);
pub const GL_TEXTURE_CUBE_MAP_POSITIVE_Z = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8519, .hex);
pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_Z = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x851A, .hex);
pub const GL_MAX_CUBE_MAP_TEXTURE_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x851C, .hex);
pub const GL_TEXTURE0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84C0, .hex);
pub const GL_TEXTURE1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84C1, .hex);
pub const GL_TEXTURE2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84C2, .hex);
pub const GL_TEXTURE3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84C3, .hex);
pub const GL_TEXTURE4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84C4, .hex);
pub const GL_TEXTURE5 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84C5, .hex);
pub const GL_TEXTURE6 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84C6, .hex);
pub const GL_TEXTURE7 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84C7, .hex);
pub const GL_TEXTURE8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84C8, .hex);
pub const GL_TEXTURE9 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84C9, .hex);
pub const GL_TEXTURE10 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84CA, .hex);
pub const GL_TEXTURE11 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84CB, .hex);
pub const GL_TEXTURE12 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84CC, .hex);
pub const GL_TEXTURE13 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84CD, .hex);
pub const GL_TEXTURE14 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84CE, .hex);
pub const GL_TEXTURE15 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84CF, .hex);
pub const GL_TEXTURE16 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84D0, .hex);
pub const GL_TEXTURE17 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84D1, .hex);
pub const GL_TEXTURE18 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84D2, .hex);
pub const GL_TEXTURE19 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84D3, .hex);
pub const GL_TEXTURE20 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84D4, .hex);
pub const GL_TEXTURE21 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84D5, .hex);
pub const GL_TEXTURE22 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84D6, .hex);
pub const GL_TEXTURE23 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84D7, .hex);
pub const GL_TEXTURE24 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84D8, .hex);
pub const GL_TEXTURE25 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84D9, .hex);
pub const GL_TEXTURE26 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84DA, .hex);
pub const GL_TEXTURE27 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84DB, .hex);
pub const GL_TEXTURE28 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84DC, .hex);
pub const GL_TEXTURE29 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84DD, .hex);
pub const GL_TEXTURE30 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84DE, .hex);
pub const GL_TEXTURE31 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84DF, .hex);
pub const GL_ACTIVE_TEXTURE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84E0, .hex);
pub const GL_REPEAT = @as(c_int, 0x2901);
pub const GL_CLAMP_TO_EDGE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x812F, .hex);
pub const GL_MIRRORED_REPEAT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8370, .hex);
pub const GL_FLOAT_VEC2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B50, .hex);
pub const GL_FLOAT_VEC3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B51, .hex);
pub const GL_FLOAT_VEC4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B52, .hex);
pub const GL_INT_VEC2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B53, .hex);
pub const GL_INT_VEC3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B54, .hex);
pub const GL_INT_VEC4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B55, .hex);
pub const GL_BOOL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B56, .hex);
pub const GL_BOOL_VEC2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B57, .hex);
pub const GL_BOOL_VEC3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B58, .hex);
pub const GL_BOOL_VEC4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B59, .hex);
pub const GL_FLOAT_MAT2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B5A, .hex);
pub const GL_FLOAT_MAT3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B5B, .hex);
pub const GL_FLOAT_MAT4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B5C, .hex);
pub const GL_SAMPLER_2D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B5E, .hex);
pub const GL_SAMPLER_CUBE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B60, .hex);
pub const GL_VERTEX_ATTRIB_ARRAY_ENABLED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8622, .hex);
pub const GL_VERTEX_ATTRIB_ARRAY_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8623, .hex);
pub const GL_VERTEX_ATTRIB_ARRAY_STRIDE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8624, .hex);
pub const GL_VERTEX_ATTRIB_ARRAY_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8625, .hex);
pub const GL_VERTEX_ATTRIB_ARRAY_NORMALIZED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x886A, .hex);
pub const GL_VERTEX_ATTRIB_ARRAY_POINTER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8645, .hex);
pub const GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x889F, .hex);
pub const GL_IMPLEMENTATION_COLOR_READ_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B9A, .hex);
pub const GL_IMPLEMENTATION_COLOR_READ_FORMAT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B9B, .hex);
pub const GL_COMPILE_STATUS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B81, .hex);
pub const GL_INFO_LOG_LENGTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B84, .hex);
pub const GL_SHADER_SOURCE_LENGTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B88, .hex);
pub const GL_SHADER_COMPILER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DFA, .hex);
pub const GL_SHADER_BINARY_FORMATS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DF8, .hex);
pub const GL_NUM_SHADER_BINARY_FORMATS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DF9, .hex);
pub const GL_LOW_FLOAT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DF0, .hex);
pub const GL_MEDIUM_FLOAT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DF1, .hex);
pub const GL_HIGH_FLOAT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DF2, .hex);
pub const GL_LOW_INT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DF3, .hex);
pub const GL_MEDIUM_INT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DF4, .hex);
pub const GL_HIGH_INT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DF5, .hex);
pub const GL_FRAMEBUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D40, .hex);
pub const GL_RENDERBUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D41, .hex);
pub const GL_RGBA4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8056, .hex);
pub const GL_RGB5_A1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8057, .hex);
pub const GL_RGB565 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D62, .hex);
pub const GL_DEPTH_COMPONENT16 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81A5, .hex);
pub const GL_STENCIL_INDEX8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D48, .hex);
pub const GL_RENDERBUFFER_WIDTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D42, .hex);
pub const GL_RENDERBUFFER_HEIGHT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D43, .hex);
pub const GL_RENDERBUFFER_INTERNAL_FORMAT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D44, .hex);
pub const GL_RENDERBUFFER_RED_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D50, .hex);
pub const GL_RENDERBUFFER_GREEN_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D51, .hex);
pub const GL_RENDERBUFFER_BLUE_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D52, .hex);
pub const GL_RENDERBUFFER_ALPHA_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D53, .hex);
pub const GL_RENDERBUFFER_DEPTH_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D54, .hex);
pub const GL_RENDERBUFFER_STENCIL_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D55, .hex);
pub const GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CD0, .hex);
pub const GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CD1, .hex);
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CD2, .hex);
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CD3, .hex);
pub const GL_COLOR_ATTACHMENT0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE0, .hex);
pub const GL_DEPTH_ATTACHMENT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D00, .hex);
pub const GL_STENCIL_ATTACHMENT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D20, .hex);
pub const GL_NONE = @as(c_int, 0);
pub const GL_FRAMEBUFFER_COMPLETE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CD5, .hex);
pub const GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CD6, .hex);
pub const GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CD7, .hex);
pub const GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CD9, .hex);
pub const GL_FRAMEBUFFER_UNSUPPORTED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CDD, .hex);
pub const GL_FRAMEBUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CA6, .hex);
pub const GL_RENDERBUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CA7, .hex);
pub const GL_MAX_RENDERBUFFER_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84E8, .hex);
pub const GL_INVALID_FRAMEBUFFER_OPERATION = @as(c_int, 0x0506);
pub const __gles2_gl2ext_h_ = @as(c_int, 1);
pub const GL_KHR_blend_equation_advanced = @as(c_int, 1);
pub const GL_MULTIPLY_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9294, .hex);
pub const GL_SCREEN_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9295, .hex);
pub const GL_OVERLAY_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9296, .hex);
pub const GL_DARKEN_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9297, .hex);
pub const GL_LIGHTEN_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9298, .hex);
pub const GL_COLORDODGE_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9299, .hex);
pub const GL_COLORBURN_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x929A, .hex);
pub const GL_HARDLIGHT_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x929B, .hex);
pub const GL_SOFTLIGHT_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x929C, .hex);
pub const GL_DIFFERENCE_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x929E, .hex);
pub const GL_EXCLUSION_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92A0, .hex);
pub const GL_HSL_HUE_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92AD, .hex);
pub const GL_HSL_SATURATION_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92AE, .hex);
pub const GL_HSL_COLOR_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92AF, .hex);
pub const GL_HSL_LUMINOSITY_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92B0, .hex);
pub const GL_KHR_blend_equation_advanced_coherent = @as(c_int, 1);
pub const GL_BLEND_ADVANCED_COHERENT_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9285, .hex);
pub const GL_KHR_context_flush_control = @as(c_int, 1);
pub const GL_CONTEXT_RELEASE_BEHAVIOR_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82FB, .hex);
pub const GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82FC, .hex);
pub const GL_KHR_debug = @as(c_int, 1);
pub const GL_SAMPLER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82E6, .hex);
pub const GL_DEBUG_OUTPUT_SYNCHRONOUS_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8242, .hex);
pub const GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8243, .hex);
pub const GL_DEBUG_CALLBACK_FUNCTION_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8244, .hex);
pub const GL_DEBUG_CALLBACK_USER_PARAM_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8245, .hex);
pub const GL_DEBUG_SOURCE_API_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8246, .hex);
pub const GL_DEBUG_SOURCE_WINDOW_SYSTEM_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8247, .hex);
pub const GL_DEBUG_SOURCE_SHADER_COMPILER_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8248, .hex);
pub const GL_DEBUG_SOURCE_THIRD_PARTY_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8249, .hex);
pub const GL_DEBUG_SOURCE_APPLICATION_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x824A, .hex);
pub const GL_DEBUG_SOURCE_OTHER_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x824B, .hex);
pub const GL_DEBUG_TYPE_ERROR_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x824C, .hex);
pub const GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x824D, .hex);
pub const GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x824E, .hex);
pub const GL_DEBUG_TYPE_PORTABILITY_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x824F, .hex);
pub const GL_DEBUG_TYPE_PERFORMANCE_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8250, .hex);
pub const GL_DEBUG_TYPE_OTHER_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8251, .hex);
pub const GL_DEBUG_TYPE_MARKER_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8268, .hex);
pub const GL_DEBUG_TYPE_PUSH_GROUP_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8269, .hex);
pub const GL_DEBUG_TYPE_POP_GROUP_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x826A, .hex);
pub const GL_DEBUG_SEVERITY_NOTIFICATION_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x826B, .hex);
pub const GL_MAX_DEBUG_GROUP_STACK_DEPTH_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x826C, .hex);
pub const GL_DEBUG_GROUP_STACK_DEPTH_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x826D, .hex);
pub const GL_BUFFER_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82E0, .hex);
pub const GL_SHADER_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82E1, .hex);
pub const GL_PROGRAM_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82E2, .hex);
pub const GL_VERTEX_ARRAY_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8074, .hex);
pub const GL_QUERY_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82E3, .hex);
pub const GL_PROGRAM_PIPELINE_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82E4, .hex);
pub const GL_SAMPLER_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82E6, .hex);
pub const GL_MAX_LABEL_LENGTH_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82E8, .hex);
pub const GL_MAX_DEBUG_MESSAGE_LENGTH_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9143, .hex);
pub const GL_MAX_DEBUG_LOGGED_MESSAGES_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9144, .hex);
pub const GL_DEBUG_LOGGED_MESSAGES_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9145, .hex);
pub const GL_DEBUG_SEVERITY_HIGH_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9146, .hex);
pub const GL_DEBUG_SEVERITY_MEDIUM_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9147, .hex);
pub const GL_DEBUG_SEVERITY_LOW_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9148, .hex);
pub const GL_DEBUG_OUTPUT_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92E0, .hex);
pub const GL_CONTEXT_FLAG_DEBUG_BIT_KHR = @as(c_int, 0x00000002);
pub const GL_STACK_OVERFLOW_KHR = @as(c_int, 0x0503);
pub const GL_STACK_UNDERFLOW_KHR = @as(c_int, 0x0504);
pub const GL_KHR_no_error = @as(c_int, 1);
pub const GL_CONTEXT_FLAG_NO_ERROR_BIT_KHR = @as(c_int, 0x00000008);
pub const GL_KHR_parallel_shader_compile = @as(c_int, 1);
pub const GL_MAX_SHADER_COMPILER_THREADS_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91B0, .hex);
pub const GL_COMPLETION_STATUS_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91B1, .hex);
pub const GL_KHR_robust_buffer_access_behavior = @as(c_int, 1);
pub const GL_KHR_robustness = @as(c_int, 1);
pub const GL_CONTEXT_ROBUST_ACCESS_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90F3, .hex);
pub const GL_LOSE_CONTEXT_ON_RESET_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8252, .hex);
pub const GL_GUILTY_CONTEXT_RESET_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8253, .hex);
pub const GL_INNOCENT_CONTEXT_RESET_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8254, .hex);
pub const GL_UNKNOWN_CONTEXT_RESET_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8255, .hex);
pub const GL_RESET_NOTIFICATION_STRATEGY_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8256, .hex);
pub const GL_NO_RESET_NOTIFICATION_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8261, .hex);
pub const GL_CONTEXT_LOST_KHR = @as(c_int, 0x0507);
pub const GL_KHR_shader_subgroup = @as(c_int, 1);
pub const GL_SUBGROUP_SIZE_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9532, .hex);
pub const GL_SUBGROUP_SUPPORTED_STAGES_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9533, .hex);
pub const GL_SUBGROUP_SUPPORTED_FEATURES_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9534, .hex);
pub const GL_SUBGROUP_QUAD_ALL_STAGES_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9535, .hex);
pub const GL_SUBGROUP_FEATURE_BASIC_BIT_KHR = @as(c_int, 0x00000001);
pub const GL_SUBGROUP_FEATURE_VOTE_BIT_KHR = @as(c_int, 0x00000002);
pub const GL_SUBGROUP_FEATURE_ARITHMETIC_BIT_KHR = @as(c_int, 0x00000004);
pub const GL_SUBGROUP_FEATURE_BALLOT_BIT_KHR = @as(c_int, 0x00000008);
pub const GL_SUBGROUP_FEATURE_SHUFFLE_BIT_KHR = @as(c_int, 0x00000010);
pub const GL_SUBGROUP_FEATURE_SHUFFLE_RELATIVE_BIT_KHR = @as(c_int, 0x00000020);
pub const GL_SUBGROUP_FEATURE_CLUSTERED_BIT_KHR = @as(c_int, 0x00000040);
pub const GL_SUBGROUP_FEATURE_QUAD_BIT_KHR = @as(c_int, 0x00000080);
pub const GL_KHR_texture_compression_astc_hdr = @as(c_int, 1);
pub const GL_COMPRESSED_RGBA_ASTC_4x4_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93B0, .hex);
pub const GL_COMPRESSED_RGBA_ASTC_5x4_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93B1, .hex);
pub const GL_COMPRESSED_RGBA_ASTC_5x5_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93B2, .hex);
pub const GL_COMPRESSED_RGBA_ASTC_6x5_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93B3, .hex);
pub const GL_COMPRESSED_RGBA_ASTC_6x6_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93B4, .hex);
pub const GL_COMPRESSED_RGBA_ASTC_8x5_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93B5, .hex);
pub const GL_COMPRESSED_RGBA_ASTC_8x6_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93B6, .hex);
pub const GL_COMPRESSED_RGBA_ASTC_8x8_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93B7, .hex);
pub const GL_COMPRESSED_RGBA_ASTC_10x5_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93B8, .hex);
pub const GL_COMPRESSED_RGBA_ASTC_10x6_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93B9, .hex);
pub const GL_COMPRESSED_RGBA_ASTC_10x8_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93BA, .hex);
pub const GL_COMPRESSED_RGBA_ASTC_10x10_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93BB, .hex);
pub const GL_COMPRESSED_RGBA_ASTC_12x10_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93BC, .hex);
pub const GL_COMPRESSED_RGBA_ASTC_12x12_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93BD, .hex);
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93D0, .hex);
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93D1, .hex);
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93D2, .hex);
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93D3, .hex);
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93D4, .hex);
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93D5, .hex);
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93D6, .hex);
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93D7, .hex);
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93D8, .hex);
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93D9, .hex);
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93DA, .hex);
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93DB, .hex);
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93DC, .hex);
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93DD, .hex);
pub const GL_KHR_texture_compression_astc_ldr = @as(c_int, 1);
pub const GL_KHR_texture_compression_astc_sliced_3d = @as(c_int, 1);
pub const GL_OES_EGL_image = @as(c_int, 1);
pub const GL_OES_EGL_image_external = @as(c_int, 1);
pub const GL_TEXTURE_EXTERNAL_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D65, .hex);
pub const GL_TEXTURE_BINDING_EXTERNAL_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D67, .hex);
pub const GL_REQUIRED_TEXTURE_IMAGE_UNITS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D68, .hex);
pub const GL_SAMPLER_EXTERNAL_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D66, .hex);
pub const GL_OES_EGL_image_external_essl3 = @as(c_int, 1);
pub const GL_OES_compressed_ETC1_RGB8_sub_texture = @as(c_int, 1);
pub const GL_OES_compressed_ETC1_RGB8_texture = @as(c_int, 1);
pub const GL_ETC1_RGB8_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D64, .hex);
pub const GL_OES_compressed_paletted_texture = @as(c_int, 1);
pub const GL_PALETTE4_RGB8_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B90, .hex);
pub const GL_PALETTE4_RGBA8_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B91, .hex);
pub const GL_PALETTE4_R5_G6_B5_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B92, .hex);
pub const GL_PALETTE4_RGBA4_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B93, .hex);
pub const GL_PALETTE4_RGB5_A1_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B94, .hex);
pub const GL_PALETTE8_RGB8_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B95, .hex);
pub const GL_PALETTE8_RGBA8_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B96, .hex);
pub const GL_PALETTE8_R5_G6_B5_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B97, .hex);
pub const GL_PALETTE8_RGBA4_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B98, .hex);
pub const GL_PALETTE8_RGB5_A1_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B99, .hex);
pub const GL_OES_copy_image = @as(c_int, 1);
pub const GL_OES_depth24 = @as(c_int, 1);
pub const GL_DEPTH_COMPONENT24_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81A6, .hex);
pub const GL_OES_depth32 = @as(c_int, 1);
pub const GL_DEPTH_COMPONENT32_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81A7, .hex);
pub const GL_OES_depth_texture = @as(c_int, 1);
pub const GL_OES_draw_buffers_indexed = @as(c_int, 1);
pub const GL_MIN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8007, .hex);
pub const GL_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8008, .hex);
pub const GL_OES_draw_elements_base_vertex = @as(c_int, 1);
pub const GL_OES_element_index_uint = @as(c_int, 1);
pub const GL_OES_fbo_render_mipmap = @as(c_int, 1);
pub const GL_OES_fragment_precision_high = @as(c_int, 1);
pub const GL_OES_geometry_point_size = @as(c_int, 1);
pub const GL_OES_geometry_shader = @as(c_int, 1);
pub const GL_GEOMETRY_SHADER_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DD9, .hex);
pub const GL_GEOMETRY_SHADER_BIT_OES = @as(c_int, 0x00000004);
pub const GL_GEOMETRY_LINKED_VERTICES_OUT_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8916, .hex);
pub const GL_GEOMETRY_LINKED_INPUT_TYPE_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8917, .hex);
pub const GL_GEOMETRY_LINKED_OUTPUT_TYPE_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8918, .hex);
pub const GL_GEOMETRY_SHADER_INVOCATIONS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x887F, .hex);
pub const GL_LAYER_PROVOKING_VERTEX_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x825E, .hex);
pub const GL_LINES_ADJACENCY_OES = @as(c_int, 0x000A);
pub const GL_LINE_STRIP_ADJACENCY_OES = @as(c_int, 0x000B);
pub const GL_TRIANGLES_ADJACENCY_OES = @as(c_int, 0x000C);
pub const GL_TRIANGLE_STRIP_ADJACENCY_OES = @as(c_int, 0x000D);
pub const GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DDF, .hex);
pub const GL_MAX_GEOMETRY_UNIFORM_BLOCKS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A2C, .hex);
pub const GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A32, .hex);
pub const GL_MAX_GEOMETRY_INPUT_COMPONENTS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9123, .hex);
pub const GL_MAX_GEOMETRY_OUTPUT_COMPONENTS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9124, .hex);
pub const GL_MAX_GEOMETRY_OUTPUT_VERTICES_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DE0, .hex);
pub const GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DE1, .hex);
pub const GL_MAX_GEOMETRY_SHADER_INVOCATIONS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E5A, .hex);
pub const GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C29, .hex);
pub const GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92CF, .hex);
pub const GL_MAX_GEOMETRY_ATOMIC_COUNTERS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92D5, .hex);
pub const GL_MAX_GEOMETRY_IMAGE_UNIFORMS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90CD, .hex);
pub const GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90D7, .hex);
pub const GL_FIRST_VERTEX_CONVENTION_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E4D, .hex);
pub const GL_LAST_VERTEX_CONVENTION_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E4E, .hex);
pub const GL_UNDEFINED_VERTEX_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8260, .hex);
pub const GL_PRIMITIVES_GENERATED_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C87, .hex);
pub const GL_FRAMEBUFFER_DEFAULT_LAYERS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9312, .hex);
pub const GL_MAX_FRAMEBUFFER_LAYERS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9317, .hex);
pub const GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DA8, .hex);
pub const GL_FRAMEBUFFER_ATTACHMENT_LAYERED_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DA7, .hex);
pub const GL_REFERENCED_BY_GEOMETRY_SHADER_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9309, .hex);
pub const GL_OES_get_program_binary = @as(c_int, 1);
pub const GL_PROGRAM_BINARY_LENGTH_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8741, .hex);
pub const GL_NUM_PROGRAM_BINARY_FORMATS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87FE, .hex);
pub const GL_PROGRAM_BINARY_FORMATS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87FF, .hex);
pub const GL_OES_gpu_shader5 = @as(c_int, 1);
pub const GL_OES_mapbuffer = @as(c_int, 1);
pub const GL_WRITE_ONLY_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88B9, .hex);
pub const GL_BUFFER_ACCESS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88BB, .hex);
pub const GL_BUFFER_MAPPED_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88BC, .hex);
pub const GL_BUFFER_MAP_POINTER_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88BD, .hex);
pub const GL_OES_packed_depth_stencil = @as(c_int, 1);
pub const GL_DEPTH_STENCIL_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84F9, .hex);
pub const GL_UNSIGNED_INT_24_8_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84FA, .hex);
pub const GL_DEPTH24_STENCIL8_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88F0, .hex);
pub const GL_OES_primitive_bounding_box = @as(c_int, 1);
pub const GL_PRIMITIVE_BOUNDING_BOX_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92BE, .hex);
pub const GL_OES_required_internalformat = @as(c_int, 1);
pub const GL_ALPHA8_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x803C, .hex);
pub const GL_DEPTH_COMPONENT16_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81A5, .hex);
pub const GL_LUMINANCE4_ALPHA4_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8043, .hex);
pub const GL_LUMINANCE8_ALPHA8_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8045, .hex);
pub const GL_LUMINANCE8_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8040, .hex);
pub const GL_RGBA4_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8056, .hex);
pub const GL_RGB5_A1_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8057, .hex);
pub const GL_RGB565_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D62, .hex);
pub const GL_RGB8_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8051, .hex);
pub const GL_RGBA8_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8058, .hex);
pub const GL_RGB10_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8052, .hex);
pub const GL_RGB10_A2_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8059, .hex);
pub const GL_OES_rgb8_rgba8 = @as(c_int, 1);
pub const GL_OES_sample_shading = @as(c_int, 1);
pub const GL_SAMPLE_SHADING_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C36, .hex);
pub const GL_MIN_SAMPLE_SHADING_VALUE_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C37, .hex);
pub const GL_OES_sample_variables = @as(c_int, 1);
pub const GL_OES_shader_image_atomic = @as(c_int, 1);
pub const GL_OES_shader_io_blocks = @as(c_int, 1);
pub const GL_OES_shader_multisample_interpolation = @as(c_int, 1);
pub const GL_MIN_FRAGMENT_INTERPOLATION_OFFSET_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E5B, .hex);
pub const GL_MAX_FRAGMENT_INTERPOLATION_OFFSET_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E5C, .hex);
pub const GL_FRAGMENT_INTERPOLATION_OFFSET_BITS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E5D, .hex);
pub const GL_OES_standard_derivatives = @as(c_int, 1);
pub const GL_FRAGMENT_SHADER_DERIVATIVE_HINT_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B8B, .hex);
pub const GL_OES_stencil1 = @as(c_int, 1);
pub const GL_STENCIL_INDEX1_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D46, .hex);
pub const GL_OES_stencil4 = @as(c_int, 1);
pub const GL_STENCIL_INDEX4_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D47, .hex);
pub const GL_OES_surfaceless_context = @as(c_int, 1);
pub const GL_FRAMEBUFFER_UNDEFINED_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8219, .hex);
pub const GL_OES_tessellation_point_size = @as(c_int, 1);
pub const GL_OES_tessellation_shader = @as(c_int, 1);
pub const GL_PATCHES_OES = @as(c_int, 0x000E);
pub const GL_PATCH_VERTICES_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E72, .hex);
pub const GL_TESS_CONTROL_OUTPUT_VERTICES_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E75, .hex);
pub const GL_TESS_GEN_MODE_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E76, .hex);
pub const GL_TESS_GEN_SPACING_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E77, .hex);
pub const GL_TESS_GEN_VERTEX_ORDER_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E78, .hex);
pub const GL_TESS_GEN_POINT_MODE_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E79, .hex);
pub const GL_ISOLINES_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E7A, .hex);
pub const GL_QUADS_OES = @as(c_int, 0x0007);
pub const GL_FRACTIONAL_ODD_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E7B, .hex);
pub const GL_FRACTIONAL_EVEN_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E7C, .hex);
pub const GL_MAX_PATCH_VERTICES_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E7D, .hex);
pub const GL_MAX_TESS_GEN_LEVEL_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E7E, .hex);
pub const GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E7F, .hex);
pub const GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E80, .hex);
pub const GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E81, .hex);
pub const GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E82, .hex);
pub const GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E83, .hex);
pub const GL_MAX_TESS_PATCH_COMPONENTS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E84, .hex);
pub const GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E85, .hex);
pub const GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E86, .hex);
pub const GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E89, .hex);
pub const GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E8A, .hex);
pub const GL_MAX_TESS_CONTROL_INPUT_COMPONENTS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x886C, .hex);
pub const GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x886D, .hex);
pub const GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E1E, .hex);
pub const GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E1F, .hex);
pub const GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92CD, .hex);
pub const GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92CE, .hex);
pub const GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92D3, .hex);
pub const GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92D4, .hex);
pub const GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90CB, .hex);
pub const GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90CC, .hex);
pub const GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90D8, .hex);
pub const GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90D9, .hex);
pub const GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8221, .hex);
pub const GL_IS_PER_PATCH_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92E7, .hex);
pub const GL_REFERENCED_BY_TESS_CONTROL_SHADER_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9307, .hex);
pub const GL_REFERENCED_BY_TESS_EVALUATION_SHADER_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9308, .hex);
pub const GL_TESS_CONTROL_SHADER_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E88, .hex);
pub const GL_TESS_EVALUATION_SHADER_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E87, .hex);
pub const GL_TESS_CONTROL_SHADER_BIT_OES = @as(c_int, 0x00000008);
pub const GL_TESS_EVALUATION_SHADER_BIT_OES = @as(c_int, 0x00000010);
pub const GL_OES_texture_3D = @as(c_int, 1);
pub const GL_TEXTURE_WRAP_R_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8072, .hex);
pub const GL_TEXTURE_3D_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x806F, .hex);
pub const GL_TEXTURE_BINDING_3D_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x806A, .hex);
pub const GL_MAX_3D_TEXTURE_SIZE_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8073, .hex);
pub const GL_SAMPLER_3D_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B5F, .hex);
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CD4, .hex);
pub const GL_OES_texture_border_clamp = @as(c_int, 1);
pub const GL_TEXTURE_BORDER_COLOR_OES = @as(c_int, 0x1004);
pub const GL_CLAMP_TO_BORDER_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x812D, .hex);
pub const GL_OES_texture_buffer = @as(c_int, 1);
pub const GL_TEXTURE_BUFFER_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C2A, .hex);
pub const GL_TEXTURE_BUFFER_BINDING_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C2A, .hex);
pub const GL_MAX_TEXTURE_BUFFER_SIZE_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C2B, .hex);
pub const GL_TEXTURE_BINDING_BUFFER_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C2C, .hex);
pub const GL_TEXTURE_BUFFER_DATA_STORE_BINDING_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C2D, .hex);
pub const GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x919F, .hex);
pub const GL_SAMPLER_BUFFER_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DC2, .hex);
pub const GL_INT_SAMPLER_BUFFER_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DD0, .hex);
pub const GL_UNSIGNED_INT_SAMPLER_BUFFER_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DD8, .hex);
pub const GL_IMAGE_BUFFER_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9051, .hex);
pub const GL_INT_IMAGE_BUFFER_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x905C, .hex);
pub const GL_UNSIGNED_INT_IMAGE_BUFFER_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9067, .hex);
pub const GL_TEXTURE_BUFFER_OFFSET_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x919D, .hex);
pub const GL_TEXTURE_BUFFER_SIZE_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x919E, .hex);
pub const GL_OES_texture_compression_astc = @as(c_int, 1);
pub const GL_COMPRESSED_RGBA_ASTC_3x3x3_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93C0, .hex);
pub const GL_COMPRESSED_RGBA_ASTC_4x3x3_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93C1, .hex);
pub const GL_COMPRESSED_RGBA_ASTC_4x4x3_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93C2, .hex);
pub const GL_COMPRESSED_RGBA_ASTC_4x4x4_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93C3, .hex);
pub const GL_COMPRESSED_RGBA_ASTC_5x4x4_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93C4, .hex);
pub const GL_COMPRESSED_RGBA_ASTC_5x5x4_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93C5, .hex);
pub const GL_COMPRESSED_RGBA_ASTC_5x5x5_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93C6, .hex);
pub const GL_COMPRESSED_RGBA_ASTC_6x5x5_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93C7, .hex);
pub const GL_COMPRESSED_RGBA_ASTC_6x6x5_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93C8, .hex);
pub const GL_COMPRESSED_RGBA_ASTC_6x6x6_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93C9, .hex);
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_3x3x3_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93E0, .hex);
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x3x3_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93E1, .hex);
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4x3_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93E2, .hex);
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4x4_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93E3, .hex);
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4x4_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93E4, .hex);
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5x4_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93E5, .hex);
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5x5_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93E6, .hex);
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5x5_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93E7, .hex);
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6x5_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93E8, .hex);
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6x6_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93E9, .hex);
pub const GL_OES_texture_cube_map_array = @as(c_int, 1);
pub const GL_TEXTURE_CUBE_MAP_ARRAY_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9009, .hex);
pub const GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x900A, .hex);
pub const GL_SAMPLER_CUBE_MAP_ARRAY_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x900C, .hex);
pub const GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x900D, .hex);
pub const GL_INT_SAMPLER_CUBE_MAP_ARRAY_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x900E, .hex);
pub const GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x900F, .hex);
pub const GL_IMAGE_CUBE_MAP_ARRAY_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9054, .hex);
pub const GL_INT_IMAGE_CUBE_MAP_ARRAY_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x905F, .hex);
pub const GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x906A, .hex);
pub const GL_OES_texture_float = @as(c_int, 1);
pub const GL_OES_texture_float_linear = @as(c_int, 1);
pub const GL_OES_texture_half_float = @as(c_int, 1);
pub const GL_HALF_FLOAT_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D61, .hex);
pub const GL_OES_texture_half_float_linear = @as(c_int, 1);
pub const GL_OES_texture_npot = @as(c_int, 1);
pub const GL_OES_texture_stencil8 = @as(c_int, 1);
pub const GL_STENCIL_INDEX_OES = @as(c_int, 0x1901);
pub const GL_STENCIL_INDEX8_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D48, .hex);
pub const GL_OES_texture_storage_multisample_2d_array = @as(c_int, 1);
pub const GL_TEXTURE_2D_MULTISAMPLE_ARRAY_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9102, .hex);
pub const GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9105, .hex);
pub const GL_SAMPLER_2D_MULTISAMPLE_ARRAY_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x910B, .hex);
pub const GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x910C, .hex);
pub const GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x910D, .hex);
pub const GL_OES_texture_view = @as(c_int, 1);
pub const GL_TEXTURE_VIEW_MIN_LEVEL_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82DB, .hex);
pub const GL_TEXTURE_VIEW_NUM_LEVELS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82DC, .hex);
pub const GL_TEXTURE_VIEW_MIN_LAYER_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82DD, .hex);
pub const GL_TEXTURE_VIEW_NUM_LAYERS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82DE, .hex);
pub const GL_TEXTURE_IMMUTABLE_LEVELS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82DF, .hex);
pub const GL_OES_vertex_array_object = @as(c_int, 1);
pub const GL_VERTEX_ARRAY_BINDING_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85B5, .hex);
pub const GL_OES_vertex_half_float = @as(c_int, 1);
pub const GL_OES_vertex_type_10_10_10_2 = @as(c_int, 1);
pub const GL_UNSIGNED_INT_10_10_10_2_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DF6, .hex);
pub const GL_INT_10_10_10_2_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DF7, .hex);
pub const GL_OES_viewport_array = @as(c_int, 1);
pub const GL_MAX_VIEWPORTS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x825B, .hex);
pub const GL_VIEWPORT_SUBPIXEL_BITS_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x825C, .hex);
pub const GL_VIEWPORT_BOUNDS_RANGE_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x825D, .hex);
pub const GL_VIEWPORT_INDEX_PROVOKING_VERTEX_OES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x825F, .hex);
pub const GL_AMD_compressed_3DC_texture = @as(c_int, 1);
pub const GL_3DC_X_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87F9, .hex);
pub const GL_3DC_XY_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87FA, .hex);
pub const GL_AMD_compressed_ATC_texture = @as(c_int, 1);
pub const GL_ATC_RGB_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C92, .hex);
pub const GL_ATC_RGBA_EXPLICIT_ALPHA_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C93, .hex);
pub const GL_ATC_RGBA_INTERPOLATED_ALPHA_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x87EE, .hex);
pub const GL_AMD_framebuffer_multisample_advanced = @as(c_int, 1);
pub const GL_RENDERBUFFER_STORAGE_SAMPLES_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91B2, .hex);
pub const GL_MAX_COLOR_FRAMEBUFFER_SAMPLES_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91B3, .hex);
pub const GL_MAX_COLOR_FRAMEBUFFER_STORAGE_SAMPLES_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91B4, .hex);
pub const GL_MAX_DEPTH_STENCIL_FRAMEBUFFER_SAMPLES_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91B5, .hex);
pub const GL_NUM_SUPPORTED_MULTISAMPLE_MODES_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91B6, .hex);
pub const GL_SUPPORTED_MULTISAMPLE_MODES_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91B7, .hex);
pub const GL_AMD_performance_monitor = @as(c_int, 1);
pub const GL_COUNTER_TYPE_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8BC0, .hex);
pub const GL_COUNTER_RANGE_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8BC1, .hex);
pub const GL_UNSIGNED_INT64_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8BC2, .hex);
pub const GL_PERCENTAGE_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8BC3, .hex);
pub const GL_PERFMON_RESULT_AVAILABLE_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8BC4, .hex);
pub const GL_PERFMON_RESULT_SIZE_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8BC5, .hex);
pub const GL_PERFMON_RESULT_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8BC6, .hex);
pub const GL_AMD_program_binary_Z400 = @as(c_int, 1);
pub const GL_Z400_BINARY_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8740, .hex);
pub const GL_ANDROID_extension_pack_es31a = @as(c_int, 1);
pub const GL_ANGLE_depth_texture = @as(c_int, 1);
pub const GL_ANGLE_framebuffer_blit = @as(c_int, 1);
pub const GL_READ_FRAMEBUFFER_ANGLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CA8, .hex);
pub const GL_DRAW_FRAMEBUFFER_ANGLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CA9, .hex);
pub const GL_DRAW_FRAMEBUFFER_BINDING_ANGLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CA6, .hex);
pub const GL_READ_FRAMEBUFFER_BINDING_ANGLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CAA, .hex);
pub const GL_ANGLE_framebuffer_multisample = @as(c_int, 1);
pub const GL_RENDERBUFFER_SAMPLES_ANGLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CAB, .hex);
pub const GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_ANGLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D56, .hex);
pub const GL_MAX_SAMPLES_ANGLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D57, .hex);
pub const GL_ANGLE_instanced_arrays = @as(c_int, 1);
pub const GL_VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88FE, .hex);
pub const GL_ANGLE_pack_reverse_row_order = @as(c_int, 1);
pub const GL_PACK_REVERSE_ROW_ORDER_ANGLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93A4, .hex);
pub const GL_ANGLE_program_binary = @as(c_int, 1);
pub const GL_PROGRAM_BINARY_ANGLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93A6, .hex);
pub const GL_ANGLE_texture_compression_dxt3 = @as(c_int, 1);
pub const GL_COMPRESSED_RGBA_S3TC_DXT3_ANGLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83F2, .hex);
pub const GL_ANGLE_texture_compression_dxt5 = @as(c_int, 1);
pub const GL_COMPRESSED_RGBA_S3TC_DXT5_ANGLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83F3, .hex);
pub const GL_ANGLE_texture_usage = @as(c_int, 1);
pub const GL_TEXTURE_USAGE_ANGLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93A2, .hex);
pub const GL_FRAMEBUFFER_ATTACHMENT_ANGLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93A3, .hex);
pub const GL_ANGLE_translated_shader_source = @as(c_int, 1);
pub const GL_TRANSLATED_SHADER_SOURCE_LENGTH_ANGLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93A0, .hex);
pub const GL_APPLE_clip_distance = @as(c_int, 1);
pub const GL_MAX_CLIP_DISTANCES_APPLE = @as(c_int, 0x0D32);
pub const GL_CLIP_DISTANCE0_APPLE = @as(c_int, 0x3000);
pub const GL_CLIP_DISTANCE1_APPLE = @as(c_int, 0x3001);
pub const GL_CLIP_DISTANCE2_APPLE = @as(c_int, 0x3002);
pub const GL_CLIP_DISTANCE3_APPLE = @as(c_int, 0x3003);
pub const GL_CLIP_DISTANCE4_APPLE = @as(c_int, 0x3004);
pub const GL_CLIP_DISTANCE5_APPLE = @as(c_int, 0x3005);
pub const GL_CLIP_DISTANCE6_APPLE = @as(c_int, 0x3006);
pub const GL_CLIP_DISTANCE7_APPLE = @as(c_int, 0x3007);
pub const GL_APPLE_color_buffer_packed_float = @as(c_int, 1);
pub const GL_APPLE_copy_texture_levels = @as(c_int, 1);
pub const GL_APPLE_framebuffer_multisample = @as(c_int, 1);
pub const GL_RENDERBUFFER_SAMPLES_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CAB, .hex);
pub const GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D56, .hex);
pub const GL_MAX_SAMPLES_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D57, .hex);
pub const GL_READ_FRAMEBUFFER_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CA8, .hex);
pub const GL_DRAW_FRAMEBUFFER_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CA9, .hex);
pub const GL_DRAW_FRAMEBUFFER_BINDING_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CA6, .hex);
pub const GL_READ_FRAMEBUFFER_BINDING_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CAA, .hex);
pub const GL_APPLE_rgb_422 = @as(c_int, 1);
pub const GL_RGB_422_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A1F, .hex);
pub const GL_UNSIGNED_SHORT_8_8_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85BA, .hex);
pub const GL_UNSIGNED_SHORT_8_8_REV_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x85BB, .hex);
pub const GL_RGB_RAW_422_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A51, .hex);
pub const GL_APPLE_sync = @as(c_int, 1);
pub const GL_SYNC_OBJECT_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A53, .hex);
pub const GL_MAX_SERVER_WAIT_TIMEOUT_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9111, .hex);
pub const GL_OBJECT_TYPE_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9112, .hex);
pub const GL_SYNC_CONDITION_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9113, .hex);
pub const GL_SYNC_STATUS_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9114, .hex);
pub const GL_SYNC_FLAGS_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9115, .hex);
pub const GL_SYNC_FENCE_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9116, .hex);
pub const GL_SYNC_GPU_COMMANDS_COMPLETE_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9117, .hex);
pub const GL_UNSIGNALED_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9118, .hex);
pub const GL_SIGNALED_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9119, .hex);
pub const GL_ALREADY_SIGNALED_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x911A, .hex);
pub const GL_TIMEOUT_EXPIRED_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x911B, .hex);
pub const GL_CONDITION_SATISFIED_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x911C, .hex);
pub const GL_WAIT_FAILED_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x911D, .hex);
pub const GL_SYNC_FLUSH_COMMANDS_BIT_APPLE = @as(c_int, 0x00000001);
pub const GL_TIMEOUT_IGNORED_APPLE = @as(c_ulonglong, 0xFFFFFFFFFFFFFFFF);
pub const GL_APPLE_texture_format_BGRA8888 = @as(c_int, 1);
pub const GL_BGRA_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80E1, .hex);
pub const GL_BGRA8_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93A1, .hex);
pub const GL_APPLE_texture_max_level = @as(c_int, 1);
pub const GL_TEXTURE_MAX_LEVEL_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x813D, .hex);
pub const GL_APPLE_texture_packed_float = @as(c_int, 1);
pub const GL_UNSIGNED_INT_10F_11F_11F_REV_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C3B, .hex);
pub const GL_UNSIGNED_INT_5_9_9_9_REV_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C3E, .hex);
pub const GL_R11F_G11F_B10F_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C3A, .hex);
pub const GL_RGB9_E5_APPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C3D, .hex);
pub const GL_ARM_mali_program_binary = @as(c_int, 1);
pub const GL_MALI_PROGRAM_BINARY_ARM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F61, .hex);
pub const GL_ARM_mali_shader_binary = @as(c_int, 1);
pub const GL_MALI_SHADER_BINARY_ARM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F60, .hex);
pub const GL_ARM_rgba8 = @as(c_int, 1);
pub const GL_ARM_shader_framebuffer_fetch = @as(c_int, 1);
pub const GL_FETCH_PER_SAMPLE_ARM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F65, .hex);
pub const GL_FRAGMENT_SHADER_FRAMEBUFFER_FETCH_MRT_ARM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F66, .hex);
pub const GL_ARM_shader_framebuffer_fetch_depth_stencil = @as(c_int, 1);
pub const GL_ARM_texture_unnormalized_coordinates = @as(c_int, 1);
pub const GL_TEXTURE_UNNORMALIZED_COORDINATES_ARM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F6A, .hex);
pub const GL_DMP_program_binary = @as(c_int, 1);
pub const GL_SMAPHS30_PROGRAM_BINARY_DMP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9251, .hex);
pub const GL_SMAPHS_PROGRAM_BINARY_DMP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9252, .hex);
pub const GL_DMP_PROGRAM_BINARY_DMP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9253, .hex);
pub const GL_DMP_shader_binary = @as(c_int, 1);
pub const GL_SHADER_BINARY_DMP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9250, .hex);
pub const GL_EXT_EGL_image_array = @as(c_int, 1);
pub const GL_EXT_EGL_image_storage = @as(c_int, 1);
pub const GL_EXT_EGL_image_storage_compression = @as(c_int, 1);
pub const GL_SURFACE_COMPRESSION_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x96C0, .hex);
pub const GL_SURFACE_COMPRESSION_FIXED_RATE_NONE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x96C1, .hex);
pub const GL_SURFACE_COMPRESSION_FIXED_RATE_DEFAULT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x96C2, .hex);
pub const GL_EXT_YUV_target = @as(c_int, 1);
pub const GL_SAMPLER_EXTERNAL_2D_Y2Y_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8BE7, .hex);
pub const GL_EXT_base_instance = @as(c_int, 1);
pub const GL_EXT_blend_func_extended = @as(c_int, 1);
pub const GL_SRC1_COLOR_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88F9, .hex);
pub const GL_SRC1_ALPHA_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8589, .hex);
pub const GL_ONE_MINUS_SRC1_COLOR_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88FA, .hex);
pub const GL_ONE_MINUS_SRC1_ALPHA_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88FB, .hex);
pub const GL_SRC_ALPHA_SATURATE_EXT = @as(c_int, 0x0308);
pub const GL_LOCATION_INDEX_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x930F, .hex);
pub const GL_MAX_DUAL_SOURCE_DRAW_BUFFERS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88FC, .hex);
pub const GL_EXT_blend_minmax = @as(c_int, 1);
pub const GL_MIN_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8007, .hex);
pub const GL_MAX_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8008, .hex);
pub const GL_EXT_buffer_storage = @as(c_int, 1);
pub const GL_MAP_READ_BIT = @as(c_int, 0x0001);
pub const GL_MAP_WRITE_BIT = @as(c_int, 0x0002);
pub const GL_MAP_PERSISTENT_BIT_EXT = @as(c_int, 0x0040);
pub const GL_MAP_COHERENT_BIT_EXT = @as(c_int, 0x0080);
pub const GL_DYNAMIC_STORAGE_BIT_EXT = @as(c_int, 0x0100);
pub const GL_CLIENT_STORAGE_BIT_EXT = @as(c_int, 0x0200);
pub const GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT_EXT = @as(c_int, 0x00004000);
pub const GL_BUFFER_IMMUTABLE_STORAGE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x821F, .hex);
pub const GL_BUFFER_STORAGE_FLAGS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8220, .hex);
pub const GL_EXT_clear_texture = @as(c_int, 1);
pub const GL_EXT_clip_control = @as(c_int, 1);
pub const GL_LOWER_LEFT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CA1, .hex);
pub const GL_UPPER_LEFT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CA2, .hex);
pub const GL_NEGATIVE_ONE_TO_ONE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x935E, .hex);
pub const GL_ZERO_TO_ONE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x935F, .hex);
pub const GL_CLIP_ORIGIN_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x935C, .hex);
pub const GL_CLIP_DEPTH_MODE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x935D, .hex);
pub const GL_EXT_clip_cull_distance = @as(c_int, 1);
pub const GL_MAX_CLIP_DISTANCES_EXT = @as(c_int, 0x0D32);
pub const GL_MAX_CULL_DISTANCES_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82F9, .hex);
pub const GL_MAX_COMBINED_CLIP_AND_CULL_DISTANCES_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82FA, .hex);
pub const GL_CLIP_DISTANCE0_EXT = @as(c_int, 0x3000);
pub const GL_CLIP_DISTANCE1_EXT = @as(c_int, 0x3001);
pub const GL_CLIP_DISTANCE2_EXT = @as(c_int, 0x3002);
pub const GL_CLIP_DISTANCE3_EXT = @as(c_int, 0x3003);
pub const GL_CLIP_DISTANCE4_EXT = @as(c_int, 0x3004);
pub const GL_CLIP_DISTANCE5_EXT = @as(c_int, 0x3005);
pub const GL_CLIP_DISTANCE6_EXT = @as(c_int, 0x3006);
pub const GL_CLIP_DISTANCE7_EXT = @as(c_int, 0x3007);
pub const GL_EXT_color_buffer_float = @as(c_int, 1);
pub const GL_EXT_color_buffer_half_float = @as(c_int, 1);
pub const GL_RGBA16F_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x881A, .hex);
pub const GL_RGB16F_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x881B, .hex);
pub const GL_RG16F_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x822F, .hex);
pub const GL_R16F_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x822D, .hex);
pub const GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8211, .hex);
pub const GL_UNSIGNED_NORMALIZED_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C17, .hex);
pub const GL_EXT_conservative_depth = @as(c_int, 1);
pub const GL_EXT_copy_image = @as(c_int, 1);
pub const GL_EXT_debug_label = @as(c_int, 1);
pub const GL_PROGRAM_PIPELINE_OBJECT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A4F, .hex);
pub const GL_PROGRAM_OBJECT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B40, .hex);
pub const GL_SHADER_OBJECT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B48, .hex);
pub const GL_BUFFER_OBJECT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9151, .hex);
pub const GL_QUERY_OBJECT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9153, .hex);
pub const GL_VERTEX_ARRAY_OBJECT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9154, .hex);
pub const GL_TRANSFORM_FEEDBACK = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E22, .hex);
pub const GL_EXT_debug_marker = @as(c_int, 1);
pub const GL_EXT_depth_clamp = @as(c_int, 1);
pub const GL_DEPTH_CLAMP_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x864F, .hex);
pub const GL_EXT_discard_framebuffer = @as(c_int, 1);
pub const GL_COLOR_EXT = @as(c_int, 0x1800);
pub const GL_DEPTH_EXT = @as(c_int, 0x1801);
pub const GL_STENCIL_EXT = @as(c_int, 0x1802);
pub const GL_EXT_disjoint_timer_query = @as(c_int, 1);
pub const GL_QUERY_COUNTER_BITS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8864, .hex);
pub const GL_CURRENT_QUERY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8865, .hex);
pub const GL_QUERY_RESULT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8866, .hex);
pub const GL_QUERY_RESULT_AVAILABLE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8867, .hex);
pub const GL_TIME_ELAPSED_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88BF, .hex);
pub const GL_TIMESTAMP_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E28, .hex);
pub const GL_GPU_DISJOINT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FBB, .hex);
pub const GL_EXT_draw_buffers = @as(c_int, 1);
pub const GL_MAX_COLOR_ATTACHMENTS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CDF, .hex);
pub const GL_MAX_DRAW_BUFFERS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8824, .hex);
pub const GL_DRAW_BUFFER0_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8825, .hex);
pub const GL_DRAW_BUFFER1_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8826, .hex);
pub const GL_DRAW_BUFFER2_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8827, .hex);
pub const GL_DRAW_BUFFER3_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8828, .hex);
pub const GL_DRAW_BUFFER4_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8829, .hex);
pub const GL_DRAW_BUFFER5_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x882A, .hex);
pub const GL_DRAW_BUFFER6_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x882B, .hex);
pub const GL_DRAW_BUFFER7_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x882C, .hex);
pub const GL_DRAW_BUFFER8_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x882D, .hex);
pub const GL_DRAW_BUFFER9_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x882E, .hex);
pub const GL_DRAW_BUFFER10_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x882F, .hex);
pub const GL_DRAW_BUFFER11_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8830, .hex);
pub const GL_DRAW_BUFFER12_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8831, .hex);
pub const GL_DRAW_BUFFER13_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8832, .hex);
pub const GL_DRAW_BUFFER14_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8833, .hex);
pub const GL_DRAW_BUFFER15_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8834, .hex);
pub const GL_COLOR_ATTACHMENT0_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE0, .hex);
pub const GL_COLOR_ATTACHMENT1_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE1, .hex);
pub const GL_COLOR_ATTACHMENT2_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE2, .hex);
pub const GL_COLOR_ATTACHMENT3_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE3, .hex);
pub const GL_COLOR_ATTACHMENT4_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE4, .hex);
pub const GL_COLOR_ATTACHMENT5_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE5, .hex);
pub const GL_COLOR_ATTACHMENT6_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE6, .hex);
pub const GL_COLOR_ATTACHMENT7_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE7, .hex);
pub const GL_COLOR_ATTACHMENT8_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE8, .hex);
pub const GL_COLOR_ATTACHMENT9_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE9, .hex);
pub const GL_COLOR_ATTACHMENT10_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CEA, .hex);
pub const GL_COLOR_ATTACHMENT11_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CEB, .hex);
pub const GL_COLOR_ATTACHMENT12_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CEC, .hex);
pub const GL_COLOR_ATTACHMENT13_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CED, .hex);
pub const GL_COLOR_ATTACHMENT14_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CEE, .hex);
pub const GL_COLOR_ATTACHMENT15_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CEF, .hex);
pub const GL_EXT_draw_buffers_indexed = @as(c_int, 1);
pub const GL_EXT_draw_elements_base_vertex = @as(c_int, 1);
pub const GL_EXT_draw_instanced = @as(c_int, 1);
pub const GL_EXT_draw_transform_feedback = @as(c_int, 1);
pub const GL_EXT_external_buffer = @as(c_int, 1);
pub const GL_EXT_float_blend = @as(c_int, 1);
pub const GL_EXT_fragment_shading_rate = @as(c_int, 1);
pub const GL_SHADING_RATE_1X1_PIXELS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x96A6, .hex);
pub const GL_SHADING_RATE_1X2_PIXELS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x96A7, .hex);
pub const GL_SHADING_RATE_2X1_PIXELS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x96A8, .hex);
pub const GL_SHADING_RATE_2X2_PIXELS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x96A9, .hex);
pub const GL_SHADING_RATE_1X4_PIXELS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x96AA, .hex);
pub const GL_SHADING_RATE_4X1_PIXELS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x96AB, .hex);
pub const GL_SHADING_RATE_4X2_PIXELS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x96AC, .hex);
pub const GL_SHADING_RATE_2X4_PIXELS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x96AD, .hex);
pub const GL_SHADING_RATE_4X4_PIXELS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x96AE, .hex);
pub const GL_SHADING_RATE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x96D0, .hex);
pub const GL_SHADING_RATE_ATTACHMENT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x96D1, .hex);
pub const GL_FRAGMENT_SHADING_RATE_COMBINER_OP_KEEP_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x96D2, .hex);
pub const GL_FRAGMENT_SHADING_RATE_COMBINER_OP_REPLACE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x96D3, .hex);
pub const GL_FRAGMENT_SHADING_RATE_COMBINER_OP_MIN_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x96D4, .hex);
pub const GL_FRAGMENT_SHADING_RATE_COMBINER_OP_MAX_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x96D5, .hex);
pub const GL_FRAGMENT_SHADING_RATE_COMBINER_OP_MUL_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x96D6, .hex);
pub const GL_MIN_FRAGMENT_SHADING_RATE_ATTACHMENT_TEXEL_WIDTH_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x96D7, .hex);
pub const GL_MAX_FRAGMENT_SHADING_RATE_ATTACHMENT_TEXEL_WIDTH_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x96D8, .hex);
pub const GL_MIN_FRAGMENT_SHADING_RATE_ATTACHMENT_TEXEL_HEIGHT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x96D9, .hex);
pub const GL_MAX_FRAGMENT_SHADING_RATE_ATTACHMENT_TEXEL_HEIGHT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x96DA, .hex);
pub const GL_MAX_FRAGMENT_SHADING_RATE_ATTACHMENT_TEXEL_ASPECT_RATIO_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x96DB, .hex);
pub const GL_MAX_FRAGMENT_SHADING_RATE_ATTACHMENT_LAYERS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x96DC, .hex);
pub const GL_FRAGMENT_SHADING_RATE_WITH_SHADER_DEPTH_STENCIL_WRITES_SUPPORTED_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x96DD, .hex);
pub const GL_FRAGMENT_SHADING_RATE_WITH_SAMPLE_MASK_SUPPORTED_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x96DE, .hex);
pub const GL_FRAGMENT_SHADING_RATE_ATTACHMENT_WITH_DEFAULT_FRAMEBUFFER_SUPPORTED_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x96DF, .hex);
pub const GL_FRAGMENT_SHADING_RATE_NON_TRIVIAL_COMBINERS_SUPPORTED_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F6F, .hex);
pub const GL_EXT_geometry_point_size = @as(c_int, 1);
pub const GL_EXT_geometry_shader = @as(c_int, 1);
pub const GL_GEOMETRY_SHADER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DD9, .hex);
pub const GL_GEOMETRY_SHADER_BIT_EXT = @as(c_int, 0x00000004);
pub const GL_GEOMETRY_LINKED_VERTICES_OUT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8916, .hex);
pub const GL_GEOMETRY_LINKED_INPUT_TYPE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8917, .hex);
pub const GL_GEOMETRY_LINKED_OUTPUT_TYPE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8918, .hex);
pub const GL_GEOMETRY_SHADER_INVOCATIONS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x887F, .hex);
pub const GL_LAYER_PROVOKING_VERTEX_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x825E, .hex);
pub const GL_LINES_ADJACENCY_EXT = @as(c_int, 0x000A);
pub const GL_LINE_STRIP_ADJACENCY_EXT = @as(c_int, 0x000B);
pub const GL_TRIANGLES_ADJACENCY_EXT = @as(c_int, 0x000C);
pub const GL_TRIANGLE_STRIP_ADJACENCY_EXT = @as(c_int, 0x000D);
pub const GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DDF, .hex);
pub const GL_MAX_GEOMETRY_UNIFORM_BLOCKS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A2C, .hex);
pub const GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A32, .hex);
pub const GL_MAX_GEOMETRY_INPUT_COMPONENTS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9123, .hex);
pub const GL_MAX_GEOMETRY_OUTPUT_COMPONENTS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9124, .hex);
pub const GL_MAX_GEOMETRY_OUTPUT_VERTICES_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DE0, .hex);
pub const GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DE1, .hex);
pub const GL_MAX_GEOMETRY_SHADER_INVOCATIONS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E5A, .hex);
pub const GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C29, .hex);
pub const GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92CF, .hex);
pub const GL_MAX_GEOMETRY_ATOMIC_COUNTERS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92D5, .hex);
pub const GL_MAX_GEOMETRY_IMAGE_UNIFORMS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90CD, .hex);
pub const GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90D7, .hex);
pub const GL_FIRST_VERTEX_CONVENTION_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E4D, .hex);
pub const GL_LAST_VERTEX_CONVENTION_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E4E, .hex);
pub const GL_UNDEFINED_VERTEX_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8260, .hex);
pub const GL_PRIMITIVES_GENERATED_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C87, .hex);
pub const GL_FRAMEBUFFER_DEFAULT_LAYERS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9312, .hex);
pub const GL_MAX_FRAMEBUFFER_LAYERS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9317, .hex);
pub const GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DA8, .hex);
pub const GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DA7, .hex);
pub const GL_REFERENCED_BY_GEOMETRY_SHADER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9309, .hex);
pub const GL_EXT_gpu_shader5 = @as(c_int, 1);
pub const GL_EXT_instanced_arrays = @as(c_int, 1);
pub const GL_VERTEX_ATTRIB_ARRAY_DIVISOR_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88FE, .hex);
pub const GL_EXT_map_buffer_range = @as(c_int, 1);
pub const GL_MAP_READ_BIT_EXT = @as(c_int, 0x0001);
pub const GL_MAP_WRITE_BIT_EXT = @as(c_int, 0x0002);
pub const GL_MAP_INVALIDATE_RANGE_BIT_EXT = @as(c_int, 0x0004);
pub const GL_MAP_INVALIDATE_BUFFER_BIT_EXT = @as(c_int, 0x0008);
pub const GL_MAP_FLUSH_EXPLICIT_BIT_EXT = @as(c_int, 0x0010);
pub const GL_MAP_UNSYNCHRONIZED_BIT_EXT = @as(c_int, 0x0020);
pub const GL_EXT_memory_object = @as(c_int, 1);
pub const GL_TEXTURE_TILING_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9580, .hex);
pub const GL_DEDICATED_MEMORY_OBJECT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9581, .hex);
pub const GL_PROTECTED_MEMORY_OBJECT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x959B, .hex);
pub const GL_NUM_TILING_TYPES_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9582, .hex);
pub const GL_TILING_TYPES_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9583, .hex);
pub const GL_OPTIMAL_TILING_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9584, .hex);
pub const GL_LINEAR_TILING_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9585, .hex);
pub const GL_NUM_DEVICE_UUIDS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9596, .hex);
pub const GL_DEVICE_UUID_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9597, .hex);
pub const GL_DRIVER_UUID_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9598, .hex);
pub const GL_UUID_SIZE_EXT = @as(c_int, 16);
pub const GL_EXT_memory_object_fd = @as(c_int, 1);
pub const GL_HANDLE_TYPE_OPAQUE_FD_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9586, .hex);
pub const GL_EXT_memory_object_win32 = @as(c_int, 1);
pub const GL_HANDLE_TYPE_OPAQUE_WIN32_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9587, .hex);
pub const GL_HANDLE_TYPE_OPAQUE_WIN32_KMT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9588, .hex);
pub const GL_DEVICE_LUID_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9599, .hex);
pub const GL_DEVICE_NODE_MASK_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x959A, .hex);
pub const GL_LUID_SIZE_EXT = @as(c_int, 8);
pub const GL_HANDLE_TYPE_D3D12_TILEPOOL_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9589, .hex);
pub const GL_HANDLE_TYPE_D3D12_RESOURCE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x958A, .hex);
pub const GL_HANDLE_TYPE_D3D11_IMAGE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x958B, .hex);
pub const GL_HANDLE_TYPE_D3D11_IMAGE_KMT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x958C, .hex);
pub const GL_EXT_multi_draw_arrays = @as(c_int, 1);
pub const GL_EXT_multi_draw_indirect = @as(c_int, 1);
pub const GL_EXT_multisampled_compatibility = @as(c_int, 1);
pub const GL_MULTISAMPLE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x809D, .hex);
pub const GL_SAMPLE_ALPHA_TO_ONE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x809F, .hex);
pub const GL_EXT_multisampled_render_to_texture = @as(c_int, 1);
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_SAMPLES_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D6C, .hex);
pub const GL_RENDERBUFFER_SAMPLES_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CAB, .hex);
pub const GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D56, .hex);
pub const GL_MAX_SAMPLES_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D57, .hex);
pub const GL_EXT_multisampled_render_to_texture2 = @as(c_int, 1);
pub const GL_EXT_multiview_draw_buffers = @as(c_int, 1);
pub const GL_COLOR_ATTACHMENT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90F0, .hex);
pub const GL_MULTIVIEW_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90F1, .hex);
pub const GL_DRAW_BUFFER_EXT = @as(c_int, 0x0C01);
pub const GL_READ_BUFFER_EXT = @as(c_int, 0x0C02);
pub const GL_MAX_MULTIVIEW_BUFFERS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90F2, .hex);
pub const GL_EXT_multiview_tessellation_geometry_shader = @as(c_int, 1);
pub const GL_EXT_multiview_texture_multisample = @as(c_int, 1);
pub const GL_EXT_multiview_timer_query = @as(c_int, 1);
pub const GL_EXT_occlusion_query_boolean = @as(c_int, 1);
pub const GL_ANY_SAMPLES_PASSED_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C2F, .hex);
pub const GL_ANY_SAMPLES_PASSED_CONSERVATIVE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D6A, .hex);
pub const GL_EXT_polygon_offset_clamp = @as(c_int, 1);
pub const GL_POLYGON_OFFSET_CLAMP_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E1B, .hex);
pub const GL_EXT_post_depth_coverage = @as(c_int, 1);
pub const GL_EXT_primitive_bounding_box = @as(c_int, 1);
pub const GL_PRIMITIVE_BOUNDING_BOX_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92BE, .hex);
pub const GL_EXT_protected_textures = @as(c_int, 1);
pub const GL_CONTEXT_FLAG_PROTECTED_CONTENT_BIT_EXT = @as(c_int, 0x00000010);
pub const GL_TEXTURE_PROTECTED_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8BFA, .hex);
pub const GL_EXT_pvrtc_sRGB = @as(c_int, 1);
pub const GL_COMPRESSED_SRGB_PVRTC_2BPPV1_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A54, .hex);
pub const GL_COMPRESSED_SRGB_PVRTC_4BPPV1_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A55, .hex);
pub const GL_COMPRESSED_SRGB_ALPHA_PVRTC_2BPPV1_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A56, .hex);
pub const GL_COMPRESSED_SRGB_ALPHA_PVRTC_4BPPV1_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A57, .hex);
pub const GL_COMPRESSED_SRGB_ALPHA_PVRTC_2BPPV2_IMG = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93F0, .hex);
pub const GL_COMPRESSED_SRGB_ALPHA_PVRTC_4BPPV2_IMG = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x93F1, .hex);
pub const GL_EXT_raster_multisample = @as(c_int, 1);
pub const GL_RASTER_MULTISAMPLE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9327, .hex);
pub const GL_RASTER_SAMPLES_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9328, .hex);
pub const GL_MAX_RASTER_SAMPLES_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9329, .hex);
pub const GL_RASTER_FIXED_SAMPLE_LOCATIONS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x932A, .hex);
pub const GL_MULTISAMPLE_RASTERIZATION_ALLOWED_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x932B, .hex);
pub const GL_EFFECTIVE_RASTER_SAMPLES_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x932C, .hex);
pub const GL_EXT_read_format_bgra = @as(c_int, 1);
pub const GL_UNSIGNED_SHORT_4_4_4_4_REV_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8365, .hex);
pub const GL_UNSIGNED_SHORT_1_5_5_5_REV_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8366, .hex);
pub const GL_EXT_render_snorm = @as(c_int, 1);
pub const GL_R8_SNORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F94, .hex);
pub const GL_RG8_SNORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F95, .hex);
pub const GL_RGBA8_SNORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F97, .hex);
pub const GL_R16_SNORM_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F98, .hex);
pub const GL_RG16_SNORM_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F99, .hex);
pub const GL_RGBA16_SNORM_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F9B, .hex);
pub const GL_EXT_robustness = @as(c_int, 1);
pub const GL_GUILTY_CONTEXT_RESET_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8253, .hex);
pub const GL_INNOCENT_CONTEXT_RESET_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8254, .hex);
pub const GL_UNKNOWN_CONTEXT_RESET_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8255, .hex);
pub const GL_CONTEXT_ROBUST_ACCESS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90F3, .hex);
pub const GL_RESET_NOTIFICATION_STRATEGY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8256, .hex);
pub const GL_LOSE_CONTEXT_ON_RESET_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8252, .hex);
pub const GL_NO_RESET_NOTIFICATION_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8261, .hex);
pub const GL_EXT_sRGB = @as(c_int, 1);
pub const GL_SRGB_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C40, .hex);
pub const GL_SRGB_ALPHA_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C42, .hex);
pub const GL_SRGB8_ALPHA8_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C43, .hex);
pub const GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8210, .hex);
pub const GL_EXT_sRGB_write_control = @as(c_int, 1);
pub const GL_FRAMEBUFFER_SRGB_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DB9, .hex);
pub const GL_EXT_semaphore = @as(c_int, 1);
pub const GL_LAYOUT_GENERAL_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x958D, .hex);
pub const GL_LAYOUT_COLOR_ATTACHMENT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x958E, .hex);
pub const GL_LAYOUT_DEPTH_STENCIL_ATTACHMENT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x958F, .hex);
pub const GL_LAYOUT_DEPTH_STENCIL_READ_ONLY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9590, .hex);
pub const GL_LAYOUT_SHADER_READ_ONLY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9591, .hex);
pub const GL_LAYOUT_TRANSFER_SRC_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9592, .hex);
pub const GL_LAYOUT_TRANSFER_DST_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9593, .hex);
pub const GL_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9530, .hex);
pub const GL_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9531, .hex);
pub const GL_EXT_semaphore_fd = @as(c_int, 1);
pub const GL_EXT_semaphore_win32 = @as(c_int, 1);
pub const GL_HANDLE_TYPE_D3D12_FENCE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9594, .hex);
pub const GL_D3D12_FENCE_VALUE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9595, .hex);
pub const GL_EXT_separate_depth_stencil = @as(c_int, 1);
pub const GL_EXT_separate_shader_objects = @as(c_int, 1);
pub const GL_ACTIVE_PROGRAM_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8259, .hex);
pub const GL_VERTEX_SHADER_BIT_EXT = @as(c_int, 0x00000001);
pub const GL_FRAGMENT_SHADER_BIT_EXT = @as(c_int, 0x00000002);
pub const GL_ALL_SHADER_BITS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFFFFFFF, .hex);
pub const GL_PROGRAM_SEPARABLE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8258, .hex);
pub const GL_PROGRAM_PIPELINE_BINDING_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x825A, .hex);
pub const GL_EXT_shader_framebuffer_fetch = @as(c_int, 1);
pub const GL_FRAGMENT_SHADER_DISCARDS_SAMPLES_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A52, .hex);
pub const GL_EXT_shader_framebuffer_fetch_non_coherent = @as(c_int, 1);
pub const GL_EXT_shader_group_vote = @as(c_int, 1);
pub const GL_EXT_shader_implicit_conversions = @as(c_int, 1);
pub const GL_EXT_shader_integer_mix = @as(c_int, 1);
pub const GL_EXT_shader_io_blocks = @as(c_int, 1);
pub const GL_EXT_shader_non_constant_global_initializers = @as(c_int, 1);
pub const GL_EXT_shader_pixel_local_storage = @as(c_int, 1);
pub const GL_MAX_SHADER_PIXEL_LOCAL_STORAGE_FAST_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F63, .hex);
pub const GL_MAX_SHADER_PIXEL_LOCAL_STORAGE_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F67, .hex);
pub const GL_SHADER_PIXEL_LOCAL_STORAGE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F64, .hex);
pub const GL_EXT_shader_pixel_local_storage2 = @as(c_int, 1);
pub const GL_MAX_SHADER_COMBINED_LOCAL_STORAGE_FAST_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9650, .hex);
pub const GL_MAX_SHADER_COMBINED_LOCAL_STORAGE_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9651, .hex);
pub const GL_FRAMEBUFFER_INCOMPLETE_INSUFFICIENT_SHADER_COMBINED_LOCAL_STORAGE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9652, .hex);
pub const GL_EXT_shader_samples_identical = @as(c_int, 1);
pub const GL_EXT_shader_texture_lod = @as(c_int, 1);
pub const GL_EXT_shadow_samplers = @as(c_int, 1);
pub const GL_TEXTURE_COMPARE_MODE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x884C, .hex);
pub const GL_TEXTURE_COMPARE_FUNC_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x884D, .hex);
pub const GL_COMPARE_REF_TO_TEXTURE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x884E, .hex);
pub const GL_SAMPLER_2D_SHADOW_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B62, .hex);
pub const GL_EXT_sparse_texture = @as(c_int, 1);
pub const GL_TEXTURE_SPARSE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91A6, .hex);
pub const GL_VIRTUAL_PAGE_SIZE_INDEX_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91A7, .hex);
pub const GL_NUM_SPARSE_LEVELS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91AA, .hex);
pub const GL_NUM_VIRTUAL_PAGE_SIZES_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91A8, .hex);
pub const GL_VIRTUAL_PAGE_SIZE_X_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9195, .hex);
pub const GL_VIRTUAL_PAGE_SIZE_Y_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9196, .hex);
pub const GL_VIRTUAL_PAGE_SIZE_Z_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9197, .hex);
pub const GL_TEXTURE_2D_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C1A, .hex);
pub const GL_TEXTURE_3D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x806F, .hex);
pub const GL_MAX_SPARSE_TEXTURE_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9198, .hex);
pub const GL_MAX_SPARSE_3D_TEXTURE_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9199, .hex);
pub const GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x919A, .hex);
pub const GL_SPARSE_TEXTURE_FULL_ARRAY_CUBE_MIPMAPS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x91A9, .hex);
pub const GL_EXT_sparse_texture2 = @as(c_int, 1);
pub const GL_EXT_tessellation_point_size = @as(c_int, 1);
pub const GL_EXT_tessellation_shader = @as(c_int, 1);
pub const GL_PATCHES_EXT = @as(c_int, 0x000E);
pub const GL_PATCH_VERTICES_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E72, .hex);
pub const GL_TESS_CONTROL_OUTPUT_VERTICES_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E75, .hex);
pub const GL_TESS_GEN_MODE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E76, .hex);
pub const GL_TESS_GEN_SPACING_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E77, .hex);
pub const GL_TESS_GEN_VERTEX_ORDER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E78, .hex);
pub const GL_TESS_GEN_POINT_MODE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E79, .hex);
pub const GL_ISOLINES_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E7A, .hex);
pub const GL_QUADS_EXT = @as(c_int, 0x0007);
pub const GL_FRACTIONAL_ODD_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E7B, .hex);
pub const GL_FRACTIONAL_EVEN_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E7C, .hex);
pub const GL_MAX_PATCH_VERTICES_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E7D, .hex);
pub const GL_MAX_TESS_GEN_LEVEL_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E7E, .hex);
pub const GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E7F, .hex);
pub const GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E80, .hex);
pub const GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E81, .hex);
pub const GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E82, .hex);
pub const GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E83, .hex);
pub const GL_MAX_TESS_PATCH_COMPONENTS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E84, .hex);
pub const GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E85, .hex);
pub const GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E86, .hex);
pub const GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E89, .hex);
pub const GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E8A, .hex);
pub const GL_MAX_TESS_CONTROL_INPUT_COMPONENTS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x886C, .hex);
pub const GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x886D, .hex);
pub const GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E1E, .hex);
pub const GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E1F, .hex);
pub const GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92CD, .hex);
pub const GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92CE, .hex);
pub const GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92D3, .hex);
pub const GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92D4, .hex);
pub const GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90CB, .hex);
pub const GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90CC, .hex);
pub const GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90D8, .hex);
pub const GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90D9, .hex);
pub const GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8221, .hex);
pub const GL_IS_PER_PATCH_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92E7, .hex);
pub const GL_REFERENCED_BY_TESS_CONTROL_SHADER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9307, .hex);
pub const GL_REFERENCED_BY_TESS_EVALUATION_SHADER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9308, .hex);
pub const GL_TESS_CONTROL_SHADER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E88, .hex);
pub const GL_TESS_EVALUATION_SHADER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E87, .hex);
pub const GL_TESS_CONTROL_SHADER_BIT_EXT = @as(c_int, 0x00000008);
pub const GL_TESS_EVALUATION_SHADER_BIT_EXT = @as(c_int, 0x00000010);
pub const GL_EXT_texture_border_clamp = @as(c_int, 1);
pub const GL_TEXTURE_BORDER_COLOR_EXT = @as(c_int, 0x1004);
pub const GL_CLAMP_TO_BORDER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x812D, .hex);
pub const GL_EXT_texture_buffer = @as(c_int, 1);
pub const GL_TEXTURE_BUFFER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C2A, .hex);
pub const GL_TEXTURE_BUFFER_BINDING_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C2A, .hex);
pub const GL_MAX_TEXTURE_BUFFER_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C2B, .hex);
pub const GL_TEXTURE_BINDING_BUFFER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C2C, .hex);
pub const GL_TEXTURE_BUFFER_DATA_STORE_BINDING_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C2D, .hex);
pub const GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x919F, .hex);
pub const GL_SAMPLER_BUFFER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DC2, .hex);
pub const GL_INT_SAMPLER_BUFFER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DD0, .hex);
pub const GL_UNSIGNED_INT_SAMPLER_BUFFER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DD8, .hex);
pub const GL_IMAGE_BUFFER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9051, .hex);
pub const GL_INT_IMAGE_BUFFER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x905C, .hex);
pub const GL_UNSIGNED_INT_IMAGE_BUFFER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9067, .hex);
pub const GL_TEXTURE_BUFFER_OFFSET_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x919D, .hex);
pub const GL_TEXTURE_BUFFER_SIZE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x919E, .hex);
pub const GL_EXT_texture_compression_astc_decode_mode = @as(c_int, 1);
pub const GL_TEXTURE_ASTC_DECODE_PRECISION_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F69, .hex);
pub const GL_EXT_texture_compression_bptc = @as(c_int, 1);
pub const GL_COMPRESSED_RGBA_BPTC_UNORM_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E8C, .hex);
pub const GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E8D, .hex);
pub const GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E8E, .hex);
pub const GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E8F, .hex);
pub const GL_EXT_texture_compression_dxt1 = @as(c_int, 1);
pub const GL_COMPRESSED_RGB_S3TC_DXT1_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83F0, .hex);
pub const GL_COMPRESSED_RGBA_S3TC_DXT1_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83F1, .hex);
pub const GL_EXT_texture_compression_rgtc = @as(c_int, 1);
pub const GL_COMPRESSED_RED_RGTC1_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DBB, .hex);
pub const GL_COMPRESSED_SIGNED_RED_RGTC1_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DBC, .hex);
pub const GL_COMPRESSED_RED_GREEN_RGTC2_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DBD, .hex);
pub const GL_COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DBE, .hex);
pub const GL_EXT_texture_compression_s3tc = @as(c_int, 1);
pub const GL_COMPRESSED_RGBA_S3TC_DXT3_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83F2, .hex);
pub const GL_COMPRESSED_RGBA_S3TC_DXT5_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83F3, .hex);
pub const GL_EXT_texture_compression_s3tc_srgb = @as(c_int, 1);
pub const GL_COMPRESSED_SRGB_S3TC_DXT1_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C4C, .hex);
pub const GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C4D, .hex);
pub const GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C4E, .hex);
pub const GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C4F, .hex);
pub const GL_EXT_texture_cube_map_array = @as(c_int, 1);
pub const GL_TEXTURE_CUBE_MAP_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9009, .hex);
pub const GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x900A, .hex);
pub const GL_SAMPLER_CUBE_MAP_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x900C, .hex);
pub const GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x900D, .hex);
pub const GL_INT_SAMPLER_CUBE_MAP_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x900E, .hex);
pub const GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x900F, .hex);
pub const GL_IMAGE_CUBE_MAP_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9054, .hex);
pub const GL_INT_IMAGE_CUBE_MAP_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x905F, .hex);
pub const GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x906A, .hex);
pub const GL_EXT_texture_filter_anisotropic = @as(c_int, 1);
pub const GL_TEXTURE_MAX_ANISOTROPY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84FE, .hex);
pub const GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84FF, .hex);
pub const GL_EXT_texture_filter_minmax = @as(c_int, 1);
pub const GL_TEXTURE_REDUCTION_MODE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9366, .hex);
pub const GL_WEIGHTED_AVERAGE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9367, .hex);
pub const GL_EXT_texture_format_BGRA8888 = @as(c_int, 1);
pub const GL_EXT_texture_format_sRGB_override = @as(c_int, 1);
pub const GL_TEXTURE_FORMAT_SRGB_OVERRIDE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FBF, .hex);
pub const GL_EXT_texture_mirror_clamp_to_edge = @as(c_int, 1);
pub const GL_MIRROR_CLAMP_TO_EDGE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8743, .hex);
pub const GL_EXT_texture_norm16 = @as(c_int, 1);
pub const GL_R16_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x822A, .hex);
pub const GL_RG16_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x822C, .hex);
pub const GL_RGBA16_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x805B, .hex);
pub const GL_RGB16_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8054, .hex);
pub const GL_RGB16_SNORM_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F9A, .hex);
pub const GL_EXT_texture_query_lod = @as(c_int, 1);
pub const GL_EXT_texture_rg = @as(c_int, 1);
pub const GL_RED_EXT = @as(c_int, 0x1903);
pub const GL_RG_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8227, .hex);
pub const GL_R8_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8229, .hex);
pub const GL_RG8_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x822B, .hex);
pub const GL_EXT_texture_sRGB_R8 = @as(c_int, 1);
pub const GL_SR8_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FBD, .hex);
pub const GL_EXT_texture_sRGB_RG8 = @as(c_int, 1);
pub const GL_SRG8_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FBE, .hex);
pub const GL_EXT_texture_sRGB_decode = @as(c_int, 1);
pub const GL_TEXTURE_SRGB_DECODE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A48, .hex);
pub const GL_DECODE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A49, .hex);
pub const GL_SKIP_DECODE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8A4A, .hex);
pub const GL_EXT_texture_shadow_lod = @as(c_int, 1);
pub const GL_EXT_texture_storage = @as(c_int, 1);
pub const GL_TEXTURE_IMMUTABLE_FORMAT_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x912F, .hex);
pub const GL_ALPHA8_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x803C, .hex);
pub const GL_LUMINANCE8_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8040, .hex);
pub const GL_LUMINANCE8_ALPHA8_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8045, .hex);
pub const GL_RGBA32F_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8814, .hex);
pub const GL_RGB32F_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8815, .hex);
pub const GL_ALPHA32F_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8816, .hex);
pub const GL_LUMINANCE32F_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8818, .hex);
pub const GL_LUMINANCE_ALPHA32F_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8819, .hex);
pub const GL_ALPHA16F_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x881C, .hex);
pub const GL_LUMINANCE16F_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x881E, .hex);
pub const GL_LUMINANCE_ALPHA16F_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x881F, .hex);
pub const GL_R32F_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x822E, .hex);
pub const GL_RG32F_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8230, .hex);
pub const GL_EXT_texture_storage_compression = @as(c_int, 1);
pub const GL_NUM_SURFACE_COMPRESSION_FIXED_RATES_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F6E, .hex);
pub const GL_SURFACE_COMPRESSION_FIXED_RATE_1BPC_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x96C4, .hex);
pub const GL_SURFACE_COMPRESSION_FIXED_RATE_2BPC_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x96C5, .hex);
pub const GL_SURFACE_COMPRESSION_FIXED_RATE_3BPC_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x96C6, .hex);
pub const GL_SURFACE_COMPRESSION_FIXED_RATE_4BPC_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x96C7, .hex);
pub const GL_SURFACE_COMPRESSION_FIXED_RATE_5BPC_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x96C8, .hex);
pub const GL_SURFACE_COMPRESSION_FIXED_RATE_6BPC_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x96C9, .hex);
pub const GL_SURFACE_COMPRESSION_FIXED_RATE_7BPC_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x96CA, .hex);
pub const GL_SURFACE_COMPRESSION_FIXED_RATE_8BPC_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x96CB, .hex);
pub const GL_SURFACE_COMPRESSION_FIXED_RATE_9BPC_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x96CC, .hex);
pub const GL_SURFACE_COMPRESSION_FIXED_RATE_10BPC_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x96CD, .hex);
pub const GL_SURFACE_COMPRESSION_FIXED_RATE_11BPC_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x96CE, .hex);
pub const GL_SURFACE_COMPRESSION_FIXED_RATE_12BPC_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x96CF, .hex);
pub const GL_EXT_texture_type_2_10_10_10_REV = @as(c_int, 1);
pub const GL_UNSIGNED_INT_2_10_10_10_REV_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8368, .hex);
pub const GL_EXT_texture_view = @as(c_int, 1);
pub const GL_TEXTURE_VIEW_MIN_LEVEL_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82DB, .hex);
pub const GL_TEXTURE_VIEW_NUM_LEVELS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82DC, .hex);
pub const GL_TEXTURE_VIEW_MIN_LAYER_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82DD, .hex);
pub const GL_TEXTURE_VIEW_NUM_LAYERS_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x82DE, .hex);
pub const GL_EXT_unpack_subimage = @as(c_int, 1);
pub const GL_UNPACK_ROW_LENGTH_EXT = @as(c_int, 0x0CF2);
pub const GL_UNPACK_SKIP_ROWS_EXT = @as(c_int, 0x0CF3);
pub const GL_UNPACK_SKIP_PIXELS_EXT = @as(c_int, 0x0CF4);
pub const GL_EXT_win32_keyed_mutex = @as(c_int, 1);
pub const GL_EXT_window_rectangles = @as(c_int, 1);
pub const GL_INCLUSIVE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F10, .hex);
pub const GL_EXCLUSIVE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F11, .hex);
pub const GL_WINDOW_RECTANGLE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F12, .hex);
pub const GL_WINDOW_RECTANGLE_MODE_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F13, .hex);
pub const GL_MAX_WINDOW_RECTANGLES_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F14, .hex);
pub const GL_NUM_WINDOW_RECTANGLES_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F15, .hex);
pub const GL_FJ_shader_binary_GCCSO = @as(c_int, 1);
pub const GL_GCCSO_SHADER_BINARY_FJ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9260, .hex);
pub const GL_IMG_bindless_texture = @as(c_int, 1);
pub const GL_IMG_framebuffer_downsample = @as(c_int, 1);
pub const GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_AND_DOWNSAMPLE_IMG = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x913C, .hex);
pub const GL_NUM_DOWNSAMPLE_SCALES_IMG = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x913D, .hex);
pub const GL_DOWNSAMPLE_SCALES_IMG = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x913E, .hex);
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_SCALE_IMG = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x913F, .hex);
pub const GL_IMG_multisampled_render_to_texture = @as(c_int, 1);
pub const GL_RENDERBUFFER_SAMPLES_IMG = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9133, .hex);
pub const GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_IMG = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9134, .hex);
pub const GL_MAX_SAMPLES_IMG = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9135, .hex);
pub const GL_TEXTURE_SAMPLES_IMG = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9136, .hex);
pub const GL_IMG_program_binary = @as(c_int, 1);
pub const GL_SGX_PROGRAM_BINARY_IMG = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9130, .hex);
pub const GL_IMG_read_format = @as(c_int, 1);
pub const GL_BGRA_IMG = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80E1, .hex);
pub const GL_UNSIGNED_SHORT_4_4_4_4_REV_IMG = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8365, .hex);
pub const GL_IMG_shader_binary = @as(c_int, 1);
pub const GL_SGX_BINARY_IMG = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C0A, .hex);
pub const GL_IMG_texture_compression_pvrtc = @as(c_int, 1);
pub const GL_COMPRESSED_RGB_PVRTC_4BPPV1_IMG = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C00, .hex);
pub const GL_COMPRESSED_RGB_PVRTC_2BPPV1_IMG = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C01, .hex);
pub const GL_COMPRESSED_RGBA_PVRTC_4BPPV1_IMG = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C02, .hex);
pub const GL_COMPRESSED_RGBA_PVRTC_2BPPV1_IMG = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C03, .hex);
pub const GL_IMG_texture_compression_pvrtc2 = @as(c_int, 1);
pub const GL_COMPRESSED_RGBA_PVRTC_2BPPV2_IMG = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9137, .hex);
pub const GL_COMPRESSED_RGBA_PVRTC_4BPPV2_IMG = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9138, .hex);
pub const GL_IMG_texture_filter_cubic = @as(c_int, 1);
pub const GL_CUBIC_IMG = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9139, .hex);
pub const GL_CUBIC_MIPMAP_NEAREST_IMG = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x913A, .hex);
pub const GL_CUBIC_MIPMAP_LINEAR_IMG = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x913B, .hex);
pub const GL_INTEL_blackhole_render = @as(c_int, 1);
pub const GL_BLACKHOLE_RENDER_INTEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83FC, .hex);
pub const GL_INTEL_conservative_rasterization = @as(c_int, 1);
pub const GL_CONSERVATIVE_RASTERIZATION_INTEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83FE, .hex);
pub const GL_INTEL_framebuffer_CMAA = @as(c_int, 1);
pub const GL_INTEL_performance_query = @as(c_int, 1);
pub const GL_PERFQUERY_SINGLE_CONTEXT_INTEL = @as(c_int, 0x00000000);
pub const GL_PERFQUERY_GLOBAL_CONTEXT_INTEL = @as(c_int, 0x00000001);
pub const GL_PERFQUERY_WAIT_INTEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83FB, .hex);
pub const GL_PERFQUERY_FLUSH_INTEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83FA, .hex);
pub const GL_PERFQUERY_DONOT_FLUSH_INTEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x83F9, .hex);
pub const GL_PERFQUERY_COUNTER_EVENT_INTEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x94F0, .hex);
pub const GL_PERFQUERY_COUNTER_DURATION_NORM_INTEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x94F1, .hex);
pub const GL_PERFQUERY_COUNTER_DURATION_RAW_INTEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x94F2, .hex);
pub const GL_PERFQUERY_COUNTER_THROUGHPUT_INTEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x94F3, .hex);
pub const GL_PERFQUERY_COUNTER_RAW_INTEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x94F4, .hex);
pub const GL_PERFQUERY_COUNTER_TIMESTAMP_INTEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x94F5, .hex);
pub const GL_PERFQUERY_COUNTER_DATA_UINT32_INTEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x94F8, .hex);
pub const GL_PERFQUERY_COUNTER_DATA_UINT64_INTEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x94F9, .hex);
pub const GL_PERFQUERY_COUNTER_DATA_FLOAT_INTEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x94FA, .hex);
pub const GL_PERFQUERY_COUNTER_DATA_DOUBLE_INTEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x94FB, .hex);
pub const GL_PERFQUERY_COUNTER_DATA_BOOL32_INTEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x94FC, .hex);
pub const GL_PERFQUERY_QUERY_NAME_LENGTH_MAX_INTEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x94FD, .hex);
pub const GL_PERFQUERY_COUNTER_NAME_LENGTH_MAX_INTEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x94FE, .hex);
pub const GL_PERFQUERY_COUNTER_DESC_LENGTH_MAX_INTEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x94FF, .hex);
pub const GL_PERFQUERY_GPA_EXTENDED_COUNTERS_INTEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9500, .hex);
pub const GL_MESA_bgra = @as(c_int, 1);
pub const GL_BGR_EXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80E0, .hex);
pub const GL_MESA_framebuffer_flip_x = @as(c_int, 1);
pub const GL_FRAMEBUFFER_FLIP_X_MESA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8BBC, .hex);
pub const GL_MESA_framebuffer_flip_y = @as(c_int, 1);
pub const GL_FRAMEBUFFER_FLIP_Y_MESA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8BBB, .hex);
pub const GL_MESA_framebuffer_swap_xy = @as(c_int, 1);
pub const GL_FRAMEBUFFER_SWAP_XY_MESA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8BBD, .hex);
pub const GL_MESA_program_binary_formats = @as(c_int, 1);
pub const GL_PROGRAM_BINARY_FORMAT_MESA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x875F, .hex);
pub const GL_MESA_shader_integer_functions = @as(c_int, 1);
pub const GL_NVX_blend_equation_advanced_multi_draw_buffers = @as(c_int, 1);
pub const GL_NV_bindless_texture = @as(c_int, 1);
pub const GL_NV_blend_equation_advanced = @as(c_int, 1);
pub const GL_BLEND_OVERLAP_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9281, .hex);
pub const GL_BLEND_PREMULTIPLIED_SRC_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9280, .hex);
pub const GL_BLUE_NV = @as(c_int, 0x1905);
pub const GL_COLORBURN_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x929A, .hex);
pub const GL_COLORDODGE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9299, .hex);
pub const GL_CONJOINT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9284, .hex);
pub const GL_CONTRAST_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92A1, .hex);
pub const GL_DARKEN_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9297, .hex);
pub const GL_DIFFERENCE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x929E, .hex);
pub const GL_DISJOINT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9283, .hex);
pub const GL_DST_ATOP_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x928F, .hex);
pub const GL_DST_IN_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x928B, .hex);
pub const GL_DST_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9287, .hex);
pub const GL_DST_OUT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x928D, .hex);
pub const GL_DST_OVER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9289, .hex);
pub const GL_EXCLUSION_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92A0, .hex);
pub const GL_GREEN_NV = @as(c_int, 0x1904);
pub const GL_HARDLIGHT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x929B, .hex);
pub const GL_HARDMIX_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92A9, .hex);
pub const GL_HSL_COLOR_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92AF, .hex);
pub const GL_HSL_HUE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92AD, .hex);
pub const GL_HSL_LUMINOSITY_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92B0, .hex);
pub const GL_HSL_SATURATION_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92AE, .hex);
pub const GL_INVERT_OVG_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92B4, .hex);
pub const GL_INVERT_RGB_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92A3, .hex);
pub const GL_LIGHTEN_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9298, .hex);
pub const GL_LINEARBURN_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92A5, .hex);
pub const GL_LINEARDODGE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92A4, .hex);
pub const GL_LINEARLIGHT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92A7, .hex);
pub const GL_MINUS_CLAMPED_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92B3, .hex);
pub const GL_MINUS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x929F, .hex);
pub const GL_MULTIPLY_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9294, .hex);
pub const GL_OVERLAY_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9296, .hex);
pub const GL_PINLIGHT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92A8, .hex);
pub const GL_PLUS_CLAMPED_ALPHA_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92B2, .hex);
pub const GL_PLUS_CLAMPED_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92B1, .hex);
pub const GL_PLUS_DARKER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9292, .hex);
pub const GL_PLUS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9291, .hex);
pub const GL_RED_NV = @as(c_int, 0x1903);
pub const GL_SCREEN_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9295, .hex);
pub const GL_SOFTLIGHT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x929C, .hex);
pub const GL_SRC_ATOP_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x928E, .hex);
pub const GL_SRC_IN_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x928A, .hex);
pub const GL_SRC_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9286, .hex);
pub const GL_SRC_OUT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x928C, .hex);
pub const GL_SRC_OVER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9288, .hex);
pub const GL_UNCORRELATED_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9282, .hex);
pub const GL_VIVIDLIGHT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92A6, .hex);
pub const GL_XOR_NV = @as(c_int, 0x1506);
pub const GL_NV_blend_equation_advanced_coherent = @as(c_int, 1);
pub const GL_BLEND_ADVANCED_COHERENT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9285, .hex);
pub const GL_NV_blend_minmax_factor = @as(c_int, 1);
pub const GL_FACTOR_MIN_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x901C, .hex);
pub const GL_FACTOR_MAX_AMD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x901D, .hex);
pub const GL_NV_clip_space_w_scaling = @as(c_int, 1);
pub const GL_VIEWPORT_POSITION_W_SCALE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x937C, .hex);
pub const GL_VIEWPORT_POSITION_W_SCALE_X_COEFF_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x937D, .hex);
pub const GL_VIEWPORT_POSITION_W_SCALE_Y_COEFF_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x937E, .hex);
pub const GL_NV_compute_shader_derivatives = @as(c_int, 1);
pub const GL_NV_conditional_render = @as(c_int, 1);
pub const GL_QUERY_WAIT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E13, .hex);
pub const GL_QUERY_NO_WAIT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E14, .hex);
pub const GL_QUERY_BY_REGION_WAIT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E15, .hex);
pub const GL_QUERY_BY_REGION_NO_WAIT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E16, .hex);
pub const GL_NV_conservative_raster = @as(c_int, 1);
pub const GL_CONSERVATIVE_RASTERIZATION_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9346, .hex);
pub const GL_SUBPIXEL_PRECISION_BIAS_X_BITS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9347, .hex);
pub const GL_SUBPIXEL_PRECISION_BIAS_Y_BITS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9348, .hex);
pub const GL_MAX_SUBPIXEL_PRECISION_BIAS_BITS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9349, .hex);
pub const GL_NV_conservative_raster_pre_snap = @as(c_int, 1);
pub const GL_CONSERVATIVE_RASTER_MODE_PRE_SNAP_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9550, .hex);
pub const GL_NV_conservative_raster_pre_snap_triangles = @as(c_int, 1);
pub const GL_CONSERVATIVE_RASTER_MODE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x954D, .hex);
pub const GL_CONSERVATIVE_RASTER_MODE_POST_SNAP_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x954E, .hex);
pub const GL_CONSERVATIVE_RASTER_MODE_PRE_SNAP_TRIANGLES_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x954F, .hex);
pub const GL_NV_copy_buffer = @as(c_int, 1);
pub const GL_COPY_READ_BUFFER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F36, .hex);
pub const GL_COPY_WRITE_BUFFER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8F37, .hex);
pub const GL_NV_coverage_sample = @as(c_int, 1);
pub const GL_COVERAGE_COMPONENT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8ED0, .hex);
pub const GL_COVERAGE_COMPONENT4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8ED1, .hex);
pub const GL_COVERAGE_ATTACHMENT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8ED2, .hex);
pub const GL_COVERAGE_BUFFERS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8ED3, .hex);
pub const GL_COVERAGE_SAMPLES_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8ED4, .hex);
pub const GL_COVERAGE_ALL_FRAGMENTS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8ED5, .hex);
pub const GL_COVERAGE_EDGE_FRAGMENTS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8ED6, .hex);
pub const GL_COVERAGE_AUTOMATIC_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8ED7, .hex);
pub const GL_COVERAGE_BUFFER_BIT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hex);
pub const GL_NV_depth_nonlinear = @as(c_int, 1);
pub const GL_DEPTH_COMPONENT16_NONLINEAR_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E2C, .hex);
pub const GL_NV_draw_buffers = @as(c_int, 1);
pub const GL_MAX_DRAW_BUFFERS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8824, .hex);
pub const GL_DRAW_BUFFER0_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8825, .hex);
pub const GL_DRAW_BUFFER1_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8826, .hex);
pub const GL_DRAW_BUFFER2_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8827, .hex);
pub const GL_DRAW_BUFFER3_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8828, .hex);
pub const GL_DRAW_BUFFER4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8829, .hex);
pub const GL_DRAW_BUFFER5_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x882A, .hex);
pub const GL_DRAW_BUFFER6_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x882B, .hex);
pub const GL_DRAW_BUFFER7_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x882C, .hex);
pub const GL_DRAW_BUFFER8_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x882D, .hex);
pub const GL_DRAW_BUFFER9_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x882E, .hex);
pub const GL_DRAW_BUFFER10_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x882F, .hex);
pub const GL_DRAW_BUFFER11_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8830, .hex);
pub const GL_DRAW_BUFFER12_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8831, .hex);
pub const GL_DRAW_BUFFER13_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8832, .hex);
pub const GL_DRAW_BUFFER14_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8833, .hex);
pub const GL_DRAW_BUFFER15_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8834, .hex);
pub const GL_COLOR_ATTACHMENT0_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE0, .hex);
pub const GL_COLOR_ATTACHMENT1_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE1, .hex);
pub const GL_COLOR_ATTACHMENT2_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE2, .hex);
pub const GL_COLOR_ATTACHMENT3_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE3, .hex);
pub const GL_COLOR_ATTACHMENT4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE4, .hex);
pub const GL_COLOR_ATTACHMENT5_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE5, .hex);
pub const GL_COLOR_ATTACHMENT6_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE6, .hex);
pub const GL_COLOR_ATTACHMENT7_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE7, .hex);
pub const GL_COLOR_ATTACHMENT8_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE8, .hex);
pub const GL_COLOR_ATTACHMENT9_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CE9, .hex);
pub const GL_COLOR_ATTACHMENT10_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CEA, .hex);
pub const GL_COLOR_ATTACHMENT11_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CEB, .hex);
pub const GL_COLOR_ATTACHMENT12_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CEC, .hex);
pub const GL_COLOR_ATTACHMENT13_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CED, .hex);
pub const GL_COLOR_ATTACHMENT14_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CEE, .hex);
pub const GL_COLOR_ATTACHMENT15_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CEF, .hex);
pub const GL_NV_draw_instanced = @as(c_int, 1);
pub const GL_NV_draw_vulkan_image = @as(c_int, 1);
pub const GL_NV_explicit_attrib_location = @as(c_int, 1);
pub const GL_NV_fbo_color_attachments = @as(c_int, 1);
pub const GL_MAX_COLOR_ATTACHMENTS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CDF, .hex);
pub const GL_NV_fence = @as(c_int, 1);
pub const GL_ALL_COMPLETED_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84F2, .hex);
pub const GL_FENCE_STATUS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84F3, .hex);
pub const GL_FENCE_CONDITION_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84F4, .hex);
pub const GL_NV_fill_rectangle = @as(c_int, 1);
pub const GL_FILL_RECTANGLE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x933C, .hex);
pub const GL_NV_fragment_coverage_to_color = @as(c_int, 1);
pub const GL_FRAGMENT_COVERAGE_TO_COLOR_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92DD, .hex);
pub const GL_FRAGMENT_COVERAGE_COLOR_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92DE, .hex);
pub const GL_NV_fragment_shader_barycentric = @as(c_int, 1);
pub const GL_NV_fragment_shader_interlock = @as(c_int, 1);
pub const GL_NV_framebuffer_blit = @as(c_int, 1);
pub const GL_READ_FRAMEBUFFER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CA8, .hex);
pub const GL_DRAW_FRAMEBUFFER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CA9, .hex);
pub const GL_DRAW_FRAMEBUFFER_BINDING_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CA6, .hex);
pub const GL_READ_FRAMEBUFFER_BINDING_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CAA, .hex);
pub const GL_NV_framebuffer_mixed_samples = @as(c_int, 1);
pub const GL_COVERAGE_MODULATION_TABLE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9331, .hex);
pub const GL_COLOR_SAMPLES_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E20, .hex);
pub const GL_DEPTH_SAMPLES_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x932D, .hex);
pub const GL_STENCIL_SAMPLES_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x932E, .hex);
pub const GL_MIXED_DEPTH_SAMPLES_SUPPORTED_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x932F, .hex);
pub const GL_MIXED_STENCIL_SAMPLES_SUPPORTED_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9330, .hex);
pub const GL_COVERAGE_MODULATION_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9332, .hex);
pub const GL_COVERAGE_MODULATION_TABLE_SIZE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9333, .hex);
pub const GL_NV_framebuffer_multisample = @as(c_int, 1);
pub const GL_RENDERBUFFER_SAMPLES_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CAB, .hex);
pub const GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D56, .hex);
pub const GL_MAX_SAMPLES_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8D57, .hex);
pub const GL_NV_generate_mipmap_sRGB = @as(c_int, 1);
pub const GL_NV_geometry_shader_passthrough = @as(c_int, 1);
pub const GL_NV_gpu_shader5 = @as(c_int, 1);
pub const GL_INT64_NV = @as(c_int, 0x140E);
pub const GL_UNSIGNED_INT64_NV = @as(c_int, 0x140F);
pub const GL_INT8_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FE0, .hex);
pub const GL_INT8_VEC2_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FE1, .hex);
pub const GL_INT8_VEC3_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FE2, .hex);
pub const GL_INT8_VEC4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FE3, .hex);
pub const GL_INT16_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FE4, .hex);
pub const GL_INT16_VEC2_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FE5, .hex);
pub const GL_INT16_VEC3_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FE6, .hex);
pub const GL_INT16_VEC4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FE7, .hex);
pub const GL_INT64_VEC2_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FE9, .hex);
pub const GL_INT64_VEC3_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FEA, .hex);
pub const GL_INT64_VEC4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FEB, .hex);
pub const GL_UNSIGNED_INT8_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FEC, .hex);
pub const GL_UNSIGNED_INT8_VEC2_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FED, .hex);
pub const GL_UNSIGNED_INT8_VEC3_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FEE, .hex);
pub const GL_UNSIGNED_INT8_VEC4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FEF, .hex);
pub const GL_UNSIGNED_INT16_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FF0, .hex);
pub const GL_UNSIGNED_INT16_VEC2_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FF1, .hex);
pub const GL_UNSIGNED_INT16_VEC3_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FF2, .hex);
pub const GL_UNSIGNED_INT16_VEC4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FF3, .hex);
pub const GL_UNSIGNED_INT64_VEC2_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FF5, .hex);
pub const GL_UNSIGNED_INT64_VEC3_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FF6, .hex);
pub const GL_UNSIGNED_INT64_VEC4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FF7, .hex);
pub const GL_FLOAT16_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FF8, .hex);
pub const GL_FLOAT16_VEC2_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FF9, .hex);
pub const GL_FLOAT16_VEC3_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FFA, .hex);
pub const GL_FLOAT16_VEC4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FFB, .hex);
pub const GL_PATCHES = @as(c_int, 0x000E);
pub const GL_NV_image_formats = @as(c_int, 1);
pub const GL_NV_instanced_arrays = @as(c_int, 1);
pub const GL_VERTEX_ATTRIB_ARRAY_DIVISOR_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88FE, .hex);
pub const GL_NV_internalformat_sample_query = @as(c_int, 1);
pub const GL_TEXTURE_2D_MULTISAMPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9100, .hex);
pub const GL_TEXTURE_2D_MULTISAMPLE_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9102, .hex);
pub const GL_MULTISAMPLES_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9371, .hex);
pub const GL_SUPERSAMPLE_SCALE_X_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9372, .hex);
pub const GL_SUPERSAMPLE_SCALE_Y_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9373, .hex);
pub const GL_CONFORMANT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9374, .hex);
pub const GL_NV_memory_attachment = @as(c_int, 1);
pub const GL_ATTACHED_MEMORY_OBJECT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x95A4, .hex);
pub const GL_ATTACHED_MEMORY_OFFSET_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x95A5, .hex);
pub const GL_MEMORY_ATTACHABLE_ALIGNMENT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x95A6, .hex);
pub const GL_MEMORY_ATTACHABLE_SIZE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x95A7, .hex);
pub const GL_MEMORY_ATTACHABLE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x95A8, .hex);
pub const GL_DETACHED_MEMORY_INCARNATION_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x95A9, .hex);
pub const GL_DETACHED_TEXTURES_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x95AA, .hex);
pub const GL_DETACHED_BUFFERS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x95AB, .hex);
pub const GL_MAX_DETACHED_TEXTURES_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x95AC, .hex);
pub const GL_MAX_DETACHED_BUFFERS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x95AD, .hex);
pub const GL_NV_memory_object_sparse = @as(c_int, 1);
pub const GL_NV_mesh_shader = @as(c_int, 1);
pub const GL_MESH_SHADER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9559, .hex);
pub const GL_TASK_SHADER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x955A, .hex);
pub const GL_MAX_MESH_UNIFORM_BLOCKS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E60, .hex);
pub const GL_MAX_MESH_TEXTURE_IMAGE_UNITS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E61, .hex);
pub const GL_MAX_MESH_IMAGE_UNIFORMS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E62, .hex);
pub const GL_MAX_MESH_UNIFORM_COMPONENTS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E63, .hex);
pub const GL_MAX_MESH_ATOMIC_COUNTER_BUFFERS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E64, .hex);
pub const GL_MAX_MESH_ATOMIC_COUNTERS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E65, .hex);
pub const GL_MAX_MESH_SHADER_STORAGE_BLOCKS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E66, .hex);
pub const GL_MAX_COMBINED_MESH_UNIFORM_COMPONENTS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E67, .hex);
pub const GL_MAX_TASK_UNIFORM_BLOCKS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E68, .hex);
pub const GL_MAX_TASK_TEXTURE_IMAGE_UNITS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E69, .hex);
pub const GL_MAX_TASK_IMAGE_UNIFORMS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E6A, .hex);
pub const GL_MAX_TASK_UNIFORM_COMPONENTS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E6B, .hex);
pub const GL_MAX_TASK_ATOMIC_COUNTER_BUFFERS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E6C, .hex);
pub const GL_MAX_TASK_ATOMIC_COUNTERS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E6D, .hex);
pub const GL_MAX_TASK_SHADER_STORAGE_BLOCKS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E6E, .hex);
pub const GL_MAX_COMBINED_TASK_UNIFORM_COMPONENTS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E6F, .hex);
pub const GL_MAX_MESH_WORK_GROUP_INVOCATIONS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x95A2, .hex);
pub const GL_MAX_TASK_WORK_GROUP_INVOCATIONS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x95A3, .hex);
pub const GL_MAX_MESH_TOTAL_MEMORY_SIZE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9536, .hex);
pub const GL_MAX_TASK_TOTAL_MEMORY_SIZE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9537, .hex);
pub const GL_MAX_MESH_OUTPUT_VERTICES_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9538, .hex);
pub const GL_MAX_MESH_OUTPUT_PRIMITIVES_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9539, .hex);
pub const GL_MAX_TASK_OUTPUT_COUNT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x953A, .hex);
pub const GL_MAX_DRAW_MESH_TASKS_COUNT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x953D, .hex);
pub const GL_MAX_MESH_VIEWS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9557, .hex);
pub const GL_MESH_OUTPUT_PER_VERTEX_GRANULARITY_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92DF, .hex);
pub const GL_MESH_OUTPUT_PER_PRIMITIVE_GRANULARITY_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9543, .hex);
pub const GL_MAX_MESH_WORK_GROUP_SIZE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x953B, .hex);
pub const GL_MAX_TASK_WORK_GROUP_SIZE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x953C, .hex);
pub const GL_MESH_WORK_GROUP_SIZE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x953E, .hex);
pub const GL_TASK_WORK_GROUP_SIZE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x953F, .hex);
pub const GL_MESH_VERTICES_OUT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9579, .hex);
pub const GL_MESH_PRIMITIVES_OUT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x957A, .hex);
pub const GL_MESH_OUTPUT_TYPE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x957B, .hex);
pub const GL_UNIFORM_BLOCK_REFERENCED_BY_MESH_SHADER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x959C, .hex);
pub const GL_UNIFORM_BLOCK_REFERENCED_BY_TASK_SHADER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x959D, .hex);
pub const GL_REFERENCED_BY_MESH_SHADER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x95A0, .hex);
pub const GL_REFERENCED_BY_TASK_SHADER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x95A1, .hex);
pub const GL_MESH_SHADER_BIT_NV = @as(c_int, 0x00000040);
pub const GL_TASK_SHADER_BIT_NV = @as(c_int, 0x00000080);
pub const GL_MESH_SUBROUTINE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x957C, .hex);
pub const GL_TASK_SUBROUTINE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x957D, .hex);
pub const GL_MESH_SUBROUTINE_UNIFORM_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x957E, .hex);
pub const GL_TASK_SUBROUTINE_UNIFORM_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x957F, .hex);
pub const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_MESH_SHADER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x959E, .hex);
pub const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TASK_SHADER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x959F, .hex);
pub const GL_NV_non_square_matrices = @as(c_int, 1);
pub const GL_FLOAT_MAT2x3_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B65, .hex);
pub const GL_FLOAT_MAT2x4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B66, .hex);
pub const GL_FLOAT_MAT3x2_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B67, .hex);
pub const GL_FLOAT_MAT3x4_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B68, .hex);
pub const GL_FLOAT_MAT4x2_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B69, .hex);
pub const GL_FLOAT_MAT4x3_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B6A, .hex);
pub const GL_NV_path_rendering = @as(c_int, 1);
pub const GL_PATH_FORMAT_SVG_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9070, .hex);
pub const GL_PATH_FORMAT_PS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9071, .hex);
pub const GL_STANDARD_FONT_NAME_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9072, .hex);
pub const GL_SYSTEM_FONT_NAME_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9073, .hex);
pub const GL_FILE_NAME_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9074, .hex);
pub const GL_PATH_STROKE_WIDTH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9075, .hex);
pub const GL_PATH_END_CAPS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9076, .hex);
pub const GL_PATH_INITIAL_END_CAP_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9077, .hex);
pub const GL_PATH_TERMINAL_END_CAP_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9078, .hex);
pub const GL_PATH_JOIN_STYLE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9079, .hex);
pub const GL_PATH_MITER_LIMIT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x907A, .hex);
pub const GL_PATH_DASH_CAPS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x907B, .hex);
pub const GL_PATH_INITIAL_DASH_CAP_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x907C, .hex);
pub const GL_PATH_TERMINAL_DASH_CAP_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x907D, .hex);
pub const GL_PATH_DASH_OFFSET_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x907E, .hex);
pub const GL_PATH_CLIENT_LENGTH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x907F, .hex);
pub const GL_PATH_FILL_MODE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9080, .hex);
pub const GL_PATH_FILL_MASK_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9081, .hex);
pub const GL_PATH_FILL_COVER_MODE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9082, .hex);
pub const GL_PATH_STROKE_COVER_MODE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9083, .hex);
pub const GL_PATH_STROKE_MASK_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9084, .hex);
pub const GL_COUNT_UP_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9088, .hex);
pub const GL_COUNT_DOWN_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9089, .hex);
pub const GL_PATH_OBJECT_BOUNDING_BOX_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x908A, .hex);
pub const GL_CONVEX_HULL_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x908B, .hex);
pub const GL_BOUNDING_BOX_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x908D, .hex);
pub const GL_TRANSLATE_X_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x908E, .hex);
pub const GL_TRANSLATE_Y_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x908F, .hex);
pub const GL_TRANSLATE_2D_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9090, .hex);
pub const GL_TRANSLATE_3D_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9091, .hex);
pub const GL_AFFINE_2D_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9092, .hex);
pub const GL_AFFINE_3D_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9094, .hex);
pub const GL_TRANSPOSE_AFFINE_2D_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9096, .hex);
pub const GL_TRANSPOSE_AFFINE_3D_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9098, .hex);
pub const GL_UTF8_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x909A, .hex);
pub const GL_UTF16_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x909B, .hex);
pub const GL_BOUNDING_BOX_OF_BOUNDING_BOXES_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x909C, .hex);
pub const GL_PATH_COMMAND_COUNT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x909D, .hex);
pub const GL_PATH_COORD_COUNT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x909E, .hex);
pub const GL_PATH_DASH_ARRAY_COUNT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x909F, .hex);
pub const GL_PATH_COMPUTED_LENGTH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90A0, .hex);
pub const GL_PATH_FILL_BOUNDING_BOX_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90A1, .hex);
pub const GL_PATH_STROKE_BOUNDING_BOX_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90A2, .hex);
pub const GL_SQUARE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90A3, .hex);
pub const GL_ROUND_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90A4, .hex);
pub const GL_TRIANGULAR_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90A5, .hex);
pub const GL_BEVEL_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90A6, .hex);
pub const GL_MITER_REVERT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90A7, .hex);
pub const GL_MITER_TRUNCATE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90A8, .hex);
pub const GL_SKIP_MISSING_GLYPH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90A9, .hex);
pub const GL_USE_MISSING_GLYPH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90AA, .hex);
pub const GL_PATH_ERROR_POSITION_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90AB, .hex);
pub const GL_ACCUM_ADJACENT_PAIRS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90AD, .hex);
pub const GL_ADJACENT_PAIRS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90AE, .hex);
pub const GL_FIRST_TO_REST_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90AF, .hex);
pub const GL_PATH_GEN_MODE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90B0, .hex);
pub const GL_PATH_GEN_COEFF_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90B1, .hex);
pub const GL_PATH_GEN_COMPONENTS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90B3, .hex);
pub const GL_PATH_STENCIL_FUNC_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90B7, .hex);
pub const GL_PATH_STENCIL_REF_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90B8, .hex);
pub const GL_PATH_STENCIL_VALUE_MASK_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90B9, .hex);
pub const GL_PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90BD, .hex);
pub const GL_PATH_STENCIL_DEPTH_OFFSET_UNITS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90BE, .hex);
pub const GL_PATH_COVER_DEPTH_FUNC_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90BF, .hex);
pub const GL_PATH_DASH_OFFSET_RESET_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90B4, .hex);
pub const GL_MOVE_TO_RESETS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90B5, .hex);
pub const GL_MOVE_TO_CONTINUES_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x90B6, .hex);
pub const GL_CLOSE_PATH_NV = @as(c_int, 0x00);
pub const GL_MOVE_TO_NV = @as(c_int, 0x02);
pub const GL_RELATIVE_MOVE_TO_NV = @as(c_int, 0x03);
pub const GL_LINE_TO_NV = @as(c_int, 0x04);
pub const GL_RELATIVE_LINE_TO_NV = @as(c_int, 0x05);
pub const GL_HORIZONTAL_LINE_TO_NV = @as(c_int, 0x06);
pub const GL_RELATIVE_HORIZONTAL_LINE_TO_NV = @as(c_int, 0x07);
pub const GL_VERTICAL_LINE_TO_NV = @as(c_int, 0x08);
pub const GL_RELATIVE_VERTICAL_LINE_TO_NV = @as(c_int, 0x09);
pub const GL_QUADRATIC_CURVE_TO_NV = @as(c_int, 0x0A);
pub const GL_RELATIVE_QUADRATIC_CURVE_TO_NV = @as(c_int, 0x0B);
pub const GL_CUBIC_CURVE_TO_NV = @as(c_int, 0x0C);
pub const GL_RELATIVE_CUBIC_CURVE_TO_NV = @as(c_int, 0x0D);
pub const GL_SMOOTH_QUADRATIC_CURVE_TO_NV = @as(c_int, 0x0E);
pub const GL_RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV = @as(c_int, 0x0F);
pub const GL_SMOOTH_CUBIC_CURVE_TO_NV = @as(c_int, 0x10);
pub const GL_RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV = @as(c_int, 0x11);
pub const GL_SMALL_CCW_ARC_TO_NV = @as(c_int, 0x12);
pub const GL_RELATIVE_SMALL_CCW_ARC_TO_NV = @as(c_int, 0x13);
pub const GL_SMALL_CW_ARC_TO_NV = @as(c_int, 0x14);
pub const GL_RELATIVE_SMALL_CW_ARC_TO_NV = @as(c_int, 0x15);
pub const GL_LARGE_CCW_ARC_TO_NV = @as(c_int, 0x16);
pub const GL_RELATIVE_LARGE_CCW_ARC_TO_NV = @as(c_int, 0x17);
pub const GL_LARGE_CW_ARC_TO_NV = @as(c_int, 0x18);
pub const GL_RELATIVE_LARGE_CW_ARC_TO_NV = @as(c_int, 0x19);
pub const GL_RESTART_PATH_NV = @as(c_int, 0xF0);
pub const GL_DUP_FIRST_CUBIC_CURVE_TO_NV = @as(c_int, 0xF2);
pub const GL_DUP_LAST_CUBIC_CURVE_TO_NV = @as(c_int, 0xF4);
pub const GL_RECT_NV = @as(c_int, 0xF6);
pub const GL_CIRCULAR_CCW_ARC_TO_NV = @as(c_int, 0xF8);
pub const GL_CIRCULAR_CW_ARC_TO_NV = @as(c_int, 0xFA);
pub const GL_CIRCULAR_TANGENT_ARC_TO_NV = @as(c_int, 0xFC);
pub const GL_ARC_TO_NV = @as(c_int, 0xFE);
pub const GL_RELATIVE_ARC_TO_NV = @as(c_int, 0xFF);
pub const GL_BOLD_BIT_NV = @as(c_int, 0x01);
pub const GL_ITALIC_BIT_NV = @as(c_int, 0x02);
pub const GL_GLYPH_WIDTH_BIT_NV = @as(c_int, 0x01);
pub const GL_GLYPH_HEIGHT_BIT_NV = @as(c_int, 0x02);
pub const GL_GLYPH_HORIZONTAL_BEARING_X_BIT_NV = @as(c_int, 0x04);
pub const GL_GLYPH_HORIZONTAL_BEARING_Y_BIT_NV = @as(c_int, 0x08);
pub const GL_GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV = @as(c_int, 0x10);
pub const GL_GLYPH_VERTICAL_BEARING_X_BIT_NV = @as(c_int, 0x20);
pub const GL_GLYPH_VERTICAL_BEARING_Y_BIT_NV = @as(c_int, 0x40);
pub const GL_GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV = @as(c_int, 0x80);
pub const GL_GLYPH_HAS_KERNING_BIT_NV = @as(c_int, 0x100);
pub const GL_FONT_X_MIN_BOUNDS_BIT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hex);
pub const GL_FONT_Y_MIN_BOUNDS_BIT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hex);
pub const GL_FONT_X_MAX_BOUNDS_BIT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hex);
pub const GL_FONT_Y_MAX_BOUNDS_BIT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hex);
pub const GL_FONT_UNITS_PER_EM_BIT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hex);
pub const GL_FONT_ASCENDER_BIT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00200000, .hex);
pub const GL_FONT_DESCENDER_BIT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00400000, .hex);
pub const GL_FONT_HEIGHT_BIT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00800000, .hex);
pub const GL_FONT_MAX_ADVANCE_WIDTH_BIT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hex);
pub const GL_FONT_MAX_ADVANCE_HEIGHT_BIT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x02000000, .hex);
pub const GL_FONT_UNDERLINE_POSITION_BIT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hex);
pub const GL_FONT_UNDERLINE_THICKNESS_BIT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x08000000, .hex);
pub const GL_FONT_HAS_KERNING_BIT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000000, .hex);
pub const GL_ROUNDED_RECT_NV = @as(c_int, 0xE8);
pub const GL_RELATIVE_ROUNDED_RECT_NV = @as(c_int, 0xE9);
pub const GL_ROUNDED_RECT2_NV = @as(c_int, 0xEA);
pub const GL_RELATIVE_ROUNDED_RECT2_NV = @as(c_int, 0xEB);
pub const GL_ROUNDED_RECT4_NV = @as(c_int, 0xEC);
pub const GL_RELATIVE_ROUNDED_RECT4_NV = @as(c_int, 0xED);
pub const GL_ROUNDED_RECT8_NV = @as(c_int, 0xEE);
pub const GL_RELATIVE_ROUNDED_RECT8_NV = @as(c_int, 0xEF);
pub const GL_RELATIVE_RECT_NV = @as(c_int, 0xF7);
pub const GL_FONT_GLYPHS_AVAILABLE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9368, .hex);
pub const GL_FONT_TARGET_UNAVAILABLE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9369, .hex);
pub const GL_FONT_UNAVAILABLE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x936A, .hex);
pub const GL_FONT_UNINTELLIGIBLE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x936B, .hex);
pub const GL_CONIC_CURVE_TO_NV = @as(c_int, 0x1A);
pub const GL_RELATIVE_CONIC_CURVE_TO_NV = @as(c_int, 0x1B);
pub const GL_FONT_NUM_GLYPH_INDICES_BIT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hex);
pub const GL_STANDARD_FONT_FORMAT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x936C, .hex);
pub const GL_PATH_PROJECTION_NV = @as(c_int, 0x1701);
pub const GL_PATH_MODELVIEW_NV = @as(c_int, 0x1700);
pub const GL_PATH_MODELVIEW_STACK_DEPTH_NV = @as(c_int, 0x0BA3);
pub const GL_PATH_MODELVIEW_MATRIX_NV = @as(c_int, 0x0BA6);
pub const GL_PATH_MAX_MODELVIEW_STACK_DEPTH_NV = @as(c_int, 0x0D36);
pub const GL_PATH_TRANSPOSE_MODELVIEW_MATRIX_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84E3, .hex);
pub const GL_PATH_PROJECTION_STACK_DEPTH_NV = @as(c_int, 0x0BA4);
pub const GL_PATH_PROJECTION_MATRIX_NV = @as(c_int, 0x0BA7);
pub const GL_PATH_MAX_PROJECTION_STACK_DEPTH_NV = @as(c_int, 0x0D38);
pub const GL_PATH_TRANSPOSE_PROJECTION_MATRIX_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84E4, .hex);
pub const GL_FRAGMENT_INPUT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x936D, .hex);
pub const GL_NV_path_rendering_shared_edge = @as(c_int, 1);
pub const GL_SHARED_EDGE_NV = @as(c_int, 0xC0);
pub const GL_NV_pixel_buffer_object = @as(c_int, 1);
pub const GL_PIXEL_PACK_BUFFER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88EB, .hex);
pub const GL_PIXEL_UNPACK_BUFFER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88EC, .hex);
pub const GL_PIXEL_PACK_BUFFER_BINDING_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88ED, .hex);
pub const GL_PIXEL_UNPACK_BUFFER_BINDING_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88EF, .hex);
pub const GL_NV_polygon_mode = @as(c_int, 1);
pub const GL_POLYGON_MODE_NV = @as(c_int, 0x0B40);
pub const GL_POLYGON_OFFSET_POINT_NV = @as(c_int, 0x2A01);
pub const GL_POLYGON_OFFSET_LINE_NV = @as(c_int, 0x2A02);
pub const GL_POINT_NV = @as(c_int, 0x1B00);
pub const GL_LINE_NV = @as(c_int, 0x1B01);
pub const GL_FILL_NV = @as(c_int, 0x1B02);
pub const GL_NV_primitive_shading_rate = @as(c_int, 1);
pub const GL_SHADING_RATE_IMAGE_PER_PRIMITIVE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x95B1, .hex);
pub const GL_SHADING_RATE_IMAGE_PALETTE_COUNT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x95B2, .hex);
pub const GL_NV_read_buffer = @as(c_int, 1);
pub const GL_READ_BUFFER_NV = @as(c_int, 0x0C02);
pub const GL_NV_read_buffer_front = @as(c_int, 1);
pub const GL_NV_read_depth = @as(c_int, 1);
pub const GL_NV_read_depth_stencil = @as(c_int, 1);
pub const GL_NV_read_stencil = @as(c_int, 1);
pub const GL_NV_representative_fragment_test = @as(c_int, 1);
pub const GL_REPRESENTATIVE_FRAGMENT_TEST_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x937F, .hex);
pub const GL_NV_sRGB_formats = @as(c_int, 1);
pub const GL_SLUMINANCE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C46, .hex);
pub const GL_SLUMINANCE_ALPHA_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C44, .hex);
pub const GL_SRGB8_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C41, .hex);
pub const GL_SLUMINANCE8_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C47, .hex);
pub const GL_SLUMINANCE8_ALPHA8_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C45, .hex);
pub const GL_COMPRESSED_SRGB_S3TC_DXT1_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C4C, .hex);
pub const GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C4D, .hex);
pub const GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C4E, .hex);
pub const GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C4F, .hex);
pub const GL_ETC1_SRGB8_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88EE, .hex);
pub const GL_NV_sample_locations = @as(c_int, 1);
pub const GL_SAMPLE_LOCATION_SUBPIXEL_BITS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x933D, .hex);
pub const GL_SAMPLE_LOCATION_PIXEL_GRID_WIDTH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x933E, .hex);
pub const GL_SAMPLE_LOCATION_PIXEL_GRID_HEIGHT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x933F, .hex);
pub const GL_PROGRAMMABLE_SAMPLE_LOCATION_TABLE_SIZE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9340, .hex);
pub const GL_SAMPLE_LOCATION_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8E50, .hex);
pub const GL_PROGRAMMABLE_SAMPLE_LOCATION_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9341, .hex);
pub const GL_FRAMEBUFFER_PROGRAMMABLE_SAMPLE_LOCATIONS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9342, .hex);
pub const GL_FRAMEBUFFER_SAMPLE_LOCATION_PIXEL_GRID_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9343, .hex);
pub const GL_NV_sample_mask_override_coverage = @as(c_int, 1);
pub const GL_NV_scissor_exclusive = @as(c_int, 1);
pub const GL_SCISSOR_TEST_EXCLUSIVE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9555, .hex);
pub const GL_SCISSOR_BOX_EXCLUSIVE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9556, .hex);
pub const GL_NV_shader_atomic_fp16_vector = @as(c_int, 1);
pub const GL_NV_shader_noperspective_interpolation = @as(c_int, 1);
pub const GL_NV_shader_subgroup_partitioned = @as(c_int, 1);
pub const GL_SUBGROUP_FEATURE_PARTITIONED_BIT_NV = @as(c_int, 0x00000100);
pub const GL_NV_shader_texture_footprint = @as(c_int, 1);
pub const GL_NV_shading_rate_image = @as(c_int, 1);
pub const GL_SHADING_RATE_IMAGE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9563, .hex);
pub const GL_SHADING_RATE_NO_INVOCATIONS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9564, .hex);
pub const GL_SHADING_RATE_1_INVOCATION_PER_PIXEL_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9565, .hex);
pub const GL_SHADING_RATE_1_INVOCATION_PER_1X2_PIXELS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9566, .hex);
pub const GL_SHADING_RATE_1_INVOCATION_PER_2X1_PIXELS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9567, .hex);
pub const GL_SHADING_RATE_1_INVOCATION_PER_2X2_PIXELS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9568, .hex);
pub const GL_SHADING_RATE_1_INVOCATION_PER_2X4_PIXELS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9569, .hex);
pub const GL_SHADING_RATE_1_INVOCATION_PER_4X2_PIXELS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x956A, .hex);
pub const GL_SHADING_RATE_1_INVOCATION_PER_4X4_PIXELS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x956B, .hex);
pub const GL_SHADING_RATE_2_INVOCATIONS_PER_PIXEL_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x956C, .hex);
pub const GL_SHADING_RATE_4_INVOCATIONS_PER_PIXEL_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x956D, .hex);
pub const GL_SHADING_RATE_8_INVOCATIONS_PER_PIXEL_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x956E, .hex);
pub const GL_SHADING_RATE_16_INVOCATIONS_PER_PIXEL_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x956F, .hex);
pub const GL_SHADING_RATE_IMAGE_BINDING_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x955B, .hex);
pub const GL_SHADING_RATE_IMAGE_TEXEL_WIDTH_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x955C, .hex);
pub const GL_SHADING_RATE_IMAGE_TEXEL_HEIGHT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x955D, .hex);
pub const GL_SHADING_RATE_IMAGE_PALETTE_SIZE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x955E, .hex);
pub const GL_MAX_COARSE_FRAGMENT_SAMPLES_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x955F, .hex);
pub const GL_SHADING_RATE_SAMPLE_ORDER_DEFAULT_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x95AE, .hex);
pub const GL_SHADING_RATE_SAMPLE_ORDER_PIXEL_MAJOR_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x95AF, .hex);
pub const GL_SHADING_RATE_SAMPLE_ORDER_SAMPLE_MAJOR_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x95B0, .hex);
pub const GL_NV_shadow_samplers_array = @as(c_int, 1);
pub const GL_SAMPLER_2D_ARRAY_SHADOW_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DC4, .hex);
pub const GL_NV_shadow_samplers_cube = @as(c_int, 1);
pub const GL_SAMPLER_CUBE_SHADOW_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8DC5, .hex);
pub const GL_NV_stereo_view_rendering = @as(c_int, 1);
pub const GL_NV_texture_border_clamp = @as(c_int, 1);
pub const GL_TEXTURE_BORDER_COLOR_NV = @as(c_int, 0x1004);
pub const GL_CLAMP_TO_BORDER_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x812D, .hex);
pub const GL_NV_texture_compression_s3tc_update = @as(c_int, 1);
pub const GL_NV_texture_npot_2D_mipmap = @as(c_int, 1);
pub const GL_NV_timeline_semaphore = @as(c_int, 1);
pub const GL_TIMELINE_SEMAPHORE_VALUE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9595, .hex);
pub const GL_SEMAPHORE_TYPE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x95B3, .hex);
pub const GL_SEMAPHORE_TYPE_BINARY_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x95B4, .hex);
pub const GL_SEMAPHORE_TYPE_TIMELINE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x95B5, .hex);
pub const GL_MAX_TIMELINE_SEMAPHORE_VALUE_DIFFERENCE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x95B6, .hex);
pub const GL_NV_viewport_array = @as(c_int, 1);
pub const GL_MAX_VIEWPORTS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x825B, .hex);
pub const GL_VIEWPORT_SUBPIXEL_BITS_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x825C, .hex);
pub const GL_VIEWPORT_BOUNDS_RANGE_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x825D, .hex);
pub const GL_VIEWPORT_INDEX_PROVOKING_VERTEX_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x825F, .hex);
pub const GL_NV_viewport_array2 = @as(c_int, 1);
pub const GL_NV_viewport_swizzle = @as(c_int, 1);
pub const GL_VIEWPORT_SWIZZLE_POSITIVE_X_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9350, .hex);
pub const GL_VIEWPORT_SWIZZLE_NEGATIVE_X_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9351, .hex);
pub const GL_VIEWPORT_SWIZZLE_POSITIVE_Y_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9352, .hex);
pub const GL_VIEWPORT_SWIZZLE_NEGATIVE_Y_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9353, .hex);
pub const GL_VIEWPORT_SWIZZLE_POSITIVE_Z_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9354, .hex);
pub const GL_VIEWPORT_SWIZZLE_NEGATIVE_Z_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9355, .hex);
pub const GL_VIEWPORT_SWIZZLE_POSITIVE_W_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9356, .hex);
pub const GL_VIEWPORT_SWIZZLE_NEGATIVE_W_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9357, .hex);
pub const GL_VIEWPORT_SWIZZLE_X_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9358, .hex);
pub const GL_VIEWPORT_SWIZZLE_Y_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9359, .hex);
pub const GL_VIEWPORT_SWIZZLE_Z_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x935A, .hex);
pub const GL_VIEWPORT_SWIZZLE_W_NV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x935B, .hex);
pub const GL_OVR_multiview = @as(c_int, 1);
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_NUM_VIEWS_OVR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9630, .hex);
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_BASE_VIEW_INDEX_OVR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9632, .hex);
pub const GL_MAX_VIEWS_OVR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9631, .hex);
pub const GL_FRAMEBUFFER_INCOMPLETE_VIEW_TARGETS_OVR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9633, .hex);
pub const GL_OVR_multiview2 = @as(c_int, 1);
pub const GL_OVR_multiview_multisampled_render_to_texture = @as(c_int, 1);
pub const GL_QCOM_YUV_texture_gather = @as(c_int, 1);
pub const GL_QCOM_alpha_test = @as(c_int, 1);
pub const GL_ALPHA_TEST_QCOM = @as(c_int, 0x0BC0);
pub const GL_ALPHA_TEST_FUNC_QCOM = @as(c_int, 0x0BC1);
pub const GL_ALPHA_TEST_REF_QCOM = @as(c_int, 0x0BC2);
pub const GL_QCOM_binning_control = @as(c_int, 1);
pub const GL_BINNING_CONTROL_HINT_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FB0, .hex);
pub const GL_CPU_OPTIMIZED_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FB1, .hex);
pub const GL_GPU_OPTIMIZED_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FB2, .hex);
pub const GL_RENDER_DIRECT_TO_FRAMEBUFFER_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FB3, .hex);
pub const GL_QCOM_driver_control = @as(c_int, 1);
pub const GL_QCOM_extended_get = @as(c_int, 1);
pub const GL_TEXTURE_WIDTH_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8BD2, .hex);
pub const GL_TEXTURE_HEIGHT_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8BD3, .hex);
pub const GL_TEXTURE_DEPTH_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8BD4, .hex);
pub const GL_TEXTURE_INTERNAL_FORMAT_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8BD5, .hex);
pub const GL_TEXTURE_FORMAT_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8BD6, .hex);
pub const GL_TEXTURE_TYPE_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8BD7, .hex);
pub const GL_TEXTURE_IMAGE_VALID_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8BD8, .hex);
pub const GL_TEXTURE_NUM_LEVELS_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8BD9, .hex);
pub const GL_TEXTURE_TARGET_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8BDA, .hex);
pub const GL_TEXTURE_OBJECT_VALID_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8BDB, .hex);
pub const GL_STATE_RESTORE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8BDC, .hex);
pub const GL_QCOM_extended_get2 = @as(c_int, 1);
pub const GL_QCOM_frame_extrapolation = @as(c_int, 1);
pub const GL_QCOM_framebuffer_foveated = @as(c_int, 1);
pub const GL_FOVEATION_ENABLE_BIT_QCOM = @as(c_int, 0x00000001);
pub const GL_FOVEATION_SCALED_BIN_METHOD_BIT_QCOM = @as(c_int, 0x00000002);
pub const GL_QCOM_motion_estimation = @as(c_int, 1);
pub const GL_MOTION_ESTIMATION_SEARCH_BLOCK_X_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C90, .hex);
pub const GL_MOTION_ESTIMATION_SEARCH_BLOCK_Y_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C91, .hex);
pub const GL_QCOM_perfmon_global_mode = @as(c_int, 1);
pub const GL_PERFMON_GLOBAL_MODE_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FA0, .hex);
pub const GL_QCOM_render_shared_exponent = @as(c_int, 1);
pub const GL_QCOM_shader_framebuffer_fetch_noncoherent = @as(c_int, 1);
pub const GL_FRAMEBUFFER_FETCH_NONCOHERENT_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x96A2, .hex);
pub const GL_QCOM_shader_framebuffer_fetch_rate = @as(c_int, 1);
pub const GL_QCOM_shading_rate = @as(c_int, 1);
pub const GL_SHADING_RATE_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x96A4, .hex);
pub const GL_SHADING_RATE_PRESERVE_ASPECT_RATIO_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x96A5, .hex);
pub const GL_SHADING_RATE_1X1_PIXELS_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x96A6, .hex);
pub const GL_SHADING_RATE_1X2_PIXELS_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x96A7, .hex);
pub const GL_SHADING_RATE_2X1_PIXELS_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x96A8, .hex);
pub const GL_SHADING_RATE_2X2_PIXELS_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x96A9, .hex);
pub const GL_SHADING_RATE_4X2_PIXELS_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x96AC, .hex);
pub const GL_SHADING_RATE_4X4_PIXELS_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x96AE, .hex);
pub const GL_QCOM_texture_foveated = @as(c_int, 1);
pub const GL_TEXTURE_FOVEATED_FEATURE_BITS_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8BFB, .hex);
pub const GL_TEXTURE_FOVEATED_MIN_PIXEL_DENSITY_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8BFC, .hex);
pub const GL_TEXTURE_FOVEATED_FEATURE_QUERY_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8BFD, .hex);
pub const GL_TEXTURE_FOVEATED_NUM_FOCAL_POINTS_QUERY_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8BFE, .hex);
pub const GL_FRAMEBUFFER_INCOMPLETE_FOVEATION_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8BFF, .hex);
pub const GL_QCOM_texture_foveated2 = @as(c_int, 1);
pub const GL_TEXTURE_FOVEATED_CUTOFF_DENSITY_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x96A0, .hex);
pub const GL_QCOM_texture_foveated_subsampled_layout = @as(c_int, 1);
pub const GL_FOVEATION_SUBSAMPLED_LAYOUT_METHOD_BIT_QCOM = @as(c_int, 0x00000004);
pub const GL_MAX_SHADER_SUBSAMPLED_IMAGE_UNITS_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FA1, .hex);
pub const GL_QCOM_tiled_rendering = @as(c_int, 1);
pub const GL_COLOR_BUFFER_BIT0_QCOM = @as(c_int, 0x00000001);
pub const GL_COLOR_BUFFER_BIT1_QCOM = @as(c_int, 0x00000002);
pub const GL_COLOR_BUFFER_BIT2_QCOM = @as(c_int, 0x00000004);
pub const GL_COLOR_BUFFER_BIT3_QCOM = @as(c_int, 0x00000008);
pub const GL_COLOR_BUFFER_BIT4_QCOM = @as(c_int, 0x00000010);
pub const GL_COLOR_BUFFER_BIT5_QCOM = @as(c_int, 0x00000020);
pub const GL_COLOR_BUFFER_BIT6_QCOM = @as(c_int, 0x00000040);
pub const GL_COLOR_BUFFER_BIT7_QCOM = @as(c_int, 0x00000080);
pub const GL_DEPTH_BUFFER_BIT0_QCOM = @as(c_int, 0x00000100);
pub const GL_DEPTH_BUFFER_BIT1_QCOM = @as(c_int, 0x00000200);
pub const GL_DEPTH_BUFFER_BIT2_QCOM = @as(c_int, 0x00000400);
pub const GL_DEPTH_BUFFER_BIT3_QCOM = @as(c_int, 0x00000800);
pub const GL_DEPTH_BUFFER_BIT4_QCOM = @as(c_int, 0x00001000);
pub const GL_DEPTH_BUFFER_BIT5_QCOM = @as(c_int, 0x00002000);
pub const GL_DEPTH_BUFFER_BIT6_QCOM = @as(c_int, 0x00004000);
pub const GL_DEPTH_BUFFER_BIT7_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hex);
pub const GL_STENCIL_BUFFER_BIT0_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hex);
pub const GL_STENCIL_BUFFER_BIT1_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hex);
pub const GL_STENCIL_BUFFER_BIT2_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hex);
pub const GL_STENCIL_BUFFER_BIT3_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hex);
pub const GL_STENCIL_BUFFER_BIT4_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hex);
pub const GL_STENCIL_BUFFER_BIT5_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00200000, .hex);
pub const GL_STENCIL_BUFFER_BIT6_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00400000, .hex);
pub const GL_STENCIL_BUFFER_BIT7_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00800000, .hex);
pub const GL_MULTISAMPLE_BUFFER_BIT0_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hex);
pub const GL_MULTISAMPLE_BUFFER_BIT1_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x02000000, .hex);
pub const GL_MULTISAMPLE_BUFFER_BIT2_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x04000000, .hex);
pub const GL_MULTISAMPLE_BUFFER_BIT3_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x08000000, .hex);
pub const GL_MULTISAMPLE_BUFFER_BIT4_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000000, .hex);
pub const GL_MULTISAMPLE_BUFFER_BIT5_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hex);
pub const GL_MULTISAMPLE_BUFFER_BIT6_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40000000, .hex);
pub const GL_MULTISAMPLE_BUFFER_BIT7_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hex);
pub const GL_QCOM_writeonly_rendering = @as(c_int, 1);
pub const GL_WRITEONLY_RENDERING_QCOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8823, .hex);
pub const GL_VIV_shader_binary = @as(c_int, 1);
pub const GL_SHADER_BINARY_VIV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8FC4, .hex);
pub const __GLsync = struct___GLsync;
